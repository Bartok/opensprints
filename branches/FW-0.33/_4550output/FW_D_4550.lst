MP2COD 4.12, COFF to COD File Converter
Copyright (c) 2007 Microchip Technology Inc.
Listing File Generated: Tue Sep 04 23:14:27 2007


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\main.c
                                            * FileName:        main.c                                                       e:\iro_svn\opensprints\FW\main.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\main.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\main.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\main.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\main.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\main.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\main.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\main.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\main.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\main.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\main.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\main.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\main.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\main.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\main.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\main.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\main.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\main.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\main.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\main.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\main.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\main.c
                                           #include "system\typedefs.h"                        // Required                  e:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb.h"                         // Required                  e:\iro_svn\opensprints\FW\main.c
                                           #include "io_cfg.h"                                 // Required                  e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb_compile_time_validation.h" // Optional                  e:\iro_svn\opensprints\FW\main.c
                                           #include "user\user.h"                              // Modifiable                e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void);                                              e:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void);                                                             e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           #pragma code high_vector_section = 0x000808                                      e:\iro_svn\opensprints\FW\main.c
                                           void high_vector (void)                                                          e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
000808   efbb     GOTO      0xb76              _asm goto high_ISR _endasm                                                   e:\iro_svn\opensprints\FW\main.c
00080a   f005                                                                                                               
00080c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\main.c
                                           #pragma code low_vector_section = 0x000818                                       e:\iro_svn\opensprints\FW\main.c
                                           void low_vector (void)                                                           e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
000818   ef22     GOTO      0x844              _asm goto low_ISR _endasm                                                    e:\iro_svn\opensprints\FW\main.c
00081a   f004                                                                                                               
00081c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        void main(void)                                              e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Main program entry point.                                    e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           void main(void)                                                                  e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
0048c0   d805     RCALL     0x48cc             InitializeSystem();                                                          e:\iro_svn\opensprints\FW\main.c
0048c8   d7fc     BRA       0x48c2         	while(1)                                                                        e:\iro_svn\opensprints\FW\main.c
                                               {                                                                            e:\iro_svn\opensprints\FW\main.c
0048c2   d811     RCALL     0x48e6                 USBTasks();         // USB Tasks                                         e:\iro_svn\opensprints\FW\main.c
0048c4   ec93     CALL      0xd26,0x0              ProcessIO();        // See user.c and user.h                             e:\iro_svn\opensprints\FW\main.c
0048c6   f006                                                                                                               
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\main.c
0048ca   0012     RETURN    0x0            }//end main                                                                      e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        static void InitializeSystem(void)                           e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        InitializeSystem is a centralize initialization routine.     e:\iro_svn\opensprints\FW\main.c
                                            *                  All required USB initialization routines are called from     e:\iro_svn\opensprints\FW\main.c
                                            *                  here.                                                        e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *                  User application initialization routine should also be       e:\iro_svn\opensprints\FW\main.c
                                            *                  called from here.                                            e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void)                                               e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
0048cc   0e0f     MOVLW     0xf                ADCON1 |= 0x0F;                 // Default all pins to digital               e:\iro_svn\opensprints\FW\main.c
0048ce   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
0048d0   0e14     MOVLW     0x14               mInitializeUSBDriver();         // See usbdrv.h                              e:\iro_svn\opensprints\FW\main.c
0048d2   6e6f     MOVWF     0x6f,0x0                                                                                        
0048d4   0101     MOVLB     0x1                                                                                             
0048d6   6bea     CLRF      0xea,0x1                                                                                        
0048d8   0101     MOVLB     0x1                                                                                             
0048da   6beb     CLRF      0xeb,0x1                                                                                        
0048dc   0101     MOVLB     0x1                                                                                             
0048de   6bec     CLRF      0xec,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
0048e0   ecc4     CALL      0xb88,0x0          UserInit();                     // See user.c & .h                           e:\iro_svn\opensprints\FW\main.c
0048e2   f005                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
0048e4   0012     RETURN    0x0            }//end InitializeSystem                                                          e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        void USBTasks(void)                                          e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    InitializeSystem has been called.                            e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Service loop for USB tasks.                                  e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void)                                                              e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\main.c
                                                * Servicing Hardware                                                        e:\iro_svn\opensprints\FW\main.c
                                                */                                                                          e:\iro_svn\opensprints\FW\main.c
0048e6   ec63     CALL      0x40c6,0x0         USBCheckBusStatus();                    // Must use polling method           e:\iro_svn\opensprints\FW\main.c
0048e8   f020                                                                                                               
0048ea   be6f     BTFSC     0x6f,0x7,0x0       if(UCFGbits.UTEYE!=1)                                                        e:\iro_svn\opensprints\FW\main.c
0048ec   d002     BRA       0x48f2                                                                                          
0048ee   ec83     CALL      0x4106,0x0             USBDriverService();                 // Interrupt or polling method       e:\iro_svn\opensprints\FW\main.c
0048f0   f020                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                               #if defined(USB_USE_CDC)                                                     e:\iro_svn\opensprints\FW\main.c
0048f2   ecad     CALL      0x395a,0x0         CDCTxService();                                                              e:\iro_svn\opensprints\FW\main.c
0048f4   f01c                                                                                                               
                                               #endif                                                                       e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
0048f6   0012     RETURN    0x0            }// end USBTasks                                                                 e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** EOF main.c ***************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * FileName:        usbmmap.c                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * -usbmmap.c-                                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB Memory Map                                                                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * This file is the USB memory manager; it serves as a compile-time memory       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * allocator for the USB endpoints. It uses the compile time options passed      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * from usbcfg.h to instantiate endpoints and endpoint buffer.                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Each endpoint requires to have a set of Buffer Descriptor registers(BDT).     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A BDT is 4-byte long and has a specific RAM location for each endpoint.       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 out is located at address 0x400 to 0x403.              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 in is located at address 0x404 to 0x407.               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 1 out is located at address 0x408 to 0x40B.              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and so on... The above allocation assumes the Ping-Pong Buffer Mode 0 is      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used. These locations are already hard-wired in the silicon. The point        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of doing instantiation, i.e. volatile far BDT ep0Bo;, is to provide the       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * C compiler a way to address each variable directly. This is very important    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * because when a register can be accessed directly, it saves execution time     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and reduces program size.                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Endpoints are defined using the endpoint number and the direction             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of transfer. For simplicity, usbmmap.c only uses the endpoint number          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in the BDT register allocation scheme. This means if the usbcfg.h states      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * that the MAX_EP_NUMBER is number 1, then four BDTs will be                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated: one each for endpoint0 in and endpoint0 out, which must         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * always be instantiated for control transfer by default, and one each sets     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * for endpoint1 in and endpoint1 out. The naming convention for instantiating   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * BDT is                                                                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * ep<#>B<d>                                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * where # is the endpoint number, and d is the direction of                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer, which could be either <i> or <o>.                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The USB memory manager uses MAX_EP_NUMBER, as defined in usbcfg.h, to define  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the endpoints to be instantiated. This represents the highest endpoint        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * number to be allocated, not how many endpoints are used. Since the BDTs for   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * endpoints have hardware-assigned addresses in Bank 4, setting this value too  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * high may lead to inefficient use of data RAM. For example, if an application  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * uses only endpoints EP0 and EP4, then the MAX_EP_NUMBER is 4, and not 2.      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The in-between endpoint BDTs in this example (EP1, EP2, and EP3) go unused,   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and the 24 bytes of memory associated with them are wasted. It does not make  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * much sense to skip endpoints, but the final decision lies with the user.      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The next step is to assign the instantiated BDTs to different                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB functions. The firmware framework fundamentally assumes that every USB    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * function should know which endpoint it is using, i.e., the default control    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer should know that it is using endpoint 0 in and endpoint 0 out.       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A HID class can choose which endpoint it wants to use, but once chosen, it    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * should always know the number of the endpoint.                                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The assignment of endpoints to USB functions is managed centrally             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in usbcfg.h. This helps prevent the mistake of having more                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * than one USB function using the same endpoint. The "Endpoint Allocation"      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * section in usbcfg.h provides examples for how to map USB endpoints to USB     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * functions.                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Quite a few things can be mapped in that section. There is no                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * one correct way to do the mapping and the user has the choice to              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * choose a method that is most suitable to the application.                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Typically, however, a user will want to map the following for a given         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB interface function:                                                       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 1. The USB interface ID                                                       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 2. The endpoint control registers (UEPn)                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 3. The BDT registers (ep<#>B<d>)                                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 4. The endpoint size                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Example: Assume a USB device class "foo", which uses one out endpoint         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *          of size 64-byte and one in endpoint of size 64-byte, then:           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_INTF_ID          0x00                                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_UEP              UEP1                                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_OUT           ep1Bo                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_IN            ep1Bi                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_EP_SIZE          64                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The mapping above has chosen class "foo" to use endpoint 1.                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The names are arbitrary and can be anything other than FOO_??????.            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For abstraction, the code for class "foo" should use the abstract             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * definitions of FOO_BD_OUT,FOO_BD_IN, and not ep1Bo or ep1Bi.                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Note that the endpoint size defined in the usbcfg.h file is again             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used in the usbmmap.c file. This shows that the relationship between          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the two files are tightly related.                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The endpoint buffer for each USB function must be located in the              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * dual-port RAM area and has to come after all the BDTs have been               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated. An example declaration is:                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * volatile far unsigned char[FOO_EP_SIZE] data;                                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The 'volatile' keyword tells the compiler not to perform any code             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * optimization on this variable because its content could be modified           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * by the hardware. The 'far' keyword tells the compiler that this variable      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * is not located in the Access RAM area (0x000 - 0x05F).                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For the variable to be globally accessible by other files, it should be       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * declared in the header file usbmmap.h as an extern definition, such as        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * extern volatile far unsigned char[FOO_EP_SIZE] data;                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Conclusion:                                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * In a short summary, the dependencies between usbcfg and usbmmap can           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * be shown as:                                                                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[MAX_EP_NUMBER] -> usbmmap                                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[ep<#>B<d>] -> usbcfg                                                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[EP size] -> usbmmap                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[abstract ep definitions] -> usb9/hid/cdc/etc class code                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[endpoint buffer variable] -> usb9/hid/cdc/etc class code              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Data mapping provides a means for direct addressing of BDT and endpoint       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * buffer. This means less usage of pointers, which equates to a faster and      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * smaller program code.                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  G L O B A L  V A R I A B L E S ************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_device_state;          // Device States: DETACHED, ATTACHED, ...        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           USB_DEVICE_STATUS usb_stat;     // Global USB flags                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_active_cfg;            // Value of current configuration                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_alt_intf[MAX_NUM_INT]; // Array to keep track of the current alternate  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                           // setting for each interface ID                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  F I X E D  L O C A T I O N  V A R I A B L E S *********************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram4=0x400     //See Linker Script,usb4:0x400-0x4FF(256-byte)   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section A: Buffer Descriptor Table                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - 0x400 - 0x4FF(max)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - MAX_EP_NUMBER is defined in autofiles\usbcfg.h                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - BDT data type is defined in system\usb\usbmmap.h                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(0 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bo;         //Endpoint #0 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bi;         //Endpoint #0 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(1 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bo;         //Endpoint #1 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bi;         //Endpoint #1 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(2 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bo;         //Endpoint #2 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bi;         //Endpoint #2 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(3 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bo;         //Endpoint #3 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bi;         //Endpoint #3 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(4 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bo;         //Endpoint #4 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bi;         //Endpoint #4 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(5 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bo;         //Endpoint #5 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bi;         //Endpoint #5 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(6 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bo;         //Endpoint #6 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bi;         //Endpoint #6 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(7 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bo;         //Endpoint #7 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bi;         //Endpoint #7 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(8 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bo;         //Endpoint #8 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bi;         //Endpoint #8 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(9 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bo;         //Endpoint #9 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bi;         //Endpoint #9 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(10 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bo;        //Endpoint #10 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bi;        //Endpoint #10 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(11 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bo;        //Endpoint #11 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bi;        //Endpoint #11 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(12 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bo;        //Endpoint #12 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bi;        //Endpoint #12 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(13 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bo;        //Endpoint #13 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bi;        //Endpoint #13 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(14 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bo;        //Endpoint #14 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bi;        //Endpoint #14 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(15 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bo;        //Endpoint #15 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bi;        //Endpoint #15 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section B: EP0 Buffer Space                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Two buffer areas are defined:                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   A. CTRL_TRF_SETUP                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Detailed data structure allows direct adddressing of bits and bytes.   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   B. CTRL_TRF_DATA                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Data structure allows direct adddressing of the first 8 bytes.         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Both data types are defined in system\usb\usbdefs\usbdefs_ep0_buff.h        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_SETUP SetupPkt;                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_DATA CtrlTrfData;                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section C: CDC Buffer                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram5a=0x500    //See Linker Script,usb5:0x500-...               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if defined(USB_USE_CDC)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_notice[CDC_INT_EP_SIZE];                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_rx[CDC_BULK_OUT_EP_SIZE];                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_tx[CDC_BULK_IN_EP_SIZE];                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** EOF usbmmap.c ************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * FileName:        usbdrv.c                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "io_cfg.h"             // Required for USBCheckBusStatus()              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void);                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void);                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void);                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void);                                              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBCheckBusStatus(void)                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables/disables the USB module by monitoring   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the USB power signal.                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBCheckBusStatus(void)                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /**************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Bus Attachment & Detachment Detection                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * usb_bus_sense is an i/o pin defined in io_cfg.h                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_ATTACHED    1                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_DETACHED    0                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               if(usb_bus_sense == USB_BUS_ATTACHED)       // Is USB bus attached?          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c6   a66d     BTFSS     0x6d,0x3,0x0           if(UCONbits.USBEN == 0)                 // Is the module off?            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c8   d810     RCALL     0x40ea                     USBModuleEnable();                  // Is off, enable it             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ca   d002     BRA       0x40d0             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040cc   b66d     BTFSC     0x6d,0x3,0x0           if(UCONbits.USBEN == 1)                 // Is the module on?             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ce   d814     RCALL     0x40f8                     USBModuleDisable();                 // Is on, disable it             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_bus_sense...)                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * After enabling the USB module, it takes some time for the voltage         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * on the D+ or D- line to rise high enough to get out of the SE0 condition. e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * The USB Reset interrupt should not be unmasked until the SE0 condition is e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * cleared. This helps preventing the firmware from misinterpreting this     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * unique event as a USB bus reset from the USB host.                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d0   0101     MOVLB     0x1                if(usb_device_state == ATTACHED_STATE)                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d2   05ea     DECF      0xea,0x0,0x1                                                                                    
0040d4   e109     BNZ       0x40e8                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d6   ba6d     BTFSC     0x6d,0x5,0x0           if(!UCONbits.SE0)                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d8   d007     BRA       0x40e8                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040da   6a68     CLRF      0x68,0x0                   UIR = 0;                        // Clear all USB interrupts          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040dc   6a69     CLRF      0x69,0x0                   UIE = 0;                        // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040de   8069     BSF       0x69,0x0,0x0               UIEbits.URSTIE = 1;             // Unmask RESET interrupt            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e0   8869     BSF       0x69,0x4,0x0               UIEbits.IDLEIE = 1;             // Unmask IDLE interrupt             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e2   0101     MOVLB     0x1                        usb_device_state = POWERED_STATE;                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e4   0e02     MOVLW     0x2                                                                                             
0040e6   6fea     MOVWF     0xea,0x1                                                                                        
                                                   }//end if                           // else wait until SE0 is cleared    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_device_state == ATTACHED_STATE)                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e8   0012     RETURN    0x0            }//end USBCheckBusStatus                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleEnable(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables the USB module.                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ea   6a6d     CLRF      0x6d,0x0           UCON = 0;                                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ec   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ee   866d     BSF       0x6d,0x3,0x0       UCONbits.USBEN = 1;                     // Enable module & attach to bus     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f0   0101     MOVLB     0x1                usb_device_state = ATTACHED_STATE;      // Defined in usbmmap.c & .h         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f2   0e01     MOVLW     0x1                                                                                             
0040f4   6fea     MOVWF     0xea,0x1                                                                                        
0040f6   0012     RETURN    0x0            }//end USBModuleEnable                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleDisable(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine disables the USB module.                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f8   6a6d     CLRF      0x6d,0x0           UCON = 0;                               // Disable module & detach from bus  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040fa   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040fc   0101     MOVLB     0x1                usb_device_state = DETACHED_STATE;      // Defined in usbmmap.c & .h         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040fe   6bea     CLRF      0xea,0x1                                                                                        
004100   0012     RETURN    0x0            }//end USBModuleDisable                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSoftDetach(void)                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    The device will have to be re-enumerated to function again.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        USBSoftDetach electrically disconnects the device from       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the bus. This is done by stop supplying Vusb voltage to      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pull-up resistor. The pull-down resistors on the host        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  side will pull both differential signal lines low and        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the host registers the event as a disconnect.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Since the USB cable is not physically disconnected, the      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  power supply through the cable can still be sensed by        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the device. The next time USBCheckBusStatus() function       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is called, it will reconnect the device back to the bus.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSoftDetach(void)                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004102   dffa     RCALL     0x40f8             USBModuleDisable();                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004104   0012     RETURN    0x0            }//end USBSoftDetach                                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBDriverService(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine is the heart of this firmware. It manages       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  all USB interrupts.                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            Device state transitions through the following stages:       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  DETACHED -> ATTACHED -> POWERED -> DEFAULT ->                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ADDRESS_PENDING -> ADDRESSED -> CONFIGURED -> READY          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBDriverService(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if USB cable is not even attached.        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004106   0101     MOVLB     0x1                if(usb_device_state == DETACHED_STATE) return;                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004108   51ea     MOVF      0xea,0x0,0x1                                                                                    
00410a   e101     BNZ       0x410e                                                                                          
00410c   d03a     BRA       0x4182                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task A: Service USB Activity Interrupt                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00410e   5068     MOVF      0x68,0x0,0x0       if(UIRbits.ACTVIF && UIEbits.ACTVIE)    USBWakeFromSuspend();                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004110   0b04     ANDLW     0x4                                                                                             
004112   e004     BZ        0x411c                                                                                          
004114   5069     MOVF      0x69,0x0,0x0                                                                                    
004116   0b04     ANDLW     0x4                                                                                             
004118   e001     BZ        0x411c                                                                                          
00411a   d83c     RCALL     0x4194                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the device is in suspend mode.         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411c   b26d     BTFSC     0x6d,0x1,0x0       if(UCONbits.SUSPND==1) return;                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411e   d031     BRA       0x4182                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task B: Service USB Bus Reset Interrupt.                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When bus reset is received during suspend, ACTVIF will be set first,      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * once the UCONbits.SUSPND is clear, then the URSTIF bit will be asserted.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is why URSTIF is checked after ACTVIF.                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004120   5068     MOVF      0x68,0x0,0x0       if(UIRbits.URSTIF && UIEbits.URSTIE)    USBProtocolResetHandler();           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004122   0b01     ANDLW     0x1                                                                                             
004124   e004     BZ        0x412e                                                                                          
004126   5069     MOVF      0x69,0x0,0x0                                                                                    
004128   0b01     ANDLW     0x1                                                                                             
00412a   e001     BZ        0x412e                                                                                          
00412c   d856     RCALL     0x41da                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task C: Service other USB interrupts                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00412e   5068     MOVF      0x68,0x0,0x0       if(UIRbits.IDLEIF && UIEbits.IDLEIE)    USBSuspend();                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004130   0b10     ANDLW     0x10                                                                                            
004132   e004     BZ        0x413c                                                                                          
004134   5069     MOVF      0x69,0x0,0x0                                                                                    
004136   0b10     ANDLW     0x10                                                                                            
004138   e001     BZ        0x413c                                                                                          
00413a   d824     RCALL     0x4184                                                                                          
00413c   5068     MOVF      0x68,0x0,0x0       if(UIRbits.SOFIF && UIEbits.SOFIE)      USB_SOF_Handler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00413e   0b40     ANDLW     0x40                                                                                            
004140   e004     BZ        0x414a                                                                                          
004142   5069     MOVF      0x69,0x0,0x0                                                                                    
004144   0b40     ANDLW     0x40                                                                                            
004146   e001     BZ        0x414a                                                                                          
004148   d83d     RCALL     0x41c4                                                                                          
00414a   5068     MOVF      0x68,0x0,0x0       if(UIRbits.STALLIF && UIEbits.STALLIE)  USBStallHandler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00414c   0b20     ANDLW     0x20                                                                                            
00414e   e004     BZ        0x4158                                                                                          
004150   5069     MOVF      0x69,0x0,0x0                                                                                    
004152   0b20     ANDLW     0x20                                                                                            
004154   e001     BZ        0x4158                                                                                          
004156   d838     RCALL     0x41c8                                                                                          
004158   5068     MOVF      0x68,0x0,0x0       if(UIRbits.UERRIF && UIEbits.UERRIE)    USBErrorHandler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00415a   0b02     ANDLW     0x2                                                                                             
00415c   e004     BZ        0x4166                                                                                          
00415e   5069     MOVF      0x69,0x0,0x0                                                                                    
004160   0b02     ANDLW     0x2                                                                                             
004162   e001     BZ        0x4166                                                                                          
004164   d838     RCALL     0x41d6                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the host has not sent a bus reset.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Once bus reset is received, the device transitions into the DEFAULT       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * state and is ready for communication.                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004166   0e03     MOVLW     0x3                if(usb_device_state < DEFAULT_STATE) return;                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004168   0101     MOVLB     0x1                                                                                             
00416a   5dea     SUBWF     0xea,0x0,0x1                                                                                    
00416c   e201     BC        0x4170                                                                                          
00416e   d009     BRA       0x4182                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task D: Servicing USB Transaction Complete Interrupt                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004170   5068     MOVF      0x68,0x0,0x0       if(UIRbits.TRNIF && UIEbits.TRNIE)                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004172   0b08     ANDLW     0x8                                                                                             
004174   e006     BZ        0x4182                                                                                          
004176   5069     MOVF      0x69,0x0,0x0                                                                                    
004178   0b08     ANDLW     0x8                                                                                             
00417a   e003     BZ        0x4182                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * USBCtrlEPService only services transactions over EP0.                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * It ignores all other EP transactions.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00417c   ec37     CALL      0x3a6e,0x0             USBCtrlEPService();                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00417e   f01d                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Other EP can be serviced later by responsible device class firmware.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Each device driver knows when an OUT or IN transaction is ready by    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * checking the buffer ownership bit.                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An OUT EP should always be owned by SIE until the data is ready.      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An IN EP should always be owned by CPU until the data is ready.       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    *                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Because of this logic, it is not necessary to save the USTAT value    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * of non-EP0 transactions.                                              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004180   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(UIRbits.TRNIF && UIEbits.TRNIE)                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004182   0012     RETURN    0x0            }//end USBDriverService                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSuspend(void)                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void)                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * NOTE: Do not clear UIRbits.ACTVIF here!                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Reason:                                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * ACTVIF is only generated once an IDLEIF has been generated.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is a 1:1 ratio interrupt generation.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * For every IDLEIF, there will be only one ACTVIF regardless of             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * the number of subsequent bus transitions.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If the ACTIF is cleared here, a problem could occur when:                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * [       IDLE       ][bus activity ->                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * <--- 3 ms ----->     ^                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                ^     ACTVIF=1                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                IDLEIF=1                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *  #           #           #           #   (#=Program polling flags)        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          ^                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          This polling loop will see both                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          IDLEIF=1 and ACTVIF=1.                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          However, the program services IDLEIF first       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          because ACTIVIE=0.                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          If this routine clears the only ACTIVIF,         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          then it can never get out of the suspend         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          mode.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004184   8469     BSF       0x69,0x2,0x0       UIEbits.ACTVIE = 1;                     // Enable bus activity interrupt     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004186   9868     BCF       0x68,0x4,0x0       UIRbits.IDLEIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004188   826d     BSF       0x6d,0x1,0x0       UCONbits.SUSPND = 1;                    // Put USB module in power conserve  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                       // mode, SIE clock inactive          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * At this point the PIC can go into sleep,idle, or                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * switch to a slower clock, etc.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Modifiable Section */                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00418a   9aa1     BCF       0xa1,0x5,0x0       PIR2bits.USBIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00418c   8aa0     BSF       0xa0,0x5,0x0       PIE2bits.USBIE = 1;                     // Set USB wakeup source             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00418e   0003     SLEEP                        Sleep();                                // Goto sleep                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004190   9aa0     BCF       0xa0,0x5,0x0       PIE2bits.USBIE = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* End Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004192   0012     RETURN    0x0            }//end USBSuspend                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBWakeFromSuspend(void)                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void)                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If using clock switching, this is the place to restore the                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * original clock frequency.                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004194   926d     BCF       0x6d,0x1,0x0       UCONbits.SUSPND = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004196   9469     BCF       0x69,0x2,0x0       UIEbits.ACTVIE = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004198   9468     BCF       0x68,0x2,0x0       UIRbits.ACTVIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419a   0012     RETURN    0x0            }//end USBWakeFromSuspend                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBRemoteWakeup(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This function should be called by user when the device       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is waken up by an external stimulus other than ACTIVIF.      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Please read the note below to understand the limitations.    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            The modifiable section in this routine should be changed     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  to meet the application needs. Current implementation        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  temporary blocks other functions from executing for a        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  period of 1-13 ms depending on the core frequency.           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  According to USB 2.0 specification section 7.1.7.7,          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  "The remote wakeup device must hold the resume signaling     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for at lest 1 ms but for no more than 15 ms."                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  The idea here is to use a delay counter loop, using a        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  common value that would work over a wide range of core       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  frequencies.                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  That value selected is 1800. See table below:                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Core Freq(MHz)      MIP         RESUME Signal Period (ms)    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                      48              12          1.05                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                       4              1           12.6                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  * These timing could be incorrect when using code            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    optimization or extended instruction mode,                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    or when having other interrupts enabled.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    Make sure to verify using the MPLAB SIM's Stopwatch        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBRemoteWakeup(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               static word delay_count;                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419c   0101     MOVLB     0x1                if(usb_stat.RemoteWakeup == 1)          // Check if RemoteWakeup function    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419e   a1eb     BTFSS     0xeb,0x0,0x1                                                                                    
0041a0   d010     BRA       0x41c2                                                                                          
                                               {                                       // has been enabled by the host.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a2   dff8     RCALL     0x4194                 USBWakeFromSuspend();               // Unsuspend USB modue               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a4   846d     BSF       0x6d,0x2,0x0           UCONbits.RESUME = 1;                // Start RESUME signaling            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a6   0101     MOVLB     0x1                    delay_count = 1800U;                // Set RESUME line for 1-13 ms       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a8   0e08     MOVLW     0x8                                                                                             
0041aa   6fee     MOVWF     0xee,0x1                                                                                        
0041ac   0e07     MOVLW     0x7                                                                                             
0041ae   6fef     MOVWF     0xef,0x1                                                                                        
                                                   do                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041b0   0101     MOVLB     0x1                        delay_count--;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041b2   07ee     DECF      0xee,0x1,0x1                                                                                    
0041b4   0e00     MOVLW     0x0                                                                                             
0041b6   5bef     SUBWFB    0xef,0x1,0x1                                                                                    
0041b8   0101     MOVLB     0x1                    }while(delay_count);                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ba   51ee     MOVF      0xee,0x0,0x1                                                                                    
0041bc   11ef     IORWF     0xef,0x0,0x1                                                                                    
0041be   e1f8     BNZ       0x41b0                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* End Modifiable Section */                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c0   946d     BCF       0x6d,0x2,0x0           UCONbits.RESUME = 0;                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//endif                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c2   0012     RETURN    0x0            }//end USBRemoteWakeup                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USB_SOF_Handler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The USB host sends out a SOF packet to full-speed devices    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  every 1 ms. This interrupt may be useful for isochronous     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pipes. End designers should implement callback routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  as necessary.                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Callback routine here */                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c4   9c68     BCF       0x68,0x6,0x0       UIRbits.SOFIF = 0;                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c6   0012     RETURN    0x0            }//end USB_SOF_Handler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBStallHandler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A STALL packet is sent to the host by the SIE.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The STALLIF is set anytime the SIE sends out a STALL         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  packet regardless of which endpoint causes it.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  A Setup transaction overrides the STALL function. A stalled  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  endpoint stops stalling once it receives a setup packet.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  In this case, the SIE will accepts the Setup packet and      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  set the TRNIF flag to notify the firmware. STALL function    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for that particular endpoint pipe will be automatically      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  disabled (direction specific).                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  There are a few reasons for an endpoint to be stalled.       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  1. When a non-supported USB request is received.             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: GET_DESCRIPTOR(DEVICE_QUALIFIER)                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  2. When an endpoint is currently halted.                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  3. When the device class specifies that an endpoint must     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     stall in response to a specific event.                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: Mass Storage Device Class                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              If the CBW is not valid, the device shall        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              STALL the Bulk-In pipe.                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              See USB Mass Storage Class Bulk-only Transport   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              Specification for more details.                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            UEPn.EPSTALL can be scanned to see which endpoint causes     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the stall event.                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  If                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Does not really have to do anything here,                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * even for the control endpoint.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * All BDs of Endpoint 0 are owned by SIE right now,                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * but once a Setup Transaction is received, the ownership                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_OUT will be returned to CPU.                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When the Setup Transaction is serviced, the ownership                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_IN will then be forced back to CPU by firmware.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c8   a070     BTFSS     0x70,0x0,0x0       if(UEP0bits.EPSTALL == 1)                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ca   d003     BRA       0x41d2                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041cc   ecc4     CALL      0x3d88,0x0             USBPrepareForNextSetupTrf();        // Firmware work-around              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ce   f01e                                                                                                               
0041d0   9070     BCF       0x70,0x0,0x0           UEP0bits.EPSTALL = 0;                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d2   9a68     BCF       0x68,0x5,0x0       UIRbits.STALLIF = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d4   0012     RETURN    0x0            }//end USBStallHandler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBErrorHandler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The purpose of this interrupt is mainly for debugging        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  during development. Check UEIR to see which error causes     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the interrupt.                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d6   9268     BCF       0x68,0x1,0x0       UIRbits.UERRIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d8   0012     RETURN    0x0            }//end USBErrorHandler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBProtocolResetHandler(void)                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A USB bus reset is received from the host.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    Currently, this routine flushes any pending USB              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  transactions. It empties out the USTAT FIFO. This action     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  might not be desirable in some applications.                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        Once a USB bus reset is received from the host, this         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  routine should be called. It resets the device address to    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  zero, disables all non-EP0 endpoints, initializes EP0 to     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  be ready for default communication, clears all USB           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  interrupt flags, unmasks applicable USB interrupts, and      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  reinitializes internal state-machine variables.              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void)                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041da   6a6a     CLRF      0x6a,0x0           UEIR = 0;                       // Clear all USB error flags                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041dc   6a68     CLRF      0x68,0x0           UIR = 0;                        // Clears all USB interrupts                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041de   0e9f     MOVLW     0x9f               UEIE = 0b10011111;              // Unmask all USB error interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041e0   6e6b     MOVWF     0x6b,0x0                                                                                        
0041e2   0e7b     MOVLW     0x7b               UIE = 0b01111011;               // Enable all interrupts except ACTVIE       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041e4   6e69     MOVWF     0x69,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041e6   6a6e     CLRF      0x6e,0x0           UADDR = 0x00;                   // Reset to default address                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041e8   0e0f     MOVLW     0xf                mDisableEP1to15();              // Reset all non-EP0 UEPn registers          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ea   6ee6     MOVWF     0xe6,0x0                                                                                        
0041ec   0e71     MOVLW     0x71                                                                                            
0041ee   6ee6     MOVWF     0xe6,0x0                                                                                        
0041f0   0e0f     MOVLW     0xf                                                                                             
0041f2   6ee6     MOVWF     0xe6,0x0                                                                                        
0041f4   d814     RCALL     0x421e                                                                                          
0041f6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0041fc   0e16     MOVLW     0x16               UEP0 = EP_CTRL|HSHK_EN;         // Init EP0 as a Ctrl EP, see usbdrv.h       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041fe   6e70     MOVWF     0x70,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004200   a668     BTFSS     0x68,0x3,0x0       while(UIRbits.TRNIF == 1)       // Flush any pending transactions            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004202   d002     BRA       0x4208                                                                                          
004206   d7fc     BRA       0x4200                                                                                          
004204   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004208   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;            // Make sure packet processing is enabled    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00420a   ecc4     CALL      0x3d88,0x0         USBPrepareForNextSetupTrf();    // Declared in usbctrltrf.c                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00420c   f01e                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00420e   0101     MOVLB     0x1                usb_stat.RemoteWakeup = 0;      // Default status flag to disable            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004210   91eb     BCF       0xeb,0x0,0x1                                                                                    
004212   0101     MOVLB     0x1                usb_active_cfg = 0;             // Clear active configuration                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004214   6bec     CLRF      0xec,0x1                                                                                        
004216   0101     MOVLB     0x1                usb_device_state = DEFAULT_STATE;                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004218   0e03     MOVLW     0x3                                                                                             
00421a   6fea     MOVWF     0xea,0x1                                                                                        
00421c   0012     RETURN    0x0            }//end USBProtocolResetHandler                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /* Auxiliary Function */                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00421e   cfd9     MOVFF     0xfd9,0xfe6    void ClearArray(byte* startAdr,byte count)                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004220   ffe6                                                                                                               
004222   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004224   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004226   0efd     MOVLW     0xfd               *startAdr;                                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004228   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00422a   ffe9                                                                                                               
00422c   0efe     MOVLW     0xfe                                                                                            
00422e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
004230   ffea                                                                                                               
004232   0efc     MOVLW     0xfc               while(count)                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004234   50db     MOVF      0xdb,0x0,0x0                                                                                    
004236   e004     BZ        0x4240                                                                                          
00423e   d7f9     BRA       0x4232                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _asm                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004238   6aee     CLRF      0xee,0x0               clrf POSTINC0,0                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _endasm                                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00423a   0efc     MOVLW     0xfc                   count--;                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00423c   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004240   52e5     MOVF      0xe5,0x1,0x0   }//end ClearArray                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004242   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004244   ffd9                                                                                                               
004246   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** EOF usbdrv.c *************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * FileName:        usb9.c                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "io_cfg.h"                     // Required for self_power status        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void);                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void);                                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBCheckStdRequest(void)                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine checks the setup data packet to see if it       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  knows how to handle it                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBCheckStdRequest(void)                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003da8   0104     MOVLB     0x4                if(SetupPkt.RequestType != STANDARD) return;                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003daa   5120     MOVF      0x20,0x0,0x1                                                                                    
003dac   0b60     ANDLW     0x60                                                                                            
003dae   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003db0   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003db2   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003db4   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003db6   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003db8   0900     IORLW     0x0                                                                                             
003dba   e001     BZ        0x3dbe                                                                                          
003dbc   d058     BRA       0x3e6e                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dbe   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dc0   5121     MOVF      0x21,0x0,0x1                                                                                    
003dc2   0a07     XORLW     0x7                                                                                             
003dc4   e053     BZ        0x3e6c                                                                                          
003dc6   0a0b     XORLW     0xb                                                                                             
003dc8   e051     BZ        0x3e6c                                                                                          
003dca   0a07     XORLW     0x7                                                                                             
003dcc   e042     BZ        0x3e52                                                                                          
003dce   0a01     XORLW     0x1                                                                                             
003dd0   e02c     BZ        0x3e2a                                                                                          
003dd2   0a0b     XORLW     0xb                                                                                             
003dd4   e028     BZ        0x3e26                                                                                          
003dd6   0a02     XORLW     0x2                                                                                             
003dd8   e026     BZ        0x3e26                                                                                          
003dda   0a03     XORLW     0x3                                                                                             
003ddc   e022     BZ        0x3e22                                                                                          
003dde   0a08     XORLW     0x8                                                                                             
003de0   e012     BZ        0x3e06                                                                                          
003de2   0a01     XORLW     0x1                                                                                             
003de4   e00e     BZ        0x3e02                                                                                          
003de6   0a0f     XORLW     0xf                                                                                             
003de8   e00a     BZ        0x3dfe                                                                                          
003dea   0a03     XORLW     0x3                                                                                             
003dec   e001     BZ        0x3df0                                                                                          
003dee   d03e     BRA       0x3e6c                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_ADR:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003df0   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003df2   0e01     MOVLW     0x1                                                                                             
003df4   6fe3     MOVWF     0xe3,0x1                                                                                        
003df6   0101     MOVLB     0x1                        usb_device_state = ADR_PENDING_STATE;       // Update state only     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003df8   0e04     MOVLW     0x4                                                                                             
003dfa   6fea     MOVWF     0xea,0x1                                                                                        
                                                       /* See USBCtrlTrfInHandler() in usbctrltrf.c for the next step */    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dfc   d038     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_DSC:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dfe   d838     RCALL     0x3e70                     USBStdGetDscHandler();                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e00   d036     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_CFG:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e02   d893     RCALL     0x3f2a                     USBStdSetCfgHandler();                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e04   d034     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_CFG:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e06   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e08   0e01     MOVLW     0x1                                                                                             
003e0a   6fe3     MOVWF     0xe3,0x1                                                                                        
003e0c   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&usb_active_cfg;         // Set Source            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e0e   0eec     MOVLW     0xec                                                                                            
003e10   6fe4     MOVWF     0xe4,0x1                                                                                        
003e12   0e01     MOVLW     0x1                                                                                             
003e14   6fe5     MOVWF     0xe5,0x1                                                                                        
003e16   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e18   93eb     BCF       0xeb,0x1,0x1                                                                                    
003e1a   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e1c   0e01     MOVLW     0x1                                                                                             
003e1e   6fe8     MOVWF     0xe8,0x1                                                                                        
003e20   d026     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_STATUS:                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e22   d8ab     RCALL     0x3f7a                     USBStdGetStatusHandler();                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e24   d024     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case CLR_FEATURE:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_FEATURE:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e26   d8f9     RCALL     0x401a                     USBStdFeatureReqHandler();                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e28   d022     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_INTF:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e2a   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e2c   0e01     MOVLW     0x1                                                                                             
003e2e   6fe3     MOVWF     0xe3,0x1                                                                                        
003e30   0104     MOVLB     0x4                        pSrc.bRam = (byte*)&usb_alt_intf+SetupPkt.bIntfID;  // Set source    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e32   5124     MOVF      0x24,0x0,0x1                                                                                    
003e34   0101     MOVLB     0x1                                                                                             
003e36   6fe4     MOVWF     0xe4,0x1                                                                                        
003e38   6be5     CLRF      0xe5,0x1                                                                                        
003e3a   0eed     MOVLW     0xed                                                                                            
003e3c   0101     MOVLB     0x1                                                                                             
003e3e   27e4     ADDWF     0xe4,0x1,0x1                                                                                    
003e40   0e01     MOVLW     0x1                                                                                             
003e42   0101     MOVLB     0x1                                                                                             
003e44   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003e46   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e48   93eb     BCF       0xeb,0x1,0x1                                                                                    
003e4a   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e4c   0e01     MOVLW     0x1                                                                                             
003e4e   6fe8     MOVWF     0xe8,0x1                                                                                        
003e50   d00e     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_INTF:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e52   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e54   0e01     MOVLW     0x1                                                                                             
003e56   6fe3     MOVWF     0xe3,0x1                                                                                        
003e58   0104     MOVLB     0x4                        usb_alt_intf[SetupPkt.bIntfID] = SetupPkt.bAltID;                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e5a   5124     MOVF      0x24,0x0,0x1                                                                                    
003e5c   6aea     CLRF      0xea,0x0                                                                                        
003e5e   0fed     ADDLW     0xed                                                                                            
003e60   6ee9     MOVWF     0xe9,0x0                                                                                        
003e62   0e01     MOVLW     0x1                                                                                             
003e64   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003e66   c422     MOVFF     0x422,0xfef                                                                                     
003e68   ffef                                                                                                               
003e6a   d001     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_DSC:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SYNCH_FRAME:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   default:                                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e6c   d000     BRA       0x3e6e                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e6e   0012     RETURN    0x0            }//end USBCheckStdRequest                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetDscHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_DESCRIPTOR request.    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  It utilizes tables dynamically looks up descriptor size.     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  This routine should never have to be modified if the tables  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  in usbdsc.c are declared correctly.                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e70   0e80     MOVLW     0x80               if(SetupPkt.bmRequestType == 0x80)                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e72   0104     MOVLB     0x4                                                                                             
003e74   5d20     SUBWF     0x20,0x0,0x1                                                                                    
003e76   e158     BNZ       0x3f28                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e78   0104     MOVLB     0x4                    switch(SetupPkt.bDscType)                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e7a   5123     MOVF      0x23,0x0,0x1                                                                                    
003e7c   0a03     XORLW     0x3                                                                                             
003e7e   e034     BZ        0x3ee8                                                                                          
003e80   0a01     XORLW     0x1                                                                                             
003e82   e010     BZ        0x3ea4                                                                                          
003e84   0a03     XORLW     0x3                                                                                             
003e86   e001     BZ        0x3e8a                                                                                          
003e88   d04d     BRA       0x3f24                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_DEV:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e8a   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e8c   0e01     MOVLW     0x1                                                                                             
003e8e   6fe3     MOVWF     0xe3,0x1                                                                                        
003e90   0101     MOVLB     0x1                            pSrc.bRom = (rom byte*)&device_dsc;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e92   0e90     MOVLW     0x90                                                                                            
003e94   6fe4     MOVWF     0xe4,0x1                                                                                        
003e96   0e44     MOVLW     0x44                                                                                            
003e98   6fe5     MOVWF     0xe5,0x1                                                                                        
003e9a   0e12     MOVLW     0x12                           wCount._word = sizeof(device_dsc);          // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e9c   0101     MOVLB     0x1                                                                                             
003e9e   6fe8     MOVWF     0xe8,0x1                                                                                        
003ea0   6be9     CLRF      0xe9,0x1                                                                                        
003ea2   d040     BRA       0x3f24                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_CFG:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ea4   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ea6   0e01     MOVLW     0x1                                                                                             
003ea8   6fe3     MOVWF     0xe3,0x1                                                                                        
003eaa   0104     MOVLB     0x4                            pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eac   5122     MOVF      0x22,0x0,0x1                                                                                    
003eae   6ef6     MOVWF     0xf6,0x0                                                                                        
003eb0   6af7     CLRF      0xf7,0x0                                                                                        
003eb2   90d8     BCF       0xd8,0x0,0x0                                                                                    
003eb4   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003eb6   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003eb8   0e51     MOVLW     0x51                                                                                            
003eba   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003ebc   0e45     MOVLW     0x45                                                                                            
003ebe   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003ec0   0009     TBLRDPOSTINC                                                                                              
003ec2   cff5     MOVFF     0xff5,0x1e4                                                                                     
003ec4   f1e4                                                                                                               
003ec6   000a     TBLRDPOSTDEC                                                                                              
003ec8   cff5     MOVFF     0xff5,0x1e5                                                                                     
003eca   f1e5                                                                                                               
003ecc   0e02     MOVLW     0x2                            wCount._word = *(pSrc.wRom+1);              // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ece   0101     MOVLB     0x1                                                                                             
003ed0   6af7     CLRF      0xf7,0x0                                                                                        
003ed2   25e4     ADDWF     0xe4,0x0,0x1                                                                                    
003ed4   6ef6     MOVWF     0xf6,0x0                                                                                        
003ed6   51e5     MOVF      0xe5,0x0,0x1                                                                                    
003ed8   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003eda   0009     TBLRDPOSTINC                                                                                              
003edc   cff5     MOVFF     0xff5,0x1e8                                                                                     
003ede   f1e8                                                                                                               
003ee0   000a     TBLRDPOSTDEC                                                                                              
003ee2   cff5     MOVFF     0xff5,0x1e9                                                                                     
003ee4   f1e9                                                                                                               
003ee6   d01e     BRA       0x3f24                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_STR:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ee8   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eea   0e01     MOVLW     0x1                                                                                             
003eec   6fe3     MOVWF     0xe3,0x1                                                                                        
003eee   0104     MOVLB     0x4                            pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef0   5122     MOVF      0x22,0x0,0x1                                                                                    
003ef2   6ef6     MOVWF     0xf6,0x0                                                                                        
003ef4   6af7     CLRF      0xf7,0x0                                                                                        
003ef6   90d8     BCF       0xd8,0x0,0x0                                                                                    
003ef8   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003efa   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003efc   0e55     MOVLW     0x55                                                                                            
003efe   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003f00   0e45     MOVLW     0x45                                                                                            
003f02   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003f04   0009     TBLRDPOSTINC                                                                                              
003f06   cff5     MOVFF     0xff5,0x1e4                                                                                     
003f08   f1e4                                                                                                               
003f0a   000a     TBLRDPOSTDEC                                                                                              
003f0c   cff5     MOVFF     0xff5,0x1e5                                                                                     
003f0e   f1e5                                                                                                               
003f10   c1e4     MOVFF     0x1e4,0xff6                    wCount._word = *pSrc.bRom;                  // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f12   fff6                                                                                                               
003f14   c1e5     MOVFF     0x1e5,0xff7                                                                                     
003f16   fff7                                                                                                               
003f18   0008     TBLRD                                                                                                     
003f1a   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003f1c   0101     MOVLB     0x1                                                                                             
003f1e   6fe8     MOVWF     0xe8,0x1                                                                                        
003f20   6be9     CLRF      0xe9,0x1                                                                                        
003f22   d000     BRA       0x3f24                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   }//end switch                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f24   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _ROM;                       // Set memory type   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f26   83eb     BSF       0xeb,0x1,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f28   0012     RETURN    0x0            }//end USBStdGetDscHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdSetCfgHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine first disables all endpoints by clearing        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  UEP registers. It then configures (initializes) endpoints    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  specified in the modifiable section.                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f2a   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_USB9;                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f2c   0e01     MOVLW     0x1                                                                                             
003f2e   6fe3     MOVWF     0xe3,0x1                                                                                        
003f30   0e0f     MOVLW     0xf                mDisableEP1to15();                          // See usbdrv.h                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f32   6ee6     MOVWF     0xe6,0x0                                                                                        
003f34   0e71     MOVLW     0x71                                                                                            
003f36   6ee6     MOVWF     0xe6,0x0                                                                                        
003f38   0e0f     MOVLW     0xf                                                                                             
003f3a   6ee6     MOVWF     0xe6,0x0                                                                                        
003f3c   ec0f     CALL      0x421e,0x0                                                                                      
003f3e   f021                                                                                                               
003f40   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f42   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f44   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f46   0e01     MOVLW     0x1                ClearArray((byte*)&usb_alt_intf,MAX_NUM_INT);                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f48   6ee6     MOVWF     0xe6,0x0                                                                                        
003f4a   0eed     MOVLW     0xed                                                                                            
003f4c   6ee6     MOVWF     0xe6,0x0                                                                                        
003f4e   0e01     MOVLW     0x1                                                                                             
003f50   6ee6     MOVWF     0xe6,0x0                                                                                        
003f52   ec0f     CALL      0x421e,0x0                                                                                      
003f54   f021                                                                                                               
003f56   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f58   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f5a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003f5c   c422     MOVFF     0x422,0x1ec        usb_active_cfg = SetupPkt.bCfgValue;                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f5e   f1ec                                                                                                               
003f60   0104     MOVLB     0x4                if(SetupPkt.bCfgValue == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f62   5122     MOVF      0x22,0x0,0x1                                                                                    
003f64   e104     BNZ       0x3f6e                                                                                          
003f66   0101     MOVLB     0x1                    usb_device_state = ADDRESS_STATE;                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f68   0e05     MOVLW     0x5                                                                                             
003f6a   6fea     MOVWF     0xea,0x1                                                                                        
003f6c   d005     BRA       0x3f78             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f6e   0101     MOVLB     0x1                    usb_device_state = CONFIGURED_STATE;                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f70   0e06     MOVLW     0x6                                                                                             
003f72   6fea     MOVWF     0xea,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   #if defined(USB_USE_CDC)                // See autofiles\usbcfg.h        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f74   ecb2     CALL      0x3764,0x0             CDCInitEP();                                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f76   f01b                                                                                                               
                                                   #endif                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* End modifiable section */                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if(SetupPkt.bcfgValue == 0)                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f78   0012     RETURN    0x0            }//end USBStdSetCfgHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetStatusHandler(void)                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_STATUS request         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void)                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f7a   0104     MOVLB     0x4                CtrlTrfData._byte0 = 0;                         // Initialize content        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f7c   6b28     CLRF      0x28,0x1                                                                                        
003f7e   0104     MOVLB     0x4                CtrlTrfData._byte1 = 0;                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f80   6b29     CLRF      0x29,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f82   0104     MOVLB     0x4                switch(SetupPkt.Recipient)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f84   5120     MOVF      0x20,0x0,0x1                                                                                    
003f86   0b1f     ANDLW     0x1f                                                                                            
003f88   0a02     XORLW     0x2                                                                                             
003f8a   e014     BZ        0x3fb4                                                                                          
003f8c   0a03     XORLW     0x3                                                                                             
003f8e   e00e     BZ        0x3fac                                                                                          
003f90   0a01     XORLW     0x1                                                                                             
003f92   e001     BZ        0x3f96                                                                                          
003f94   d034     BRA       0x3ffe                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_DEV:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f96   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f98   0e01     MOVLW     0x1                                                                                             
003f9a   6fe3     MOVWF     0xe3,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Self-Powered Status [0] Bus-Powered [1] Self-Powered e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        *         bit1: RemoteWakeup        [0] Disabled    [1] Enabled     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       if(self_power == 1)                     // self_power defined in io_cfg.h e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f9c   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b000000001;    // Set bit0                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f9e   8128     BSF       0x28,0x0,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fa0   0101     MOVLB     0x1                        if(usb_stat.RemoteWakeup == 1)          // usb_stat defined in usbmmap.c e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fa2   a1eb     BTFSS     0xeb,0x0,0x1                                                                                    
003fa4   d002     BRA       0x3faa                                                                                          
003fa6   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b00000010;     // Set bit1                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fa8   8328     BSF       0x28,0x1,0x1                                                                                    
003faa   d029     BRA       0x3ffe                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_INTF:                                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fac   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;     // No data to update         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fae   0e01     MOVLW     0x1                                                                                             
003fb0   6fe3     MOVWF     0xe3,0x1                                                                                        
003fb2   d025     BRA       0x3ffe                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_EP:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fb4   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fb6   0e01     MOVLW     0x1                                                                                             
003fb8   6fe3     MOVWF     0xe3,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Halt Status [0] Not Halted [1] Halted               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fba   0104     MOVLB     0x4                        pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fbc   5124     MOVF      0x24,0x0,0x1                                                                                    
003fbe   0b0f     ANDLW     0xf                                                                                             
003fc0   0d08     MULLW     0x8                                                                                             
003fc2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003fc4   6a2b     CLRF      0x2b,0x0                                                                                        
003fc6   0f00     ADDLW     0x0                                                                                             
003fc8   6e2a     MOVWF     0x2a,0x0                                                                                        
003fca   0e04     MOVLW     0x4                                                                                             
003fcc   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003fce   0104     MOVLB     0x4                                                                                             
003fd0   5124     MOVF      0x24,0x0,0x1                                                                                    
003fd2   0b80     ANDLW     0x80                                                                                            
003fd4   e001     BZ        0x3fd8                                                                                          
003fd6   0e01     MOVLW     0x1                                                                                             
003fd8   0d04     MULLW     0x4                                                                                             
003fda   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003fdc   0101     MOVLB     0x1                                                                                             
003fde   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003fe0   6fe6     MOVWF     0xe6,0x1                                                                                        
003fe2   0e00     MOVLW     0x0                                                                                             
003fe4   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003fe6   6fe7     MOVWF     0xe7,0x1                                                                                        
003fe8   c1e6     MOVFF     0x1e6,0xfe9                if(*pDst.bRam & _BSTALL)    // Use _BSTALL as a bit mask             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fea   ffe9                                                                                                               
003fec   c1e7     MOVFF     0x1e7,0xfea                                                                                     
003fee   ffea                                                                                                               
003ff0   50ef     MOVF      0xef,0x0,0x0                                                                                    
003ff2   0b04     ANDLW     0x4                                                                                             
003ff4   e003     BZ        0x3ffc                                                                                          
003ff6   0104     MOVLB     0x4                            CtrlTrfData._byte0=0x01;// Set bit0                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ff8   0e01     MOVLW     0x1                                                                                             
003ffa   6f28     MOVWF     0x28,0x1                                                                                        
003ffc   d000     BRA       0x3ffe                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ffe   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_USB9)                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004000   05e3     DECF      0xe3,0x0,0x1                                                                                    
004002   e10a     BNZ       0x4018                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004004   0101     MOVLB     0x1                    pSrc.bRam = (byte*)&CtrlTrfData;            // Set Source                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004006   0e28     MOVLW     0x28                                                                                            
004008   6fe4     MOVWF     0xe4,0x1                                                                                        
00400a   0e04     MOVLW     0x4                                                                                             
00400c   6fe5     MOVWF     0xe5,0x1                                                                                        
00400e   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _RAM;               // Set memory type           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004010   93eb     BCF       0xeb,0x1,0x1                                                                                    
004012   0101     MOVLB     0x1                    LSB(wCount) = 2;                            // Set data count            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004014   0e02     MOVLW     0x2                                                                                             
004016   6fe8     MOVWF     0xe8,0x1                                                                                        
                                               }//end if(...)                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004018   0012     RETURN    0x0            }//end USBStdGetStatusHandler                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdFeatureReqHandler(void)                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard SET & CLEAR FEATURES       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  requests                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void)                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00401a   0104     MOVLB     0x4                if((SetupPkt.bFeature == DEVICE_REMOTE_WAKEUP)&&                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00401c   0522     DECF      0x22,0x0,0x1                                                                                    
00401e   e111     BNZ       0x4042                (SetupPkt.Recipient == RCPT_DEV))                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004020   0104     MOVLB     0x4                                                                                             
004022   5120     MOVF      0x20,0x0,0x1                                                                                    
004024   0b1f     ANDLW     0x1f                                                                                            
004026   0900     IORLW     0x0                                                                                             
004028   e10c     BNZ       0x4042                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00402a   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00402c   0e01     MOVLW     0x1                                                                                             
00402e   6fe3     MOVWF     0xe3,0x1                                                                                        
004030   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004032   0104     MOVLB     0x4                                                                                             
004034   5d21     SUBWF     0x21,0x0,0x1                                                                                    
004036   e103     BNZ       0x403e                                                                                          
004038   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 1;                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00403a   81eb     BSF       0xeb,0x0,0x1                                                                                    
00403c   d002     BRA       0x4042                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00403e   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 0;                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004040   91eb     BCF       0xeb,0x0,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004042   0104     MOVLB     0x4                if((SetupPkt.bFeature == ENDPOINT_HALT)&&                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004044   5122     MOVF      0x22,0x0,0x1                                                                                    
004046   e13e     BNZ       0x40c4                (SetupPkt.Recipient == RCPT_EP)&&                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004048   0104     MOVLB     0x4                                                                                             
00404a   5120     MOVF      0x20,0x0,0x1                                                                                    
00404c   0b1f     ANDLW     0x1f                                                                                            
00404e   0802     SUBLW     0x2                                                                                             
004050   e139     BNZ       0x40c4                                                                                          
004052   0104     MOVLB     0x4                   (SetupPkt.EPNum != 0))                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004054   5124     MOVF      0x24,0x0,0x1                                                                                    
004056   0b0f     ANDLW     0xf                                                                                             
004058   0900     IORLW     0x0                                                                                             
00405a   e034     BZ        0x40c4                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00405c   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00405e   0e01     MOVLW     0x1                                                                                             
004060   6fe3     MOVWF     0xe3,0x1                                                                                        
                                                   /* Must do address calculation here */                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004062   0104     MOVLB     0x4                    pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004064   5124     MOVF      0x24,0x0,0x1                                                                                    
004066   0b0f     ANDLW     0xf                                                                                             
004068   0d08     MULLW     0x8                                                                                             
00406a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00406c   6a2b     CLRF      0x2b,0x0                                                                                        
00406e   0f00     ADDLW     0x0                                                                                             
004070   6e2a     MOVWF     0x2a,0x0                                                                                        
004072   0e04     MOVLW     0x4                                                                                             
004074   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
004076   0104     MOVLB     0x4                                                                                             
004078   5124     MOVF      0x24,0x0,0x1                                                                                    
00407a   0b80     ANDLW     0x80                                                                                            
00407c   e001     BZ        0x4080                                                                                          
00407e   0e01     MOVLW     0x1                                                                                             
004080   0d04     MULLW     0x4                                                                                             
004082   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004084   0101     MOVLB     0x1                                                                                             
004086   242a     ADDWF     0x2a,0x0,0x0                                                                                    
004088   6fe6     MOVWF     0xe6,0x1                                                                                        
00408a   0e00     MOVLW     0x0                                                                                             
00408c   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
00408e   6fe7     MOVWF     0xe7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004090   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004092   0104     MOVLB     0x4                                                                                             
004094   5d21     SUBWF     0x21,0x0,0x1                                                                                    
004096   e107     BNZ       0x40a6                                                                                          
004098   0e84     MOVLW     0x84                       *pDst.bRam = _USIE|_BSTALL;                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00409a   c1e6     MOVFF     0x1e6,0xfe9                                                                                     
00409c   ffe9                                                                                                               
00409e   c1e7     MOVFF     0x1e7,0xfea                                                                                     
0040a0   ffea                                                                                                               
0040a2   6eef     MOVWF     0xef,0x0                                                                                        
0040a4   d00f     BRA       0x40c4                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040a6   0104     MOVLB     0x4                        if(SetupPkt.EPDir == 1) // IN                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040a8   af24     BTFSS     0x24,0x7,0x1                                                                                    
0040aa   d006     BRA       0x40b8                                                                                          
0040ac   c1e6     MOVFF     0x1e6,0xfe9                    *pDst.bRam = _UCPU;                                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040ae   ffe9                                                                                                               
0040b0   c1e7     MOVFF     0x1e7,0xfea                                                                                     
0040b2   ffea                                                                                                               
0040b4   6aef     CLRF      0xef,0x0                                                                                        
0040b6   d006     BRA       0x40c4                     else                                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040b8   0e88     MOVLW     0x88                           *pDst.bRam = _USIE|_DAT0|_DTSEN;                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040ba   c1e6     MOVFF     0x1e6,0xfe9                                                                                     
0040bc   ffe9                                                                                                               
0040be   c1e7     MOVFF     0x1e7,0xfea                                                                                     
0040c0   ffea                                                                                                               
0040c2   6eef     MOVWF     0xef,0x0                                                                                        
                                                   }//end if                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
0040c4   0012     RETURN    0x0            }//end USBStdFeatureReqHandler                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** EOF usb9.c ***************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * FileName:        usbdsc.c                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -usbdsc.c-                                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This file contains the USB descriptor information. It is used                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in conjunction with the usbdsc.h file. When a descriptor is added             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * or removed from the main configuration descriptor, i.e. CFG01,                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the user must also change the descriptor structure defined in                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the usbdsc.h file. The structure is used to calculate the                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor size, i.e. sizeof(CFG01).                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A typical configuration descriptor consists of:                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * At least one configuration descriptor (USB_CFG_DSC)                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more interface descriptors (USB_INTF_DSC)                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more endpoint descriptors (USB_EP_DSC)                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Naming Convention:                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * To resolve ambiguity, the naming convention are as followed:                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_CFG_DSC type should be named cdxx, where xx is the                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   configuration number. This number should match the actual                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   index value of this configuration.                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_INTF_DSC type should be named i<yy>a<zz>, where yy is the               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   interface number and zz is the alternate interface number.                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_EP_DSC type should be named ep<##><d>_i<yy>a<zz>, where                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   ## is the endpoint number and d is the direction of transfer.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   The interface name should also be listed as a suffix to identify            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   which interface does the endpoint belong to.                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Example:                                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * If a device has one configuration, two interfaces; interface 0                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * has two endpoints (in and out), and interface 1 has one endpoint(in).         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Then the CFG01 structure in the usbdsc.h should be:                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * #define CFG01 rom struct                            \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * {   USB_CFG_DSC             cd01;                   \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i00a00;                 \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01o_i00a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01i_i00a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i01a00;                 \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep02i_i01a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * } cfg01                                                                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Note the hierarchy of the descriptors above, it follows the USB               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification requirement. All endpoints belonging to an interface            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * should be listed immediately after that interface.                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Filling in the descriptor values in the usbdsc.c file:                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Most items should be self-explanatory, however, a few will be                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * explained for clarification.                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Configuration Descriptor(USB_CFG_DSC)]                                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The configuration attribute must always have the _DEFAULT                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * definition at the minimum. Additional options can be ORed                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * to the _DEFAULT attribute. Available options are _SELF and _RWU.              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * These definitions are defined in the usbdefs_std_dsc.h file. The              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _SELF tells the USB host that this device is self-powered. The                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _RWU tells the USB host that this device supports Remote Wakeup.              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Endpoint Descriptor(USB_EP_DSC)]                                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Assume the following example:                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(USB_EP_DSC),DSC_EP,_EP01_OUT,_BULK,64,0x00                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The first two parameters are self-explanatory. They specify the               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length of this endpoint descriptor (7) and the descriptor type.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the endpoint, the definitions are               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * defined in usbdefs_std_dsc.h and has the following naming                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * convention:                                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _EP<##>_<dir>                                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * where ## is the endpoint number and dir is the direction of                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * transfer. The dir has the value of either 'OUT' or 'IN'.                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the type of the endpoint. Available             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * options are _BULK, _INT, _ISO, and _CTRL. The _CTRL is not                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * typically used because the default control transfer endpoint is               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * not defined in the USB descriptors. When _ISO option is used,                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * addition options can be ORed to _ISO. Example:                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _ISO|_AD|_FE                                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This describes the endpoint as an isochronous pipe with adaptive              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * and feedback attributes. See usbdefs_std_dsc.h and the USB                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification for details. The next parameter defines the size of             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the endpoint. The last parameter in the polling interval.                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Adding a USB String                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A string descriptor array should have the following format:                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[size];}sdxxx={              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sdxxx),DSC_STR,<text>};                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above structure provides a means for the C compiler to                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * calculate the length of string descriptor sdxxx, where xxx is the             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * index number. The first two bytes of the descriptor are descriptor            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length and type. The rest <text> are string texts which must be               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in the unicode format. The unicode format is achieved by declaring            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * each character as a word type. The whole text string is declared              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * as a word array with the number of characters equals to <size>.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * <size> has to be manually counted and entered into the array                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * declaration. Let's study this through an example:                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * if the string is "USB" , then the string descriptor should be:                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (Using index 02)                                                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[3];}sd002={                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sd002),DSC_STR,'U','S','B'};                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A USB project may have multiple strings and the firmware supports             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the management of multiple strings through a look-up table.                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table is defined as:                                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above declaration has 3 strings, sd000, sd001, and sd002.                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Strings can be removed or added. sd000 is a specialized string                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. It defines the language code, usually this is                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * US English (0x0409). The index of the string must match the index             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * position of the USB_SD_Ptr array, &sd000 must be in position                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * USB_SD_Ptr[0], &sd001 must be in position USB_SD_Ptr[1] and so on.            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table USB_SD_Ptr is used by the get string handler                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * function in usb9.c.                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table scheme also applies to the configuration                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. A USB device may have multiple configuration                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptors, i.e. CFG01, CFG02, etc. To add a configuration                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor, user must implement a structure similar to CFG01.                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next step is to add the configuration descriptor name, i.e.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * cfg01, cfg02,.., to the look-up table USB_CD_Ptr. USB_CD_Ptr[0]               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * is a dummy place holder since configuration 0 is the un-configured            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * state according to the definition in the USB specification.                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Descriptor specific type definitions are defined in:                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * system\usb\usbdefs\usbdefs_std_dsc.h                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Configuration information is defined in:                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * autofiles\usbcfg.h                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** I N C L U D E S *************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** C O N S T A N T S ************************************************/          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma romdata                                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Device Descriptor */                                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom USB_DEV_DSC device_dsc=                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_DEV_DSC),    // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_DEV,                // DEVICE descriptor type                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0200,                 // USB Spec Release Number in BCD format             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               CDC_DEVICE,             // Class Code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               EP0_BUFF_SIZE,          // Max packet size for EP0, see usbcfg.h             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x04D8,                 // Vendor ID                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x000A,                 // Product ID: CDC RS-232 Emulation Demo             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0000,                 // Device release number in BCD format               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01,                   // Manufacturer string index                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x02,                   // Product string index                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Device serial number string index                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01                    // Number of possible configurations                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Configuration 1 Descriptor */                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           CFG01=                                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Configuration Descriptor */                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CFG_DSC),    // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_CFG,                // CONFIGURATION descriptor type                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(cfg01),          // Total length of data for this cfg                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of interfaces in this cfg                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Index value of this configuration                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Configuration string index                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               _DEFAULT,               // Attributes, see usbdefs_std_dsc.h                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               50,                     // Max power consumption (2X mA)                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface Number                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Number of endpoints in this intf                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               COMM_INTF,              // Class code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               ABSTRACT_CONTROL_MODEL, // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               V25TER,                 // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* CDC Class-Specific Descriptors */                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_HEADER_FN_DSC),CS_INTERFACE,DSC_FN_HEADER,0x0110,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_ACM_FN_DSC),CS_INTERFACE,DSC_FN_ACM,0x02,                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_UNION_FN_DSC),CS_INTERFACE,DSC_FN_UNION,CDC_COMM_INTF_ID,CDC_DATA_INTF_ID, e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_CALL_MGT_FN_DSC),CS_INTERFACE,DSC_FN_CALL_MGT,0x00,CDC_DATA_INTF_ID, e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptor */                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP02_IN,_INT,CDC_INT_EP_SIZE,0x02,                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Interface Number                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of endpoints in this intf                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DATA_INTF,              // Class code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               NO_PROTOCOL,            // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptors */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_OUT,_BULK,CDC_BULK_OUT_EP_SIZE,0x00,         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_IN,_BULK,CDC_BULK_IN_EP_SIZE,0x00            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[1];}sd000={                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd000),DSC_STR,0x0409};                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd001={                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd001),DSC_STR,                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'M','i','c','r','o','c','h','i','p',' ',                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd002={                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd002),DSC_STR,                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'C','D','C',' ','R','S','-','2','3','2',' ',                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'E','m','u','l','a','t','i','o','n',' ','D','e','m','o'};                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_CD_Ptr[]={&cfg01,&cfg01};                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom pFunc ClassReqHandler[1]=                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               &USBCheckCDCRequest                                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** EOF usbdsc.c ****************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * FileName:        usbctrltrf.c                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_state;                // Control Transfer State                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_session_owner;        // Current transfer session owner            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pSrc;                       // Data source pointer                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pDst;                       // Data destination pointer                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           WORD wCount;                        // Data counter                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfSetupHandler(void);                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void);                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPService(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    USTAT is loaded with a valid endpoint address.               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        USBCtrlEPService checks for three transaction types that     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it knows how to service and services them:                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. EP0 SETUP                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. EP0 OUT                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. EP0 IN                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  It ignores all other types (i.e. EP1, EP2, etc.)             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPService(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a6e   506c     MOVF      0x6c,0x0,0x0       if(USTAT == EP00_OUT)                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a70   e002     BZ        0x3a76                                                                                          
003a72   0e00     MOVLW     0x0                                                                                             
003a74   d001     BRA       0x3a78                                                                                          
003a76   0e01     MOVLW     0x1                                                                                             
003a78   0900     IORLW     0x0                                                                                             
003a7a   e00b     BZ        0x3a92                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a7c   0104     MOVLB     0x4                    if(ep0Bo.Stat.PID == SETUP_TOKEN)           // EP0 SETUP                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a7e   5100     MOVF      0x0,0x0,0x1                                                                                     
003a80   0b3c     ANDLW     0x3c                                                                                            
003a82   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003a84   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003a86   080d     SUBLW     0xd                                                                                             
003a88   e102     BNZ       0x3a8e                                                                                          
003a8a   d80c     RCALL     0x3aa4                     USBCtrlTrfSetupHandler();                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a8c   d001     BRA       0x3a90                 else                                        // EP0 OUT                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a8e   d842     RCALL     0x3b14                     USBCtrlTrfOutHandler();                                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a90   d008     BRA       0x3aa2             else if(USTAT == EP00_IN)                       // EP0 IN                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a92   506c     MOVF      0x6c,0x0,0x0                                                                                    
003a94   e002     BZ        0x3a9a                                                                                          
003a96   0e00     MOVLW     0x0                                                                                             
003a98   d001     BRA       0x3a9c                                                                                          
003a9a   0e01     MOVLW     0x1                                                                                             
003a9c   0904     IORLW     0x4                                                                                             
003a9e   e001     BZ        0x3aa2                                                                                          
003aa0   d84b     RCALL     0x3b38                 USBCtrlTrfInHandler();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa2   0012     RETURN    0x0            }//end USBCtrlEPService                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfSetupHandler(void)                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    SetupPkt buffer is loaded with valid USB Setup Data          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine is a task dispatcher and has 3 stages.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. It initializes the control transfer state machine.        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. It calls on each of the module that may know how to       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     service the Setup Request from the host.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Module Example: USB9, HID, CDC, MSD, ...                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     As new classes are added, ClassReqHandler table in        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     usbdsc.c should be updated to call all available          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     class handlers.                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. Once each of the modules has had a chance to check if     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     it is responsible for servicing the request, stage 3      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     then checks direction of the transfer to determine how    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     to prepare EP0 for the control transfer.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Refer to USBCtrlEPServiceComplete() for more details.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Microchip USB Firmware has three different states for        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  the control transfer state machine:                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. WAIT_SETUP                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. CTRL_TRF_TX                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. CTRL_TRF_RX                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Refer to firmware manual to find out how one state           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  is transitioned to another.                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  A Control Transfer is composed of many USB transactions.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  When transferring data over multiple transactions,           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it is important to keep track of data source, data           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  destination, and data count. These three parameters are      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  stored in pSrc,pDst, and wCount. A flag is used to           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  note if the data source is from ROM or RAM.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa4   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfSetupHandler(void)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa6   ffe6                                                                                                               
003aa8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003aaa   ffd9                                                                                                               
003aac   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               byte i;                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 1 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aae   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab0   6be2     CLRF      0xe2,0x1                                                                                        
003ab2   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_NULL;     // Set owner to NULL                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab4   6be3     CLRF      0xe3,0x1                                                                                        
003ab6   0101     MOVLB     0x1                wCount._word = 0;                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab8   6be8     CLRF      0xe8,0x1                                                                                        
003aba   6be9     CLRF      0xe9,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 2 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003abc   ecd4     CALL      0x3da8,0x0         USBCheckStdRequest();                   // See system\usb9\usb9.c            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003abe   f01e                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac0   6adf     CLRF      0xdf,0x0           for(i=0;i < (sizeof(ClassReqHandler)/sizeof(pFunc));i++)                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac2   50df     MOVF      0xdf,0x0,0x0                                                                                    
003ac4   6e2a     MOVWF     0x2a,0x0                                                                                        
003ac6   6a2b     CLRF      0x2b,0x0                                                                                        
003ac8   0e01     MOVLW     0x1                                                                                             
003aca   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
003acc   0e00     MOVLW     0x0                                                                                             
003ace   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
003ad0   e21b     BC        0x3b08                                                                                          
003b04   2adf     INCF      0xdf,0x1,0x0                                                                                    
003b06   d7dd     BRA       0x3ac2                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ad2   0101     MOVLB     0x1                    if(ctrl_trf_session_owner != MUID_NULL)break;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ad4   51e3     MOVF      0xe3,0x0,0x1                                                                                    
003ad6   e001     BZ        0x3ada                                                                                          
003ad8   d017     BRA       0x3b08                                                                                          
003ada   6af7     CLRF      0xf7,0x0               ClassReqHandler[i]();               // See autofiles\usbdsc.c            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003adc   34df     RLCF      0xdf,0x0,0x0                                                                                    
003ade   0bfe     ANDLW     0xfe                                                                                            
003ae0   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003ae2   6ef6     MOVWF     0xf6,0x0                                                                                        
003ae4   0e5b     MOVLW     0x5b                                                                                            
003ae6   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003ae8   0e45     MOVLW     0x45                                                                                            
003aea   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003aec   0009     TBLRDPOSTINC                                                                                              
003aee   cff5     MOVFF     0xff5,0x2a                                                                                      
003af0   f02a                                                                                                               
003af2   0008     TBLRD                                                                                                     
003af4   cff5     MOVFF     0xff5,0x2b                                                                                      
003af6   f02b                                                                                                               
003af8   d004     BRA       0x3b02                                                                                          
003afa   c02b     MOVFF     0x2b,0xffa                                                                                      
003afc   fffa                                                                                                               
003afe   502a     MOVF      0x2a,0x0,0x0                                                                                    
003b00   6ef9     MOVWF     0xf9,0x0                                                                                        
003b02   dffb     RCALL     0x3afa                                                                                          
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 3 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b08   d8f0     RCALL     0x3cea             USBCtrlEPServiceComplete();                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b0a   52e5     MOVF      0xe5,0x1,0x0   }//end USBCtrlTrfSetupHandler                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b0c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b0e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003b10   ffd9                                                                                                               
003b12   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfOutHandler(void)                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an OUT transaction according to         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Note that if the the control transfer was from               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  host to device, the session owner should be notified         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  at the end of each OUT transaction to service the            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  received data.                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b14   0e02     MOVLW     0x2                if(ctrl_trf_state == CTRL_TRF_RX)                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b16   0101     MOVLB     0x1                                                                                             
003b18   5de2     SUBWF     0xe2,0x0,0x1                                                                                    
003b1a   e10c     BNZ       0x3b34                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b1c   d8a4     RCALL     0x3c66                 USBCtrlTrfRxService();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Don't have to worry about overwriting _KEEP bit                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * because if _KEEP was set, TRNIF would not have been                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * generated in the first place.                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b1e   0104     MOVLB     0x4                    if(ep0Bo.Stat.DTS == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b20   bd00     BTFSC     0x0,0x6,0x1                                                                                     
003b22   d004     BRA       0x3b2c                                                                                          
003b24   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b26   0ec8     MOVLW     0xc8                                                                                            
003b28   6f00     MOVWF     0x0,0x1                                                                                         
003b2a   d003     BRA       0x3b32                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b2c   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b2e   0e88     MOVLW     0x88                                                                                            
003b30   6f00     MOVWF     0x0,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b32   d001     BRA       0x3b36             else    // CTRL_TRF_TX                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b34   d929     RCALL     0x3d88                 USBPrepareForNextSetupTrf();                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b36   0012     RETURN    0x0            }//end USBCtrlTrfOutHandler                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfInHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an IN transaction according to          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            A Set Address Request must not change the acutal address     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  of the device until the completion of the control            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer. The end of the control transfer for Set Address    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Request is an IN transaction. Therefore it is necessary      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  to service this unique situation when the condition is       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  right. Macro mUSBCheckAdrPendingState is defined in          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb9.h and its function is to specifically service this      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  event.                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b38   0e04     MOVLW     0x4                mUSBCheckAdrPendingState();         // Must check if in ADR_PENDING_STATE    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b3a   0101     MOVLB     0x1                                                                                             
003b3c   5dea     SUBWF     0xea,0x0,0x1                                                                                    
003b3e   e10c     BNZ       0x3b58                                                                                          
003b40   c422     MOVFF     0x422,0xf6e                                                                                     
003b42   ff6e                                                                                                               
003b44   506e     MOVF      0x6e,0x0,0x0                                                                                    
003b46   0800     SUBLW     0x0                                                                                             
003b48   e204     BC        0x3b52                                                                                          
003b4a   0101     MOVLB     0x1                                                                                             
003b4c   0e05     MOVLW     0x5                                                                                             
003b4e   6fea     MOVWF     0xea,0x1                                                                                        
003b50   d003     BRA       0x3b58                                                                                          
003b52   0101     MOVLB     0x1                                                                                             
003b54   0e03     MOVLW     0x3                                                                                             
003b56   6fea     MOVWF     0xea,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b58   0101     MOVLB     0x1                if(ctrl_trf_state == CTRL_TRF_TX)                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5a   05e2     DECF      0xe2,0x0,0x1                                                                                    
003b5c   e10c     BNZ       0x3b76                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5e   d80d     RCALL     0x3b7a                 USBCtrlTrfTxService();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b60   0104     MOVLB     0x4                    if(ep0Bi.Stat.DTS == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b62   bd04     BTFSC     0x4,0x6,0x1                                                                                     
003b64   d004     BRA       0x3b6e                                                                                          
003b66   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b68   0ec8     MOVLW     0xc8                                                                                            
003b6a   6f04     MOVWF     0x4,0x1                                                                                         
003b6c   d003     BRA       0x3b74                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b6e   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT0|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b70   0e88     MOVLW     0x88                                                                                            
003b72   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b74   d001     BRA       0x3b78             else // CTRL_TRF_RX                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b76   d908     RCALL     0x3d88                 USBPrepareForNextSetupTrf();                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b78   0012     RETURN    0x0            }//end USBCtrlTrfInHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfTxService(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pSrc, wCount, and usb_stat.ctrl_trf_mem are setup properly.  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine should be called from only two places.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  One from USBCtrlEPServiceComplete() and one from             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  USBCtrlTrfInHandler(). It takes care of managing a           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer over multiple USB transactions.                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            This routine works with isochronous endpoint larger than     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  256 bytes and is shown here as an example of how to deal     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  with BC9 and BC8. In reality, a control endpoint can never   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  be larger than 64 bytes.                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b7a   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfTxService(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b7c   ffe6                                                                                                               
003b7e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003b80   ffd9                                                                                                               
003b82   0e02     MOVLW     0x2                                                                                             
003b84   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_send;                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * First, have to figure out how many byte of data to send.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b86   0101     MOVLB     0x1                if(wCount._word < EP0_BUFF_SIZE)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b88   0e08     MOVLW     0x8                                                                                             
003b8a   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
003b8c   0e00     MOVLW     0x0                                                                                             
003b8e   59e9     SUBWFB    0xe9,0x0,0x1                                                                                    
003b90   e205     BC        0x3b9c                                                                                          
003b92   c1e8     MOVFF     0x1e8,0xfde            byte_to_send._word = wCount._word;                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b94   ffde                                                                                                               
003b96   c1e9     MOVFF     0x1e9,0xfdd                                                                                     
003b98   ffdd                                                                                                               
003b9a   d003     BRA       0x3ba2             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b9c   0e08     MOVLW     0x8                    byte_to_send._word = EP0_BUFF_SIZE;                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b9e   6ede     MOVWF     0xde,0x0                                                                                        
003ba0   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Next, load the number of bytes to send to BC9..0 in buffer descriptor     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba2   0104     MOVLB     0x4                ep0Bi.Stat.BC9 = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba4   9304     BCF       0x4,0x1,0x1                                                                                     
003ba6   0104     MOVLB     0x4                ep0Bi.Stat.BC8 = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba8   9104     BCF       0x4,0x0,0x1                                                                                     
003baa   0e01     MOVLW     0x1                ep0Bi.Stat._byte |= MSB(byte_to_send);                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bac   50db     MOVF      0xdb,0x0,0x0                                                                                    
003bae   0104     MOVLB     0x4                                                                                             
003bb0   1304     IORWF     0x4,0x1,0x1                                                                                     
003bb2   cfdf     MOVFF     0xfdf,0x405        ep0Bi.Cnt = LSB(byte_to_send);                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb4   f405                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Subtract the number of bytes just about to be sent from the total.        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb6   0e00     MOVLW     0x0                wCount._word = wCount._word - byte_to_send._word;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb8   50db     MOVF      0xdb,0x0,0x0                                                                                    
003bba   0101     MOVLB     0x1                                                                                             
003bbc   5fe8     SUBWF     0xe8,0x1,0x1                                                                                    
003bbe   0e01     MOVLW     0x1                                                                                             
003bc0   50db     MOVF      0xdb,0x0,0x0                                                                                    
003bc2   0101     MOVLB     0x1                                                                                             
003bc4   5be9     SUBWFB    0xe9,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bc6   0101     MOVLB     0x1                pDst.bRam = (byte*)&CtrlTrfData;        // Set destination pointer           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bc8   0e28     MOVLW     0x28                                                                                            
003bca   6fe6     MOVWF     0xe6,0x1                                                                                        
003bcc   0e04     MOVLW     0x4                                                                                             
003bce   6fe7     MOVWF     0xe7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd0   0101     MOVLB     0x1                if(usb_stat.ctrl_trf_mem == _ROM)       // Determine type of memory source   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd2   a3eb     BTFSS     0xeb,0x1,0x1                                                                                    
003bd4   d020     BRA       0x3c16                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd6   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd8   ffe9                                                                                                               
003bda   cfda     MOVFF     0xfda,0xfea                                                                                     
003bdc   ffea                                                                                                               
003bde   50ee     MOVF      0xee,0x0,0x0                                                                                    
003be0   10ed     IORWF     0xed,0x0,0x0                                                                                    
003be2   e018     BZ        0x3c14                                                                                          
003c12   d7e1     BRA       0x3bd6                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be4   c1e4     MOVFF     0x1e4,0xff6                *pDst.bRam = *pSrc.bRom;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be6   fff6                                                                                                               
003be8   c1e5     MOVFF     0x1e5,0xff7                                                                                     
003bea   fff7                                                                                                               
003bec   0008     TBLRD                                                                                                     
003bee   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003bf0   c1e6     MOVFF     0x1e6,0xfe9                                                                                     
003bf2   ffe9                                                                                                               
003bf4   c1e7     MOVFF     0x1e7,0xfea                                                                                     
003bf6   ffea                                                                                                               
003bf8   6eef     MOVWF     0xef,0x0                                                                                        
003bfa   0101     MOVLB     0x1                        pDst.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bfc   2be6     INCF      0xe6,0x1,0x1                                                                                    
003bfe   0e00     MOVLW     0x0                                                                                             
003c00   23e7     ADDWFC    0xe7,0x1,0x1                                                                                    
003c02   0101     MOVLB     0x1                        pSrc.bRom++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c04   2be4     INCF      0xe4,0x1,0x1                                                                                    
003c06   0e00     MOVLW     0x0                                                                                             
003c08   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003c0a   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c0c   0e01     MOVLW     0x1                                                                                             
003c0e   e201     BC        0x3c12                                                                                          
003c10   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c14   d01e     BRA       0x3c52             else // RAM                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c16   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c18   ffe9                                                                                                               
003c1a   cfda     MOVFF     0xfda,0xfea                                                                                     
003c1c   ffea                                                                                                               
003c1e   50ee     MOVF      0xee,0x0,0x0                                                                                    
003c20   10ed     IORWF     0xed,0x0,0x0                                                                                    
003c22   e017     BZ        0x3c52                                                                                          
003c50   d7e2     BRA       0x3c16                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c24   c1e4     MOVFF     0x1e4,0xfe9                *pDst.bRam = *pSrc.bRam;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c26   ffe9                                                                                                               
003c28   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003c2a   ffea                                                                                                               
003c2c   50ef     MOVF      0xef,0x0,0x0                                                                                    
003c2e   c1e6     MOVFF     0x1e6,0xfe9                                                                                     
003c30   ffe9                                                                                                               
003c32   c1e7     MOVFF     0x1e7,0xfea                                                                                     
003c34   ffea                                                                                                               
003c36   6eef     MOVWF     0xef,0x0                                                                                        
003c38   0101     MOVLB     0x1                        pDst.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c3a   2be6     INCF      0xe6,0x1,0x1                                                                                    
003c3c   0e00     MOVLW     0x0                                                                                             
003c3e   23e7     ADDWFC    0xe7,0x1,0x1                                                                                    
003c40   0101     MOVLB     0x1                        pSrc.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c42   2be4     INCF      0xe4,0x1,0x1                                                                                    
003c44   0e00     MOVLW     0x0                                                                                             
003c46   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003c48   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c4a   0e01     MOVLW     0x1                                                                                             
003c4c   e201     BC        0x3c50                                                                                          
003c4e   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(usb_stat.ctrl_trf_mem == _ROM)                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c52   0e02     MOVLW     0x2            }//end USBCtrlTrfTxService                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c54   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003c56   e202     BC        0x3c5c                                                                                          
003c58   6ae1     CLRF      0xe1,0x0                                                                                        
003c5a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003c5c   6ee1     MOVWF     0xe1,0x0                                                                                        
003c5e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003c60   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003c62   ffd9                                                                                                               
003c64   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfRxService(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pDst and wCount are setup properly.                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  pSrc is always &CtrlTrfData                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb_stat.ctrl_trf_mem is always _RAM.                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  wCount should be set to 0 at the start of each control       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer.                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        *** This routine is only partially complete. Check for       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  new version of the firmware.                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c66   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfRxService(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c68   ffe6                                                                                                               
003c6a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003c6c   ffd9                                                                                                               
003c6e   0e02     MOVLW     0x2                                                                                             
003c70   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_read;                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c72   0e03     MOVLW     0x3                MSB(byte_to_read) = 0x03 & ep0Bo.Stat._byte;    // Filter out last 2 bits    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c74   0104     MOVLB     0x4                                                                                             
003c76   1500     ANDWF     0x0,0x0,0x1                                                                                     
003c78   6ee7     MOVWF     0xe7,0x0                                                                                        
003c7a   0e01     MOVLW     0x1                                                                                             
003c7c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003c7e   ffdb                                                                                                               
003c80   c401     MOVFF     0x401,0xfdf        LSB(byte_to_read) = ep0Bo.Cnt;                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c82   ffdf                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Accumulate total number of bytes read                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c84   50de     MOVF      0xde,0x0,0x0       wCount._word = wCount._word + byte_to_read._word;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c86   0101     MOVLB     0x1                                                                                             
003c88   27e8     ADDWF     0xe8,0x1,0x1                                                                                    
003c8a   50dd     MOVF      0xdd,0x0,0x0                                                                                    
003c8c   0101     MOVLB     0x1                                                                                             
003c8e   23e9     ADDWFC    0xe9,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c90   0101     MOVLB     0x1                pSrc.bRam = (byte*)&CtrlTrfData;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c92   0e28     MOVLW     0x28                                                                                            
003c94   6fe4     MOVWF     0xe4,0x1                                                                                        
003c96   0e04     MOVLW     0x4                                                                                             
003c98   6fe5     MOVWF     0xe5,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c9a   cfd9     MOVFF     0xfd9,0xfe9        while(byte_to_read._word)                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c9c   ffe9                                                                                                               
003c9e   cfda     MOVFF     0xfda,0xfea                                                                                     
003ca0   ffea                                                                                                               
003ca2   50ee     MOVF      0xee,0x0,0x0                                                                                    
003ca4   10ed     IORWF     0xed,0x0,0x0                                                                                    
003ca6   e017     BZ        0x3cd6                                                                                          
003cd4   d7e2     BRA       0x3c9a                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ca8   c1e4     MOVFF     0x1e4,0xfe9            *pDst.bRam = *pSrc.bRam;                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003caa   ffe9                                                                                                               
003cac   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003cae   ffea                                                                                                               
003cb0   50ef     MOVF      0xef,0x0,0x0                                                                                    
003cb2   c1e6     MOVFF     0x1e6,0xfe9                                                                                     
003cb4   ffe9                                                                                                               
003cb6   c1e7     MOVFF     0x1e7,0xfea                                                                                     
003cb8   ffea                                                                                                               
003cba   6eef     MOVWF     0xef,0x0                                                                                        
003cbc   0101     MOVLB     0x1                    pDst.bRam++;                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cbe   2be6     INCF      0xe6,0x1,0x1                                                                                    
003cc0   0e00     MOVLW     0x0                                                                                             
003cc2   23e7     ADDWFC    0xe7,0x1,0x1                                                                                    
003cc4   0101     MOVLB     0x1                    pSrc.bRam++;                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cc6   2be4     INCF      0xe4,0x1,0x1                                                                                    
003cc8   0e00     MOVLW     0x0                                                                                             
003cca   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003ccc   06df     DECF      0xdf,0x1,0x0           byte_to_read._word--;                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cce   0e01     MOVLW     0x1                                                                                             
003cd0   e201     BC        0x3cd4                                                                                          
003cd2   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while(byte_to_read._word)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cd6   0e02     MOVLW     0x2            }//end USBCtrlTrfRxService                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cd8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003cda   e202     BC        0x3ce0                                                                                          
003cdc   6ae1     CLRF      0xe1,0x0                                                                                        
003cde   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003ce0   6ee1     MOVWF     0xe1,0x0                                                                                        
003ce2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003ce4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003ce6   ffd9                                                                                                               
003ce8   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPServiceComplete(void)                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine wrap up the ramaining tasks in servicing        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a Setup Request. Its main task is to set the endpoint        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  controls appropriately for a given situation. See code       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  below.                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  There are three main scenarios:                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a) There was no handler for the Request, in this case        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a STALL should be sent out.                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  b) The host has requested a read control transfer,           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     endpoints are required to be setup in a specific way.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  c) The host has requested a write control transfer, or       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a control data stage is not required, endpoints are       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     required to be setup in a specific way.                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Packet processing is resumed by clearing PKTDIS bit.         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPServiceComplete(void)                                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * PKTDIS bit is set when a Setup Transaction is received.                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Clear to resume packet processing.                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cea   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cec   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_NULL)                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cee   51e3     MOVF      0xe3,0x0,0x1                                                                                    
003cf0   e10f     BNZ       0x3d10                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * If no one knows how to service this request then stall.               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Must also prepare EP0 to receive the next SETUP transaction.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf2   0104     MOVLB     0x4                    ep0Bo.Cnt = EP0_BUFF_SIZE;                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf4   0e08     MOVLW     0x8                                                                                             
003cf6   6f01     MOVWF     0x1,0x1                                                                                         
003cf8   0104     MOVLB     0x4                    ep0Bo.ADR = (byte*)&SetupPkt;                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cfa   0e20     MOVLW     0x20                                                                                            
003cfc   6f02     MOVWF     0x2,0x1                                                                                         
003cfe   0e04     MOVLW     0x4                                                                                             
003d00   6f03     MOVWF     0x3,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d02   0104     MOVLB     0x4                    ep0Bo.Stat._byte = _USIE|_BSTALL;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d04   0e84     MOVLW     0x84                                                                                            
003d06   6f00     MOVWF     0x0,0x1                                                                                         
003d08   0104     MOVLB     0x4                    ep0Bi.Stat._byte = _USIE|_BSTALL;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d0a   0e84     MOVLW     0x84                                                                                            
003d0c   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d0e   d03b     BRA       0x3d86             else    // A module has claimed ownership of the control transfer session.   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d10   0104     MOVLB     0x4                    if(SetupPkt.DataDir == DEV_TO_HOST)                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d12   af20     BTFSS     0x20,0x7,0x1                                                                                    
003d14   d025     BRA       0x3d60                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d16   0101     MOVLB     0x1                        if(SetupPkt.wLength < wCount._word)                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d18   51e8     MOVF      0xe8,0x0,0x1                                                                                    
003d1a   0104     MOVLB     0x4                                                                                             
003d1c   5d26     SUBWF     0x26,0x0,0x1                                                                                    
003d1e   0101     MOVLB     0x1                                                                                             
003d20   51e9     MOVF      0xe9,0x0,0x1                                                                                    
003d22   0104     MOVLB     0x4                                                                                             
003d24   5927     SUBWFB    0x27,0x0,0x1                                                                                    
003d26   e204     BC        0x3d30                                                                                          
003d28   c426     MOVFF     0x426,0x1e8                    wCount._word = SetupPkt.wLength;                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d2a   f1e8                                                                                                               
003d2c   c427     MOVFF     0x427,0x1e9                                                                                     
003d2e   f1e9                                                                                                               
003d30   df24     RCALL     0x3b7a                     USBCtrlTrfTxService();                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d32   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_TX;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d34   0e01     MOVLW     0x1                                                                                             
003d36   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Read:                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><IN[1]><IN[0]>...<OUT[1]> | <SETUP[0]>                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare OUT EP to respond to early termination                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * NOTE:                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * If something went wrong during the control transfer,              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the last status stage may not be sent by the host.                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * When this happens, two different things could happen              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * depending on the host.                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * a) The host could send out a RESET.                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * b) The host could send out a new SETUP transaction                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    without sending a RESET first.                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * To properly handle case (b), the OUT EP must be setup             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * to receive either a zero length OUT transaction, or a             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * new SETUP transaction.                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Since the SETUP transaction requires the DTS bit to be            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * DAT0 while the zero length OUT status requires the DTS            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * bit to be DAT1, the DTS bit check by the hardware should          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * be disabled. This way the SIE could accept either of              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the two transactions.                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Furthermore, the Cnt byte should be set to prepare for            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the SETUP data (8-byte or more), and the buffer address           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * should be pointed to SetupPkt.                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d38   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d3a   0e08     MOVLW     0x8                                                                                             
003d3c   6f01     MOVWF     0x1,0x1                                                                                         
003d3e   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&SetupPkt;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d40   0e20     MOVLW     0x20                                                                                            
003d42   6f02     MOVWF     0x2,0x1                                                                                         
003d44   0e04     MOVLW     0x4                                                                                             
003d46   6f03     MOVWF     0x3,0x1                                                                                         
003d48   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE;           // Note: DTSEN is 0!             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d4a   0e80     MOVLW     0x80                                                                                            
003d4c   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare IN EP to transfer data, Cnt should have                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    been initialized by responsible request owner.                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d4e   0104     MOVLB     0x4                        ep0Bi.ADR = (byte*)&CtrlTrfData;                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d50   0e28     MOVLW     0x28                                                                                            
003d52   6f06     MOVWF     0x6,0x1                                                                                         
003d54   0e04     MOVLW     0x4                                                                                             
003d56   6f07     MOVWF     0x7,0x1                                                                                         
003d58   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d5a   0ec8     MOVLW     0xc8                                                                                            
003d5c   6f04     MOVWF     0x4,0x1                                                                                         
                                                   }                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d5e   d013     BRA       0x3d86                 else    // (SetupPkt.DataDir == HOST_TO_DEV)                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d60   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_RX;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d62   0e02     MOVLW     0x2                                                                                             
003d64   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Write:                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><OUT[1]><OUT[0]>...<IN[1]> | <SETUP[0]>                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare IN EP to respond to early termination                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    This is the same as a Zero Length Packet Response              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    for control transfer without a data stage                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d66   0104     MOVLB     0x4                        ep0Bi.Cnt = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d68   6b05     CLRF      0x5,0x1                                                                                         
003d6a   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d6c   0ec8     MOVLW     0xc8                                                                                            
003d6e   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare OUT EP to receive data.                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d70   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d72   0e08     MOVLW     0x8                                                                                             
003d74   6f01     MOVWF     0x1,0x1                                                                                         
003d76   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&CtrlTrfData;                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d78   0e28     MOVLW     0x28                                                                                            
003d7a   6f02     MOVWF     0x2,0x1                                                                                         
003d7c   0e04     MOVLW     0x4                                                                                             
003d7e   6f03     MOVWF     0x3,0x1                                                                                         
003d80   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d82   0ec8     MOVLW     0xc8                                                                                            
003d84   6f00     MOVWF     0x0,0x1                                                                                         
                                                   }//end if(SetupPkt.DataDir == DEV_TO_HOST)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(ctrl_trf_session_owner == MUID_NULL)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d86   0012     RETURN    0x0            }//end USBCtrlEPServiceComplete                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBPrepareForNextSetupTrf(void)                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        The routine forces EP0 OUT to be ready for a new Setup       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transaction, and forces EP0 IN to be owned by CPU.           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBPrepareForNextSetupTrf(void)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d88   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;            // See usbctrltrf.h                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d8a   6be2     CLRF      0xe2,0x1                                                                                        
003d8c   0104     MOVLB     0x4                ep0Bo.Cnt = EP0_BUFF_SIZE;              // Defined in usbcfg.h               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d8e   0e08     MOVLW     0x8                                                                                             
003d90   6f01     MOVWF     0x1,0x1                                                                                         
003d92   0104     MOVLB     0x4                ep0Bo.ADR = (byte*)&SetupPkt;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d94   0e20     MOVLW     0x20                                                                                            
003d96   6f02     MOVWF     0x2,0x1                                                                                         
003d98   0e04     MOVLW     0x4                                                                                             
003d9a   6f03     MOVWF     0x3,0x1                                                                                         
003d9c   0104     MOVLB     0x4                ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;  // EP0 buff dsc init, see usbmmap.h  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d9e   0e88     MOVLW     0x88                                                                                            
003da0   6f00     MOVWF     0x0,0x1                                                                                         
003da2   0104     MOVLB     0x4                ep0Bi.Stat._byte = _UCPU;               // EP0 IN buffer initialization      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003da4   6b04     CLRF      0x4,0x1                                                                                         
003da6   0012     RETURN    0x0            }//end USBPrepareForNextSetupTrf                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** EOF usbctrltrf.c *********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\user\user.c
                                            * FileName:        user.c                                                       e:\iro_svn\opensprints\FW\user\user.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\user\user.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\user\user.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\user\user.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\user\user.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\user\user.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\user\user.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\user\user.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\user\user.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\user\user.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\user\user.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\user\user.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\user\user.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\user\user.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\user\user.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\user\user.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\user\user.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\user\user.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\user\user.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\user\user.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		03/15/06	Added user code to impliment                          e:\iro_svn\opensprints\FW\user\user.c
                                            *									firmware version D v1.0 for UBW                                       e:\iro_svn\opensprints\FW\user\user.c
                                            *									project. See www.greta.dhs.org/UBW                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		05/04/06	Starting version 1.1, which will                      e:\iro_svn\opensprints\FW\user\user.c
                                            * 									include several fixes. See website.                                  e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					06/21/06	Starting v1.2 -                                              e:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed problem with I packets (from T command) filling up TX buffer          e:\iro_svn\opensprints\FW\user\user.c
                                            * 		and not letting any incoming commands be received. (strange)                e:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding several commands - Analog inputs being the biggest set.              e:\iro_svn\opensprints\FW\user\user.c
                                            * - Also Byte read/Byte write (PEEK/POKE) anywhere in memory                    e:\iro_svn\opensprints\FW\user\user.c
                                            * - Individual pin I/O and direction                                            e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					08/16/06	v1.3 - Fixed bug with USB startup                            e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					09/09/06	v1.4 - Starting 1.4                                          e:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed Microchip bug with early silicon - UCONbits.PKTDIS = 0;               e:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding BO and BC commands for parallel output to graphics pannels           e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					12/06/06	v1.4 - More work on 1.4                                      e:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote all I/O buffering code for increased speed and functionality       e:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote error handling code                                                e:\iro_svn\opensprints\FW\user\user.c
                                            * - Added delays to BC/BO commands to help Corey                                e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					01/06/07	v1.4 - Added RC command for servos                           e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					03/07/07	v1.4.1 - Changed blink rate for SFE                          e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					05/24/07	v1.4.2 - Fixed RC command bug - it                           e:\iro_svn\opensprints\FW\user\user.c
                                            *									wouldn't shut off.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Luke Orland			2007/08/28	added some stuff                                     e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           #include <usart.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <stdio.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <ctype.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <delays.h>                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           #include "io_cfg.h"             // I/O pin mapping                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include "user\user.h"                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** D E F I N E S ********************************************************/      e:\iro_svn\opensprints\FW\user\user.c
                                           #define bitset(var,bitno) ((var) |= (1 << (bitno)))                              e:\iro_svn\opensprints\FW\user\user.c
                                           #define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))                             e:\iro_svn\opensprints\FW\user\user.c
                                           #define bittst(var,bitno) (var& (1 << (bitno)))                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // For the RC command, we define a little data structure that holds the          e:\iro_svn\opensprints\FW\user\user.c
                                           // values assoicated with a particular servo connection                          e:\iro_svn\opensprints\FW\user\user.c
                                           // It's port, pin, value (position) and state (INACTIVE, PRIMED or TIMING)       e:\iro_svn\opensprints\FW\user\user.c
                                           // Later on we make an array of these (19 elements long - 19 pins) to track      e:\iro_svn\opensprints\FW\user\user.c
                                           // the values of all of the servos.                                              e:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	 kOFF = 1                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	,kWAITING                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	,kPRIMED                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	,kTIMING                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           } tRC_state;                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kRC_DATA_SIZE			24				// In structs, since there are 3 ports of 8 bits each e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kTX_BUF_SIZE 			64				// In bytes                                        e:\iro_svn\opensprints\FW\user\user.c
                                           #define kRX_BUF_SIZE			64				// In bytes                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_TX_BUF_SIZE		64				// In bytes                                    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_RX_BUF_SIZE		64				// In bytes                                    e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Enum for extract_num() function parameter                                     e:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	 kCHAR                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCHAR                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           	,kINT                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUINT                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	,kASCII_CHAR                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCASE_ASCII_CHAR                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           } tExtractType;                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define advance_RX_buf_out()						\                                              e:\iro_svn\opensprints\FW\user\user.c
                                           { 													\                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	g_RX_buf_out++;									\                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	if (kRX_BUF_SIZE == g_RX_buf_out)				\                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	{												\                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           		g_RX_buf_out = 0;							\                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	}												\                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_A_DEPTH		3                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_D_DEPTH		3                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #define kPR2_RELOAD				250		// For 1ms TMR2 tick                                 e:\iro_svn\opensprints\FW\user\user.c
                                           #define kCR						0x0D                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kLF						0x0A                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // defines for the error_byte byte - each bit has a meaning                      e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_TX_BUF_OVERRUN			2                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_RX_BUFFER_OVERRUN		3                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_MISSING_PARAMETER		4                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PRINTED_ERROR			5			// We've already printed out an error    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT	6                                    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_EXTRA_CHARACTERS 		7                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_UNKNOWN_COMMAND			8			// Part of command parser, not error handler e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata access fast_vars                                                   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Rate variable - how fast does interrupt fire to capture inputs?               e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int time_between_updates;                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_D_RepeatRate;			// How many 1ms ticks between Digital updates e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_in;				// In pointer                      e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_out;				// Out pointer                    e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_length;			// Current FIFO depth           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_A_RepeatRate;			// How many 1ms ticks between Analog updates e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_in;				// In pointer                      e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_out;				// Out pointer                    e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_length;			// Current FIFO depth           e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char AnalogEnable;				// Maximum ADC channel to convert   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // This byte has each of its bits used as a seperate error flag                  e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char error_byte;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RC servo variables                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // First the main array of data for each servo                                   e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_primed_ptr;                                              e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_next_ptr;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_timing_ptr;                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Used only in LowISR                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int D_tick_counter;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int A_tick_counter;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char A_cur_channel;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // ROM strings                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_OK[] = {"OK\r\n"};                                             e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_LFCR[] = {"\r\n"};                                             e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_version[] = {"opensprints FW 0.3 based on UBW FW D Version 1.4.2\r\n"}; e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata ISR_buf=0x100                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int ISR_A_FIFO[12][kISR_FIFO_A_DEPTH];	// Stores the most recent analog conversions e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned char ISR_D_FIFO[3][kISR_FIFO_D_DEPTH];	// FIFO of actual data  e:\iro_svn\opensprints\FW\user\user.c
                                           volatile tRC_state g_RC_state[kRC_DATA_SIZE];				// Stores states for each pin for RC command e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int g_RC_value[kRC_DATA_SIZE];			// Stores reload values for TMR0 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata com_buf=0x200                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // USB Transmit buffer for packets (back to PC)                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf[kTX_BUF_SIZE];                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USB Receiving buffer for commands as they come from PC                        e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf[kRX_BUF_SIZE];                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USART Receiving buffer for data coming from the USART                         e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf[kUSART_RX_BUF_SIZE];                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USART Transmit buffer for data going to the USART                             e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf[kUSART_TX_BUF_SIZE];                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // These variables are in normal storage space                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // These are used for the Fast Parallel Output routines                          e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_init;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_mask;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_mask;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_delay;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB transmit (back to PC) buffer                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_in;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_out;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB receive (from PC) buffer                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_in;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_out;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART input buffer                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_in;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_out;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART output buffer                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_in;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_out;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Normally set to TRUE. Able to set FALSE to not send "OK" message after packet recepetion e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL	g_ack_enable;                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // sensor stuff                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL is_racing = FALSE;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus (void);		// Handles blinking the USB status LED              e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed (void);	// Check to see if the user (PRG) switch is pressed e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_packet (void);		// Take a full packet and dispatch it to the right function e:\iro_svn\opensprints\FW\user\user.c
                                           signed short long extract_number (tExtractType type); // Pull a number paramter out of the packet e:\iro_svn\opensprints\FW\user\user.c
                                           signed char extract_digit (signed short long * acc, unsigned char digits); // Pull a character out of the packet e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet (void);		// R for resetting UBW                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_C_packet (void);		// C for configuring I/O and analog pins            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet (void); 	// CX For configuring serial port                  e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_O_packet (void);		// O for output digital to pins                     e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet (void);		// I for input digital from pins                    e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet (void);		// V for printing version                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_A_packet (void);		// A for requesting analog inputs                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_T_packet (void);		// T for setting up timed I/O (digital or analog)   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PI_packet (void);	// PI for reading a single pin                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PO_packet (void);	// PO for setting a single pin state                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PD_packet (void);	// PD for setting a pin's direction                 e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MR_packet (void);	// MR for Memory Read                               e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MW_packet (void); 	// MW for Memory Write                             e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet (void);	// TX for transmitting serial                       e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet (void);	// RX for receiving serial                          e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RC_packet (void);	// RC is for outputing RC servo pulses              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BO_packet (void);	// BO sends data to fast parallel output            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BC_packet (void);	// BC configures fast parallel outputs              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BS_packet (void);	// BS sends binary data to fast parallel output     e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CU_packet (void);	// CU configures UBW (system wide parameters)       e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void);	// SS Send SPI                                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void);	// RS Receive SPI                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void);	// CS Configure SPI                                 e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void);	// SI Send I2C                                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void);	// RI Receive I2C                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void);	// CI Configure I2C                                 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void);	// start sending sensor messages to PC              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void);	// stop sending sensor messages to PC               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void check_and_send_TX_data (void); // See if there is any data to send to PC, and if so, do it e:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack (void);			// Print "OK" after packet is parsed                    e:\iro_svn\opensprints\FW\user\user.c
                                           int _user_putc (char c);		// Our UBS based stream character printer              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interruptlow low_ISR                                                     e:\iro_svn\opensprints\FW\user\user.c
000844   cfd8     MOVFF     0xfd8,0xfe4    void low_ISR(void)                                                               e:\iro_svn\opensprints\FW\user\user.c
000846   ffe4                                                                                                               
000848   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
00084a   ffe4                                                                                                               
00084c   6ee4     MOVWF     0xe4,0x0                                                                                        
00084e   cfda     MOVFF     0xfda,0xfe4                                                                                     
000850   ffe4                                                                                                               
000852   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000854   ffda                                                                                                               
000856   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
000858   ffe4                                                                                                               
00085a   cfea     MOVFF     0xfea,0xfe4                                                                                     
00085c   ffe4                                                                                                               
00085e   cff3     MOVFF     0xff3,0xfe4                                                                                     
000860   ffe4                                                                                                               
000862   cff4     MOVFF     0xff4,0xfe4                                                                                     
000864   ffe4                                                                                                               
000866   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a Timer2 interrupt? (1ms rate)                                    e:\iro_svn\opensprints\FW\user\user.c
000868   a29e     BTFSS     0x9e,0x1,0x0   	if (PIR1bits.TMR2IF)                                                            e:\iro_svn\opensprints\FW\user\user.c
00086a   d101     BRA       0xa6e                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
00086c   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// The most time critical part of this interrupt service routine is the        e:\iro_svn\opensprints\FW\user\user.c
                                           		// handling of the RC command's servo output pulses.                           e:\iro_svn\opensprints\FW\user\user.c
                                           		// Each time we get this interrupt, we look to see if the next pin on the      e:\iro_svn\opensprints\FW\user\user.c
                                           		// list has a value greater than zero. If so, we arm set it high and set       e:\iro_svn\opensprints\FW\user\user.c
                                           		// it's state to PRIMED. Then we advance the pointers to the next pair.        e:\iro_svn\opensprints\FW\user\user.c
00086e   0e03     MOVLW     0x3            		if (kPRIMED == g_RC_state[g_RC_primed_ptr])                                    e:\iro_svn\opensprints\FW\user\user.c
000870   6e38     MOVWF     0x38,0x0                                                                                        
000872   500e     MOVF      0xe,0x0,0x0                                                                                     
000874   6aea     CLRF      0xea,0x0                                                                                        
000876   0f51     ADDLW     0x51                                                                                            
000878   6ee9     MOVWF     0xe9,0x0                                                                                        
00087a   0e01     MOVLW     0x1                                                                                             
00087c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00087e   50ef     MOVF      0xef,0x0,0x0                                                                                    
000880   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000882   e130     BNZ       0x8e4                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// This is easy, throw the value into the timer                               e:\iro_svn\opensprints\FW\user\user.c
000884   500e     MOVF      0xe,0x0,0x0    			TMR0H = g_RC_value[g_RC_primed_ptr] >> 8;                                     e:\iro_svn\opensprints\FW\user\user.c
000886   6ee9     MOVWF     0xe9,0x0                                                                                        
000888   6aea     CLRF      0xea,0x0                                                                                        
00088a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00088c   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00088e   36ea     RLCF      0xea,0x1,0x0                                                                                    
000890   0e69     MOVLW     0x69                                                                                            
000892   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000894   0e01     MOVLW     0x1                                                                                             
000896   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000898   cfee     MOVFF     0xfee,0x38                                                                                      
00089a   f038                                                                                                               
00089c   cfef     MOVFF     0xfef,0x39                                                                                      
00089e   f039                                                                                                               
0008a0   c039     MOVFF     0x39,0x38                                                                                       
0008a2   f038                                                                                                               
0008a4   6a39     CLRF      0x39,0x0                                                                                        
0008a6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008a8   6ed7     MOVWF     0xd7,0x0                                                                                        
0008aa   500e     MOVF      0xe,0x0,0x0    			TMR0L = g_RC_value[g_RC_primed_ptr] & 0xFF;                                   e:\iro_svn\opensprints\FW\user\user.c
0008ac   6ee9     MOVWF     0xe9,0x0                                                                                        
0008ae   6aea     CLRF      0xea,0x0                                                                                        
0008b0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0008b2   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0008b4   36ea     RLCF      0xea,0x1,0x0                                                                                    
0008b6   0e69     MOVLW     0x69                                                                                            
0008b8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008ba   0e01     MOVLW     0x1                                                                                             
0008bc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008be   cfee     MOVFF     0xfee,0x38                                                                                      
0008c0   f038                                                                                                               
0008c2   cfef     MOVFF     0xfef,0x39                                                                                      
0008c4   f039                                                                                                               
0008c6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008c8   6ed6     MOVWF     0xd6,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           			// Then make sure the timer's interrupt enable is set                         e:\iro_svn\opensprints\FW\user\user.c
0008ca   8af2     BSF       0xf2,0x5,0x0   			INTCONbits.TMR0IE = 1;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			// And be sure to clear the flag too                                          e:\iro_svn\opensprints\FW\user\user.c
0008cc   94f2     BCF       0xf2,0x2,0x0   			INTCONbits.TMR0IF = 0;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn on Timer0                                                             e:\iro_svn\opensprints\FW\user\user.c
0008ce   8ed5     BSF       0xd5,0x7,0x0   			T0CONbits.TMR0ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           			// And set this pin's state to timing                                         e:\iro_svn\opensprints\FW\user\user.c
0008d0   500e     MOVF      0xe,0x0,0x0    			g_RC_state[g_RC_primed_ptr] = kTIMING;                                        e:\iro_svn\opensprints\FW\user\user.c
0008d2   6aea     CLRF      0xea,0x0                                                                                        
0008d4   0f51     ADDLW     0x51                                                                                            
0008d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0008d8   0e01     MOVLW     0x1                                                                                             
0008da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008dc   0e04     MOVLW     0x4                                                                                             
0008de   6eef     MOVWF     0xef,0x0                                                                                        
                                           			                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Remember which pin is now timing                                           e:\iro_svn\opensprints\FW\user\user.c
0008e0   500e     MOVF      0xe,0x0,0x0    			g_RC_timing_ptr = g_RC_primed_ptr;                                            e:\iro_svn\opensprints\FW\user\user.c
0008e2   6e10     MOVWF     0x10,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0008e4   0e02     MOVLW     0x2            		if (kWAITING == g_RC_state[g_RC_next_ptr])                                     e:\iro_svn\opensprints\FW\user\user.c
0008e6   6e38     MOVWF     0x38,0x0                                                                                        
0008e8   500f     MOVF      0xf,0x0,0x0                                                                                     
0008ea   6aea     CLRF      0xea,0x0                                                                                        
0008ec   0f51     ADDLW     0x51                                                                                            
0008ee   6ee9     MOVWF     0xe9,0x0                                                                                        
0008f0   0e01     MOVLW     0x1                                                                                             
0008f2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008f4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0008f6   5c38     SUBWF     0x38,0x0,0x0                                                                                    
0008f8   e149     BNZ       0x98c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// If the value is zero, then shut this pin off                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// otherwise, prime it for sending a pulse                                    e:\iro_svn\opensprints\FW\user\user.c
0008fa   500f     MOVF      0xf,0x0,0x0    			if (0 == g_RC_value[g_RC_next_ptr])                                           e:\iro_svn\opensprints\FW\user\user.c
0008fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0008fe   6aea     CLRF      0xea,0x0                                                                                        
000900   90d8     BCF       0xd8,0x0,0x0                                                                                    
000902   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000904   36ea     RLCF      0xea,0x1,0x0                                                                                    
000906   0e69     MOVLW     0x69                                                                                            
000908   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00090a   0e01     MOVLW     0x1                                                                                             
00090c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00090e   50ee     MOVF      0xee,0x0,0x0                                                                                    
000910   10ed     IORWF     0xed,0x0,0x0                                                                                    
000912   e109     BNZ       0x926                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000914   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kOFF;                                            e:\iro_svn\opensprints\FW\user\user.c
000916   6aea     CLRF      0xea,0x0                                                                                        
000918   0f51     ADDLW     0x51                                                                                            
00091a   6ee9     MOVWF     0xe9,0x0                                                                                        
00091c   0e01     MOVLW     0x1                                                                                             
00091e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000920   0e01     MOVLW     0x1                                                                                             
000922   6eef     MOVWF     0xef,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000924   d033     BRA       0x98c          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the bit high                                                          e:\iro_svn\opensprints\FW\user\user.c
000926   0e08     MOVLW     0x8            				if (g_RC_next_ptr < 8)                                                       e:\iro_svn\opensprints\FW\user\user.c
000928   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00092a   e20c     BC        0x944                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
00092c   0e07     MOVLW     0x7            					bitset (LATA, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
00092e   140f     ANDWF     0xf,0x0,0x0                                                                                     
000930   6e38     MOVWF     0x38,0x0                                                                                        
000932   0e01     MOVLW     0x1                                                                                             
000934   5238     MOVF      0x38,0x1,0x0                                                                                    
000936   e004     BZ        0x940                                                                                           
000938   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00093a   0bfe     ANDLW     0xfe                                                                                            
00093c   0638     DECF      0x38,0x1,0x0                                                                                    
00093e   e1fc     BNZ       0x938                                                                                           
000940   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000942   d01a     BRA       0x978          				else if (g_RC_next_ptr < 16)                                                 e:\iro_svn\opensprints\FW\user\user.c
000944   0e10     MOVLW     0x10                                                                                            
000946   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000948   e20c     BC        0x962                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
00094a   0e07     MOVLW     0x7            					bitset (LATB, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
00094c   140f     ANDWF     0xf,0x0,0x0                                                                                     
00094e   6e38     MOVWF     0x38,0x0                                                                                        
000950   0e01     MOVLW     0x1                                                                                             
000952   5238     MOVF      0x38,0x1,0x0                                                                                    
000954   e004     BZ        0x95e                                                                                           
000956   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000958   0bfe     ANDLW     0xfe                                                                                            
00095a   0638     DECF      0x38,0x1,0x0                                                                                    
00095c   e1fc     BNZ       0x956                                                                                           
00095e   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000960   d00b     BRA       0x978          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
000962   0e07     MOVLW     0x7            					bitset (LATC, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
000964   140f     ANDWF     0xf,0x0,0x0                                                                                     
000966   6e38     MOVWF     0x38,0x0                                                                                        
000968   0e01     MOVLW     0x1                                                                                             
00096a   5238     MOVF      0x38,0x1,0x0                                                                                    
00096c   e004     BZ        0x976                                                                                           
00096e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000970   0bfe     ANDLW     0xfe                                                                                            
000972   0638     DECF      0x38,0x1,0x0                                                                                    
000974   e1fc     BNZ       0x96e                                                                                           
000976   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the state to primed so we know to do next                             e:\iro_svn\opensprints\FW\user\user.c
000978   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kPRIMED;                                         e:\iro_svn\opensprints\FW\user\user.c
00097a   6aea     CLRF      0xea,0x0                                                                                        
00097c   0f51     ADDLW     0x51                                                                                            
00097e   6ee9     MOVWF     0xe9,0x0                                                                                        
000980   0e01     MOVLW     0x1                                                                                             
000982   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000984   0e03     MOVLW     0x3                                                                                             
000986   6eef     MOVWF     0xef,0x0                                                                                        
                                           				// And remember which pin is primed                                          e:\iro_svn\opensprints\FW\user\user.c
000988   500f     MOVF      0xf,0x0,0x0    				g_RC_primed_ptr = g_RC_next_ptr;                                             e:\iro_svn\opensprints\FW\user\user.c
00098a   6e0e     MOVWF     0xe,0x0                                                                                         
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// And always advance the main pointer                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		// NOTE: we need to skip RA6, RA7, and RC3, RC4, and RC5                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// (Because UBW doesn't bring those pins out to headers)                       e:\iro_svn\opensprints\FW\user\user.c
00098c   2a0f     INCF      0xf,0x1,0x0    		g_RC_next_ptr++;                                                               e:\iro_svn\opensprints\FW\user\user.c
00098e   0e06     MOVLW     0x6            		if (6 == g_RC_next_ptr)                                                        e:\iro_svn\opensprints\FW\user\user.c
000990   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000992   e103     BNZ       0x99a                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000994   0e08     MOVLW     0x8            			g_RC_next_ptr = 8;                                                            e:\iro_svn\opensprints\FW\user\user.c
000996   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000998   d00a     BRA       0x9ae          		else if (19 == g_RC_next_ptr)                                                  e:\iro_svn\opensprints\FW\user\user.c
00099a   0e13     MOVLW     0x13                                                                                            
00099c   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00099e   e103     BNZ       0x9a6                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009a0   0e16     MOVLW     0x16           			g_RC_next_ptr = 22;                                                           e:\iro_svn\opensprints\FW\user\user.c
0009a2   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009a4   d004     BRA       0x9ae          		else if (kRC_DATA_SIZE == g_RC_next_ptr)                                       e:\iro_svn\opensprints\FW\user\user.c
0009a6   0e18     MOVLW     0x18                                                                                            
0009a8   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
0009aa   e101     BNZ       0x9ae                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009ac   6a0f     CLRF      0xf,0x0        			g_RC_next_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           				                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an I packet                                    e:\iro_svn\opensprints\FW\user\user.c
0009ae   0e00     MOVLW     0x0            		if (ISR_D_RepeatRate > 0)                                                      e:\iro_svn\opensprints\FW\user\user.c
0009b0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0009b2   5402     SUBFWB    0x2,0x0,0x0                                                                                     
0009b4   0e00     MOVLW     0x0                                                                                             
0009b6   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0009b8   e22e     BC        0xa16                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009ba   2a11     INCF      0x11,0x1,0x0   			D_tick_counter++;                                                             e:\iro_svn\opensprints\FW\user\user.c
0009bc   0e00     MOVLW     0x0                                                                                             
0009be   2212     ADDWFC    0x12,0x1,0x0                                                                                    
0009c0   5002     MOVF      0x2,0x0,0x0    			if (D_tick_counter >= ISR_D_RepeatRate)                                       e:\iro_svn\opensprints\FW\user\user.c
0009c2   5c11     SUBWF     0x11,0x0,0x0                                                                                    
0009c4   5003     MOVF      0x3,0x0,0x0                                                                                     
0009c6   5812     SUBWFB    0x12,0x0,0x0                                                                                    
0009c8   e326     BNC       0xa16                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0009ca   6a11     CLRF      0x11,0x0       				D_tick_counter = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
0009cc   6a12     CLRF      0x12,0x0                                                                                        
                                           				// Tell the main code to send an I packet                                    e:\iro_svn\opensprints\FW\user\user.c
0009ce   0e03     MOVLW     0x3            				if (ISR_D_FIFO_length < kISR_FIFO_D_DEPTH)                                   e:\iro_svn\opensprints\FW\user\user.c
0009d0   5c06     SUBWF     0x6,0x0,0x0                                                                                     
0009d2   e21f     BC        0xa12                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// And copy over our port values                                            e:\iro_svn\opensprints\FW\user\user.c
0009d4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[0][ISR_D_FIFO_in] = PORTA;                                       e:\iro_svn\opensprints\FW\user\user.c
0009d6   6aea     CLRF      0xea,0x0                                                                                        
0009d8   0f48     ADDLW     0x48                                                                                            
0009da   6ee9     MOVWF     0xe9,0x0                                                                                        
0009dc   0e01     MOVLW     0x1                                                                                             
0009de   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009e0   cf80     MOVFF     0xf80,0xfef                                                                                     
0009e2   ffef                                                                                                               
0009e4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[1][ISR_D_FIFO_in] = PORTB;                                       e:\iro_svn\opensprints\FW\user\user.c
0009e6   6aea     CLRF      0xea,0x0                                                                                        
0009e8   0f4b     ADDLW     0x4b                                                                                            
0009ea   6ee9     MOVWF     0xe9,0x0                                                                                        
0009ec   0e01     MOVLW     0x1                                                                                             
0009ee   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009f0   cf81     MOVFF     0xf81,0xfef                                                                                     
0009f2   ffef                                                                                                               
0009f4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[2][ISR_D_FIFO_in] = PORTC;                                       e:\iro_svn\opensprints\FW\user\user.c
0009f6   6aea     CLRF      0xea,0x0                                                                                        
0009f8   0f4e     ADDLW     0x4e                                                                                            
0009fa   6ee9     MOVWF     0xe9,0x0                                                                                        
0009fc   0e01     MOVLW     0x1                                                                                             
0009fe   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a00   cf82     MOVFF     0xf82,0xfef                                                                                     
000a02   ffef                                                                                                               
000a04   2a04     INCF      0x4,0x1,0x0    					ISR_D_FIFO_in++;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a06   0e03     MOVLW     0x3            					if (ISR_D_FIFO_in >= kISR_FIFO_D_DEPTH)                                     e:\iro_svn\opensprints\FW\user\user.c
000a08   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000a0a   e301     BNC       0xa0e                                                                                           
                                           					{                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a0c   6a04     CLRF      0x4,0x0        						ISR_D_FIFO_in = 0;	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a0e   2a06     INCF      0x6,0x1,0x0    					ISR_D_FIFO_length++;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a10   d002     BRA       0xa16          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              e:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the                                 e:\iro_svn\opensprints\FW\user\user.c
                                           					// timer.                                                                   e:\iro_svn\opensprints\FW\user\user.c
000a12   6a02     CLRF      0x2,0x0        					ISR_D_RepeatRate = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000a14   6a03     CLRF      0x3,0x0                                                                                         
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an A packet                                    e:\iro_svn\opensprints\FW\user\user.c
000a16   0e00     MOVLW     0x0            		if ((ISR_A_RepeatRate > 0) && (AnalogEnable > 0))                              e:\iro_svn\opensprints\FW\user\user.c
000a18   80d8     BSF       0xd8,0x0,0x0                                                                                    
000a1a   5407     SUBFWB    0x7,0x0,0x0                                                                                     
000a1c   0e00     MOVLW     0x0                                                                                             
000a1e   5408     SUBFWB    0x8,0x0,0x0                                                                                     
000a20   e219     BC        0xa54                                                                                           
000a22   500c     MOVF      0xc,0x0,0x0                                                                                     
000a24   0800     SUBLW     0x0                                                                                             
000a26   e216     BC        0xa54                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000a28   2a13     INCF      0x13,0x1,0x0   			A_tick_counter++;                                                             e:\iro_svn\opensprints\FW\user\user.c
000a2a   0e00     MOVLW     0x0                                                                                             
000a2c   2214     ADDWFC    0x14,0x1,0x0                                                                                    
000a2e   5007     MOVF      0x7,0x0,0x0    			if (A_tick_counter >= ISR_A_RepeatRate)                                       e:\iro_svn\opensprints\FW\user\user.c
000a30   5c13     SUBWF     0x13,0x0,0x0                                                                                    
000a32   5008     MOVF      0x8,0x0,0x0                                                                                     
000a34   5814     SUBWFB    0x14,0x0,0x0                                                                                    
000a36   e30e     BNC       0xa54                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000a38   6a13     CLRF      0x13,0x0       				A_tick_counter = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000a3a   6a14     CLRF      0x14,0x0                                                                                        
                                           				// Tell the main code to send an A packet                                    e:\iro_svn\opensprints\FW\user\user.c
000a3c   0e03     MOVLW     0x3            				if (ISR_A_FIFO_length < kISR_FIFO_A_DEPTH)                                   e:\iro_svn\opensprints\FW\user\user.c
000a3e   5c0b     SUBWF     0xb,0x0,0x0                                                                                     
000a40   e207     BC        0xa50                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a42   2a09     INCF      0x9,0x1,0x0    					ISR_A_FIFO_in++;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a44   0e03     MOVLW     0x3            					if (ISR_A_FIFO_in >= kISR_FIFO_A_DEPTH)                                     e:\iro_svn\opensprints\FW\user\user.c
000a46   5c09     SUBWF     0x9,0x0,0x0                                                                                     
000a48   e301     BNC       0xa4c                                                                                           
                                           					{                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a4a   6a09     CLRF      0x9,0x0        						ISR_A_FIFO_in = 0;	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a4c   2a0b     INCF      0xb,0x1,0x0    					ISR_A_FIFO_length++;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a4e   d002     BRA       0xa54          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              e:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the A                               e:\iro_svn\opensprints\FW\user\user.c
                                           					// packets.                                                                 e:\iro_svn\opensprints\FW\user\user.c
000a50   6a07     CLRF      0x7,0x0        					ISR_A_RepeatRate = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000a52   6a08     CLRF      0x8,0x0                                                                                         
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to start analog conversions                                e:\iro_svn\opensprints\FW\user\user.c
000a54   500c     MOVF      0xc,0x0,0x0    		if (AnalogEnable > 0)                                                          e:\iro_svn\opensprints\FW\user\user.c
000a56   0800     SUBLW     0x0                                                                                             
000a58   e20a     BC        0xa6e                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the channel to zero to start off with                                  e:\iro_svn\opensprints\FW\user\user.c
000a5a   6a15     CLRF      0x15,0x0       			A_cur_channel = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a5c   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            e:\iro_svn\opensprints\FW\user\user.c
000a5e   0d04     MULLW     0x4                                                                                             
000a60   28f3     INCF      0xf3,0x0,0x0                                                                                    
000a62   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Clear the interrupt                                                        e:\iro_svn\opensprints\FW\user\user.c
000a64   9c9e     BCF       0x9e,0x6,0x0   			PIR1bits.ADIF = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// And make sure to always use low priority.                                  e:\iro_svn\opensprints\FW\user\user.c
000a66   9c9f     BCF       0x9f,0x6,0x0   			IPR1bits.ADIP = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the interrupt enable                                                   e:\iro_svn\opensprints\FW\user\user.c
000a68   8c9d     BSF       0x9d,0x6,0x0   			PIE1bits.ADIE = 1;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Make sure it's on!                                                         e:\iro_svn\opensprints\FW\user\user.c
000a6a   80c2     BSF       0xc2,0x0,0x0   			ADCON0bits.ADON = 1;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// And tell the A/D to GO!                                                    e:\iro_svn\opensprints\FW\user\user.c
000a6c   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have an analog interrupt?                                              e:\iro_svn\opensprints\FW\user\user.c
000a6e   ac9e     BTFSS     0x9e,0x6,0x0   	if (PIR1bits.ADIF)                                                              e:\iro_svn\opensprints\FW\user\user.c
000a70   d02d     BRA       0xacc                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
000a72   9c9e     BCF       0x9e,0x6,0x0   		PIR1bits.ADIF = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Read out the value that we just converted, and store it.                    e:\iro_svn\opensprints\FW\user\user.c
000a8a   5015     MOVF      0x15,0x0,0x0   		ISR_A_FIFO[A_cur_channel][ISR_A_FIFO_in] =                                     e:\iro_svn\opensprints\FW\user\user.c
000a8c   0d06     MULLW     0x6                                                                                             
000a8e   cff3     MOVFF     0xff3,0x38                                                                                      
000a90   f038                                                                                                               
000a92   cff4     MOVFF     0xff4,0x39                                                                                      
000a94   f039                                                                                                               
000a96   0e00     MOVLW     0x0                                                                                             
000a98   2638     ADDWF     0x38,0x1,0x0                                                                                    
000a9a   0e01     MOVLW     0x1                                                                                             
000a9c   2239     ADDWFC    0x39,0x1,0x0                                                                                    
000a9e   5009     MOVF      0x9,0x0,0x0                                                                                     
000aa0   0d02     MULLW     0x2                                                                                             
000aa2   5038     MOVF      0x38,0x0,0x0                                                                                    
000aa4   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
000aa6   6ee9     MOVWF     0xe9,0x0                                                                                        
000aa8   5039     MOVF      0x39,0x0,0x0                                                                                    
000aaa   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
000aac   6eea     MOVWF     0xea,0x0                                                                                        
000a7e   50c3     MOVF      0xc3,0x0,0x0   			(unsigned int)ADRESL                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			|                                                                             e:\iro_svn\opensprints\FW\user\user.c
000a74   50c4     MOVF      0xc4,0x0,0x0   			((unsigned int)ADRESH << 8);                                                  e:\iro_svn\opensprints\FW\user\user.c
000a76   6e3c     MOVWF     0x3c,0x0                                                                                        
000a78   c03c     MOVFF     0x3c,0x3d                                                                                       
000a7a   f03d                                                                                                               
000a7c   6a3c     CLRF      0x3c,0x0                                                                                        
000a80   0100     MOVLB     0x0                                                                                             
000a82   103c     IORWF     0x3c,0x0,0x0                                                                                    
000a84   6e3a     MOVWF     0x3a,0x0                                                                                        
000a86   c03d     MOVFF     0x3d,0x3b                                                                                       
000a88   f03b                                                                                                               
000aae   c03a     MOVFF     0x3a,0xfee                                                                                      
000ab0   ffee                                                                                                               
000ab2   c03b     MOVFF     0x3b,0xfed                                                                                      
000ab4   ffed                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Incriment the channel and write the new one in                              e:\iro_svn\opensprints\FW\user\user.c
000ab6   2a15     INCF      0x15,0x1,0x0   		A_cur_channel++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000ab8   500c     MOVF      0xc,0x0,0x0    		if (A_cur_channel >= AnalogEnable)                                             e:\iro_svn\opensprints\FW\user\user.c
000aba   5c15     SUBWF     0x15,0x0,0x0                                                                                    
000abc   e302     BNC       0xac2                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// We're done, so just sit and wait                                           e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off our interrupts though.                                            e:\iro_svn\opensprints\FW\user\user.c
000abe   9c9d     BCF       0x9d,0x6,0x0   			PIE1bits.ADIE = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ac0   d005     BRA       0xacc          		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Update the channel number                                                  e:\iro_svn\opensprints\FW\user\user.c
000ac2   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            e:\iro_svn\opensprints\FW\user\user.c
000ac4   0d04     MULLW     0x4                                                                                             
000ac6   28f3     INCF      0xf3,0x0,0x0                                                                                    
000ac8   6ec2     MOVWF     0xc2,0x0                                                                                        
                                           			// And start the next conversion                                              e:\iro_svn\opensprints\FW\user\user.c
000aca   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a TMR0 interrupt? (RC command)                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 is in 16 bit mode, and counts up to FFFF and overflows, generating      e:\iro_svn\opensprints\FW\user\user.c
                                           	// this interrupt.                                                              e:\iro_svn\opensprints\FW\user\user.c
000acc   a4f2     BTFSS     0xf2,0x2,0x0   	if (INTCONbits.TMR0IF)                                                          e:\iro_svn\opensprints\FW\user\user.c
000ace   d042     BRA       0xb54                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off Timer0                                                             e:\iro_svn\opensprints\FW\user\user.c
000ad0   9ed5     BCF       0xd5,0x7,0x0   		T0CONbits.TMR0ON = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
000ad2   94f2     BCF       0xf2,0x2,0x0   		INTCONbits.TMR0IF = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And disable it                                                              e:\iro_svn\opensprints\FW\user\user.c
000ad4   9af2     BCF       0xf2,0x5,0x0   		INTCONbits.TMR0IE = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Only do our stuff if the pin is in the proper state                         e:\iro_svn\opensprints\FW\user\user.c
000ad6   0e04     MOVLW     0x4            		if (kTIMING == g_RC_state[g_RC_timing_ptr])                                    e:\iro_svn\opensprints\FW\user\user.c
000ad8   6e38     MOVWF     0x38,0x0                                                                                        
000ada   5010     MOVF      0x10,0x0,0x0                                                                                    
000adc   6aea     CLRF      0xea,0x0                                                                                        
000ade   0f51     ADDLW     0x51                                                                                            
000ae0   6ee9     MOVWF     0xe9,0x0                                                                                        
000ae2   0e01     MOVLW     0x1                                                                                             
000ae4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ae6   50ef     MOVF      0xef,0x0,0x0                                                                                    
000ae8   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000aea   e134     BNZ       0xb54                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// All we need to do is clear the pin and change its state to kWAITING        e:\iro_svn\opensprints\FW\user\user.c
000aec   0e08     MOVLW     0x8            			if (g_RC_timing_ptr < 8)                                                      e:\iro_svn\opensprints\FW\user\user.c
000aee   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000af0   e20d     BC        0xb0c                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000af2   0e07     MOVLW     0x7            				bitclr (LATA, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000af4   1410     ANDWF     0x10,0x0,0x0                                                                                    
000af6   6e38     MOVWF     0x38,0x0                                                                                        
000af8   0e01     MOVLW     0x1                                                                                             
000afa   5238     MOVF      0x38,0x1,0x0                                                                                    
000afc   e004     BZ        0xb06                                                                                           
000afe   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b00   0bfe     ANDLW     0xfe                                                                                            
000b02   0638     DECF      0x38,0x1,0x0                                                                                    
000b04   e1fc     BNZ       0xafe                                                                                           
000b06   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b08   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b0a   d01c     BRA       0xb44          			else if (g_RC_timing_ptr < 16)                                                e:\iro_svn\opensprints\FW\user\user.c
000b0c   0e10     MOVLW     0x10                                                                                            
000b0e   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b10   e20d     BC        0xb2c                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b12   0e07     MOVLW     0x7            				bitclr (LATB, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000b14   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b16   6e38     MOVWF     0x38,0x0                                                                                        
000b18   0e01     MOVLW     0x1                                                                                             
000b1a   5238     MOVF      0x38,0x1,0x0                                                                                    
000b1c   e004     BZ        0xb26                                                                                           
000b1e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b20   0bfe     ANDLW     0xfe                                                                                            
000b22   0638     DECF      0x38,0x1,0x0                                                                                    
000b24   e1fc     BNZ       0xb1e                                                                                           
000b26   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b28   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b2a   d00c     BRA       0xb44          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b2c   0e07     MOVLW     0x7            				bitclr (LATC, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000b2e   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b30   6e38     MOVWF     0x38,0x0                                                                                        
000b32   0e01     MOVLW     0x1                                                                                             
000b34   5238     MOVF      0x38,0x1,0x0                                                                                    
000b36   e004     BZ        0xb40                                                                                           
000b38   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b3a   0bfe     ANDLW     0xfe                                                                                            
000b3c   0638     DECF      0x38,0x1,0x0                                                                                    
000b3e   e1fc     BNZ       0xb38                                                                                           
000b40   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b42   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b44   5010     MOVF      0x10,0x0,0x0   			g_RC_state[g_RC_timing_ptr] = kWAITING;		                                     e:\iro_svn\opensprints\FW\user\user.c
000b46   6aea     CLRF      0xea,0x0                                                                                        
000b48   0f51     ADDLW     0x51                                                                                            
000b4a   6ee9     MOVWF     0xe9,0x0                                                                                        
000b4c   0e01     MOVLW     0x1                                                                                             
000b4e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b50   0e02     MOVLW     0x2                                                                                             
000b52   6eef     MOVWF     0xef,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
000b54   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000b56   cfe5     MOVFF     0xfe5,0xff4                                                                                     
000b58   fff4                                                                                                               
000b5a   cfe5     MOVFF     0xfe5,0xff3                                                                                     
000b5c   fff3                                                                                                               
000b5e   cfe5     MOVFF     0xfe5,0xfea                                                                                     
000b60   ffea                                                                                                               
000b62   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
000b64   ffe9                                                                                                               
000b66   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b68   ffda                                                                                                               
000b6a   50e5     MOVF      0xe5,0x0,0x0                                                                                    
000b6c   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
000b6e   ffe0                                                                                                               
000b70   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
000b72   ffd8                                                                                                               
000b74   0010     RETFIE    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interrupt high_ISR                                                       e:\iro_svn\opensprints\FW\user\user.c
000b76   cfda     MOVFF     0xfda,0xfe4    void high_ISR(void)                                                              e:\iro_svn\opensprints\FW\user\user.c
000b78   ffe4                                                                                                               
000b7a   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000b7c   ffda                                                                                                               
000b7e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
000b80   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000b82   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b84   ffda                                                                                                               
000b86   0011     RETFIE    0x1                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000b88   cfd9     MOVFF     0xfd9,0xfe6    void UserInit(void)                                                              e:\iro_svn\opensprints\FW\user\user.c
000b8a   ffe6                                                                                                               
000b8c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000b8e   ffd9                                                                                                               
000b90   0e02     MOVLW     0x2                                                                                             
000b92   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	char i, j;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of 3 digital inputs                                                 e:\iro_svn\opensprints\FW\user\user.c
000b94   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000b96   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   e:\iro_svn\opensprints\FW\user\user.c
000b98   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  e:\iro_svn\opensprints\FW\user\user.c
000b9a   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             e:\iro_svn\opensprints\FW\user\user.c
000b9c   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 e:\iro_svn\opensprints\FW\user\user.c
000b9e   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000ba0   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  e:\iro_svn\opensprints\FW\user\user.c
000ba2   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     e:\iro_svn\opensprints\FW\user\user.c
000ba4   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000ba6   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTC inputs                                                     e:\iro_svn\opensprints\FW\user\user.c
000ba8   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000baa   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       e:\iro_svn\opensprints\FW\user\user.c
000bac   6a8c     CLRF      0x8c,0x0       	LATD = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000bae   6895     SETF      0x95,0x0       	TRISD = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
000bb0   6a8d     CLRF      0x8d,0x0       	LATE = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000bb2   6896     SETF      0x96,0x0       	TRISE = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize LED I/Os to outputs                                                e:\iro_svn\opensprints\FW\user\user.c
000bb4   0efc     MOVLW     0xfc               mInitAllLEDs();                                                              e:\iro_svn\opensprints\FW\user\user.c
000bb6   168b     ANDWF     0x8b,0x1,0x0                                                                                    
000bb8   0efc     MOVLW     0xfc                                                                                            
000bba   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           	// Initalize switch as an input                                                 e:\iro_svn\opensprints\FW\user\user.c
000bbc   8494     BSF       0x94,0x2,0x0       mInitSwitch();                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Start off always using "OK" acknoledge.                                      e:\iro_svn\opensprints\FW\user\user.c
000bbe   0101     MOVLB     0x1            	g_ack_enable = TRUE;                                                            e:\iro_svn\opensprints\FW\user\user.c
000bc0   0e01     MOVLW     0x1                                                                                             
000bc2   6fa6     MOVWF     0xa6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Use our own special output function for STDOUT                               e:\iro_svn\opensprints\FW\user\user.c
000bc4   0101     MOVLB     0x1            	stdout = _H_USER;                                                               e:\iro_svn\opensprints\FW\user\user.c
000bc6   69f0     SETF      0xf0,0x1                                                                                        
000bc8   69f1     SETF      0xf1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               e:\iro_svn\opensprints\FW\user\user.c
000bca   6a0a     CLRF      0xa,0x0            ISR_A_FIFO_out = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000bcc   6a09     CLRF      0x9,0x0            ISR_A_FIFO_in = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bce   6a0b     CLRF      0xb,0x0            ISR_A_FIFO_length = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000bd0   6a05     CLRF      0x5,0x0            ISR_D_FIFO_out = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000bd2   6a04     CLRF      0x4,0x0            ISR_D_FIFO_in = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bd4   6a06     CLRF      0x6,0x0            ISR_D_FIFO_length = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           e:\iro_svn\opensprints\FW\user\user.c
000bd6   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bd8   6a03     CLRF      0x3,0x0                                                                                         
000bda   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bdc   6a08     CLRF      0x8,0x0                                                                                         
000bde   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000be0   6a12     CLRF      0x12,0x0                                                                                        
000be2   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000be4   6a14     CLRF      0x14,0x0                                                                                        
000be6   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                               // Now init our registers                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	// The prescaler will be at 16                                                  e:\iro_svn\opensprints\FW\user\user.c
000be8   82ca     BSF       0xca,0x1,0x0       T2CONbits.T2CKPS1 = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
000bea   80ca     BSF       0xca,0x0,0x0       T2CONbits.T2CKPS0 = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                               // We want the TMR2 post scaler to be a 3                                    e:\iro_svn\opensprints\FW\user\user.c
000bec   9cca     BCF       0xca,0x6,0x0       T2CONbits.T2OUTPS3 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
000bee   9aca     BCF       0xca,0x5,0x0       T2CONbits.T2OUTPS2 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
000bf0   88ca     BSF       0xca,0x4,0x0       T2CONbits.T2OUTPS1 = 1;                                                      e:\iro_svn\opensprints\FW\user\user.c
000bf2   96ca     BCF       0xca,0x3,0x0       T2CONbits.T2OUTPS0 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	// Set our reload value                                                         e:\iro_svn\opensprints\FW\user\user.c
000bf4   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              e:\iro_svn\opensprints\FW\user\user.c
000bf6   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Set up the Analog to Digital converter                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the FIFO data                                                      e:\iro_svn\opensprints\FW\user\user.c
000bf8   6adf     CLRF      0xdf,0x0       	for (i = 0; i < 12; i++)                                                        e:\iro_svn\opensprints\FW\user\user.c
000bfa   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000bfc   f02a                                                                                                               
000bfe   0e0c     MOVLW     0xc                                                                                             
000c00   6ee7     MOVWF     0xe7,0x0                                                                                        
000c02   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c04   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c06   d002     BRA       0xc0c                                                                                           
000c08   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c0a   d002     BRA       0xc10                                                                                           
000c0c   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c0e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c10   e238     BC        0xc82                                                                                           
000c7e   2adf     INCF      0xdf,0x1,0x0                                                                                    
000c80   d7bc     BRA       0xbfa                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000c12   0e01     MOVLW     0x1            		for (j = 0; j < kISR_FIFO_A_DEPTH; j++)                                        e:\iro_svn\opensprints\FW\user\user.c
000c14   6adb     CLRF      0xdb,0x0                                                                                        
000c16   0e01     MOVLW     0x1                                                                                             
000c18   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000c1a   f02a                                                                                                               
000c1c   0e03     MOVLW     0x3                                                                                             
000c1e   6ee7     MOVWF     0xe7,0x0                                                                                        
000c20   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c22   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c24   d002     BRA       0xc2a                                                                                           
000c26   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c28   d002     BRA       0xc2e                                                                                           
000c2a   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c2c   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c2e   e227     BC        0xc7e                                                                                           
000c78   0e01     MOVLW     0x1                                                                                             
000c7a   2adb     INCF      0xdb,0x1,0x0                                                                                    
000c7c   d7cc     BRA       0xc16                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000c30   cfdf     MOVFF     0xfdf,0x2a     			ISR_A_FIFO[i][j] = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000c32   f02a                                                                                                               
000c34   6a2b     CLRF      0x2b,0x0                                                                                        
000c36   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000c38   682b     SETF      0x2b,0x0                                                                                        
000c3a   0e06     MOVLW     0x6                                                                                             
000c3c   022b     MULWF     0x2b,0x0                                                                                        
000c3e   cff3     MOVFF     0xff3,0x2b                                                                                      
000c40   f02b                                                                                                               
000c42   0e06     MOVLW     0x6                                                                                             
000c44   022a     MULWF     0x2a,0x0                                                                                        
000c46   cff3     MOVFF     0xff3,0x2a                                                                                      
000c48   f02a                                                                                                               
000c4a   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000c4c   262b     ADDWF     0x2b,0x1,0x0                                                                                    
000c4e   0e00     MOVLW     0x0                                                                                             
000c50   262a     ADDWF     0x2a,0x1,0x0                                                                                    
000c52   0e01     MOVLW     0x1                                                                                             
000c54   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
000c56   0e01     MOVLW     0x1                                                                                             
000c58   cfdb     MOVFF     0xfdb,0x2c                                                                                      
000c5a   f02c                                                                                                               
000c5c   6a2d     CLRF      0x2d,0x0                                                                                        
000c5e   be2c     BTFSC     0x2c,0x7,0x0                                                                                    
000c60   682d     SETF      0x2d,0x0                                                                                        
000c62   90d8     BCF       0xd8,0x0,0x0                                                                                    
000c64   362c     RLCF      0x2c,0x1,0x0                                                                                    
000c66   362d     RLCF      0x2d,0x1,0x0                                                                                    
000c68   502a     MOVF      0x2a,0x0,0x0                                                                                    
000c6a   242c     ADDWF     0x2c,0x0,0x0                                                                                    
000c6c   6ee9     MOVWF     0xe9,0x0                                                                                        
000c6e   502b     MOVF      0x2b,0x0,0x0                                                                                    
000c70   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
000c72   6eea     MOVWF     0xea,0x0                                                                                        
000c74   6aee     CLRF      0xee,0x0                                                                                        
000c76   6aed     CLRF      0xed,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // Inialize USB TX and RX buffer management                                  e:\iro_svn\opensprints\FW\user\user.c
000c82   0101     MOVLB     0x1                g_RX_buf_in = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000c84   6ba0     CLRF      0xa0,0x1                                                                                        
000c86   0101     MOVLB     0x1                g_RX_buf_out = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000c88   6ba1     CLRF      0xa1,0x1                                                                                        
000c8a   0101     MOVLB     0x1            	g_TX_buf_in = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
000c8c   6b9e     CLRF      0x9e,0x1                                                                                        
000c8e   0101     MOVLB     0x1            	g_TX_buf_out = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000c90   6b9f     CLRF      0x9f,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// And the USART TX and RX buffer management                                    e:\iro_svn\opensprints\FW\user\user.c
000c92   0101     MOVLB     0x1            	g_USART_RX_buf_in = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000c94   6ba2     CLRF      0xa2,0x1                                                                                        
000c96   0101     MOVLB     0x1            	g_USART_RX_buf_out = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000c98   6ba3     CLRF      0xa3,0x1                                                                                        
000c9a   0101     MOVLB     0x1            	g_USART_TX_buf_in = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000c9c   6ba4     CLRF      0xa4,0x1                                                                                        
000c9e   0101     MOVLB     0x1            	g_USART_TX_buf_out = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000ca0   6ba5     CLRF      0xa5,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the RC servo output pointer values                                 e:\iro_svn\opensprints\FW\user\user.c
000ca2   6a0e     CLRF      0xe,0x0        	g_RC_primed_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000ca4   6a0f     CLRF      0xf,0x0        	g_RC_next_ptr = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
000ca6   6a10     CLRF      0x10,0x0       	g_RC_timing_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear the RC data structure                                                  e:\iro_svn\opensprints\FW\user\user.c
000ca8   6adf     CLRF      0xdf,0x0       	for (i = 0; i < kRC_DATA_SIZE; i++)                                             e:\iro_svn\opensprints\FW\user\user.c
000caa   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000cac   f02a                                                                                                               
000cae   0e18     MOVLW     0x18                                                                                            
000cb0   6ee7     MOVWF     0xe7,0x0                                                                                        
000cb2   182a     XORWF     0x2a,0x0,0x0                                                                                    
000cb4   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000cb6   d002     BRA       0xcbc                                                                                           
000cb8   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000cba   d002     BRA       0xcc0                                                                                           
000cbc   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000cbe   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000cc0   e21b     BC        0xcf8                                                                                           
000cf4   2adf     INCF      0xdf,0x1,0x0                                                                                    
000cf6   d7d9     BRA       0xcaa                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000cc2   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_value[i] = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000cc4   ffe9                                                                                                               
000cc6   6aea     CLRF      0xea,0x0                                                                                        
000cc8   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000cca   68ea     SETF      0xea,0x0                                                                                        
000ccc   90d8     BCF       0xd8,0x0,0x0                                                                                    
000cce   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000cd0   36ea     RLCF      0xea,0x1,0x0                                                                                    
000cd2   0e69     MOVLW     0x69                                                                                            
000cd4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000cd6   0e01     MOVLW     0x1                                                                                             
000cd8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cda   6aee     CLRF      0xee,0x0                                                                                        
000cdc   6aed     CLRF      0xed,0x0                                                                                        
000cde   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_state[i] = kOFF;                                                          e:\iro_svn\opensprints\FW\user\user.c
000ce0   ffe9                                                                                                               
000ce2   6aea     CLRF      0xea,0x0                                                                                        
000ce4   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000ce6   68ea     SETF      0xea,0x0                                                                                        
000ce8   0e51     MOVLW     0x51                                                                                            
000cea   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000cec   0e01     MOVLW     0x1                                                                                             
000cee   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cf0   0e01     MOVLW     0x1                                                                                             
000cf2   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Enable TMR0 for our RC timing operation                                      e:\iro_svn\opensprints\FW\user\user.c
000cf8   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;		// Do NOT use the prescaler                                 e:\iro_svn\opensprints\FW\user\user.c
000cfa   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;		// Use internal clock                                      e:\iro_svn\opensprints\FW\user\user.c
000cfc   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           e:\iro_svn\opensprints\FW\user\user.c
000cfe   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              e:\iro_svn\opensprints\FW\user\user.c
000d00   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        e:\iro_svn\opensprints\FW\user\user.c
000d02   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // Enable interrupt priorities                                               e:\iro_svn\opensprints\FW\user\user.c
000d04   8ed0     BSF       0xd0,0x7,0x0       RCONbits.IPEN = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
000d06   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d08   829d     BSF       0x9d,0x1,0x0       PIE1bits.TMR2IE = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
000d0a   929f     BCF       0x9f,0x1,0x0       IPR1bits.TMR2IP = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d0c   8ef2     BSF       0xf2,0x7,0x0       INTCONbits.GIEH = 1;	// Turn high priority interrupts on                     e:\iro_svn\opensprints\FW\user\user.c
000d0e   8cf2     BSF       0xf2,0x6,0x0       INTCONbits.GIEL = 1;	// Turn low priority interrupts on                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn on the Timer2                                                           e:\iro_svn\opensprints\FW\user\user.c
000d10   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d12   0e02     MOVLW     0x2            }//end UserInit                                                                  e:\iro_svn\opensprints\FW\user\user.c
000d14   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000d16   e202     BC        0xd1c                                                                                           
000d18   6ae1     CLRF      0xe1,0x0                                                                                        
000d1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d1c   6ee1     MOVWF     0xe1,0x0                                                                                        
000d1e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d20   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000d22   ffd9                                                                                                               
000d24   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void ProcessIO(void)                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        In this function, we check for a new packet that just        e:\iro_svn\opensprints\FW\user\user.c
                                            * 					arrived via USB. We do a few checks on the packet to see                 e:\iro_svn\opensprints\FW\user\user.c
                                            *					if it is worthy of us trying to interpret it. If it is,                   e:\iro_svn\opensprints\FW\user\user.c
                                            *					we go and call the proper function based upon the first                   e:\iro_svn\opensprints\FW\user\user.c
                                            *					character of the packet.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					NOTE: We need to see everything in one packet (i.e. we                    e:\iro_svn\opensprints\FW\user\user.c
                                            *					won't treat the USB data as a stream and try to find our                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					start and end of packets within the stream. We just look                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					at the first character of each packet for a command and                   e:\iro_svn\opensprints\FW\user\user.c
                                            * 					check that there's a CR as the last character of the                     e:\iro_svn\opensprints\FW\user\user.c
                                            *					packet.                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
000d26   cfd9     MOVFF     0xfd9,0xfe6    void ProcessIO(void)                                                             e:\iro_svn\opensprints\FW\user\user.c
000d28   ffe6                                                                                                               
000d2a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000d2c   ffd9                                                                                                               
000d2e   0e02     MOVLW     0x2                                                                                             
000d30   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	static BOOL in_cr = FALSE;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	static byte last_fifo_size;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                               unsigned char tst_char;                                                      e:\iro_svn\opensprints\FW\user\user.c
000d32   0e01     MOVLW     0x1            	BOOL	got_full_packet = FALSE;                                                   e:\iro_svn\opensprints\FW\user\user.c
000d34   6adb     CLRF      0xdb,0x0                                                                                        
000d36   0101     MOVLB     0x1            	cdc_rx_len = 0;                                                                 e:\iro_svn\opensprints\FW\user\user.c
000d38   6bb6     CLRF      0xb6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d3a   ec0f     CALL      0x281e,0x0     	BlinkUSBStatus();                                                               e:\iro_svn\opensprints\FW\user\user.c
000d3c   f014                                                                                                               
000d3e   ec82     CALL      0x2904,0x0     	HallEffSensors();	// Function by Luke Orland in user.c                          e:\iro_svn\opensprints\FW\user\user.c
000d40   f014                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // User Application USB tasks                                                e:\iro_svn\opensprints\FW\user\user.c
000d42   0e06     MOVLW     0x6                if((usb_device_state < CONFIGURED_STATE) || (UCONbits.SUSPND == 1))          e:\iro_svn\opensprints\FW\user\user.c
000d44   0101     MOVLB     0x1                                                                                             
000d46   5dea     SUBWF     0xea,0x0,0x1                                                                                    
000d48   e303     BNC       0xd50                                                                                           
000d4a   506d     MOVF      0x6d,0x0,0x0                                                                                    
000d4c   0b02     ANDLW     0x2                                                                                             
000d4e   e001     BZ        0xd52                                                                                           
                                           	{	                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d50   d105     BRA       0xf5c          		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any new I packets (from T command) ready to go out                 e:\iro_svn\opensprints\FW\user\user.c
000d52   5006     MOVF      0x6,0x0,0x0    	while (ISR_D_FIFO_length > 0)                                                   e:\iro_svn\opensprints\FW\user\user.c
000d54   0800     SUBLW     0x0                                                                                             
000d56   e209     BC        0xd6a                                                                                           
000d68   d7f4     BRA       0xd52                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an I packet first                                                  e:\iro_svn\opensprints\FW\user\user.c
000d58   ec49     CALL      0x1692,0x0     		parse_I_packet ();                                                             e:\iro_svn\opensprints\FW\user\user.c
000d5a   f00b                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then upate our I packet fifo stuff                                          e:\iro_svn\opensprints\FW\user\user.c
000d5c   2a05     INCF      0x5,0x1,0x0    		ISR_D_FIFO_out++;                                                              e:\iro_svn\opensprints\FW\user\user.c
000d5e   0e03     MOVLW     0x3            		if (ISR_D_FIFO_out == kISR_FIFO_D_DEPTH)                                       e:\iro_svn\opensprints\FW\user\user.c
000d60   5c05     SUBWF     0x5,0x0,0x0                                                                                     
000d62   e101     BNZ       0xd66                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d64   6a05     CLRF      0x5,0x0        			ISR_D_FIFO_out = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d66   0606     DECF      0x6,0x1,0x0    		ISR_D_FIFO_length--;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for a new A packet (from T command) ready to go out                    e:\iro_svn\opensprints\FW\user\user.c
000d6a   500b     MOVF      0xb,0x0,0x0    	while (ISR_A_FIFO_length > 0)                                                   e:\iro_svn\opensprints\FW\user\user.c
000d6c   0800     SUBLW     0x0                                                                                             
000d6e   e209     BC        0xd82                                                                                           
000d80   d7f4     BRA       0xd6a                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an A packet first                                                  e:\iro_svn\opensprints\FW\user\user.c
000d70   ec7b     CALL      0x16f6,0x0     		parse_A_packet ();                                                             e:\iro_svn\opensprints\FW\user\user.c
000d72   f00b                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then update our A packet fifo stuff                                         e:\iro_svn\opensprints\FW\user\user.c
000d74   2a0a     INCF      0xa,0x1,0x0    		ISR_A_FIFO_out++;                                                              e:\iro_svn\opensprints\FW\user\user.c
000d76   0e03     MOVLW     0x3            		if (ISR_A_FIFO_out == kISR_FIFO_A_DEPTH)                                       e:\iro_svn\opensprints\FW\user\user.c
000d78   5c0a     SUBWF     0xa,0x0,0x0                                                                                     
000d7a   e101     BNZ       0xd7e                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d7c   6a0a     CLRF      0xa,0x0        			ISR_A_FIFO_out = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d7e   060b     DECF      0xb,0x1,0x0    		ISR_A_FIFO_length--;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Pull in some new data if there is new data to pull in                        e:\iro_svn\opensprints\FW\user\user.c
000d82   0104     MOVLB     0x4            	if(!mCDCUsartRxIsBusy())                                                        e:\iro_svn\opensprints\FW\user\user.c
000d84   bf18     BTFSC     0x18,0x7,0x1                                                                                    
000d86   d065     BRA       0xe52                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Copy data from dual-ram buffer to user's buffer                             e:\iro_svn\opensprints\FW\user\user.c
000d88   0101     MOVLB     0x1            		for(cdc_rx_len = 0; cdc_rx_len < CDC_BULK_BD_OUT.Cnt; cdc_rx_len++)            e:\iro_svn\opensprints\FW\user\user.c
000d8a   6bb6     CLRF      0xb6,0x1                                                                                        
000d8c   0104     MOVLB     0x4                                                                                             
000d8e   5119     MOVF      0x19,0x0,0x1                                                                                    
000d90   0101     MOVLB     0x1                                                                                             
000d92   5db6     SUBWF     0xb6,0x0,0x1                                                                                    
000d94   e253     BC        0xe3c                                                                                           
000e36   0101     MOVLB     0x1                                                                                             
000e38   2bb6     INCF      0xb6,0x1,0x1                                                                                    
000e3a   d7a8     BRA       0xd8c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Check to see if we are in a CR/LF situation                                e:\iro_svn\opensprints\FW\user\user.c
000d96   0101     MOVLB     0x1            			tst_char = cdc_data_rx[cdc_rx_len];                                           e:\iro_svn\opensprints\FW\user\user.c
000d98   51b6     MOVF      0xb6,0x0,0x1                                                                                    
000d9a   6aea     CLRF      0xea,0x0                                                                                        
000d9c   0f08     ADDLW     0x8                                                                                             
000d9e   6ee9     MOVWF     0xe9,0x0                                                                                        
000da0   0e05     MOVLW     0x5                                                                                             
000da2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000da4   cfef     MOVFF     0xfef,0xfdf                                                                                     
000da6   ffdf                                                                                                               
                                           			if (                                                                          e:\iro_svn\opensprints\FW\user\user.c
000da8   0101     MOVLB     0x1            				!in_cr                                                                       e:\iro_svn\opensprints\FW\user\user.c
000daa   51d9     MOVF      0xd9,0x0,0x1                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           				(                                                                            e:\iro_svn\opensprints\FW\user\user.c
000dae   0e0d     MOVLW     0xd            					kCR == tst_char                                                             e:\iro_svn\opensprints\FW\user\user.c
000db0   6e2a     MOVWF     0x2a,0x0                                                                                        
000db2   50df     MOVF      0xdf,0x0,0x0                                                                                    
000db4   5c2a     SUBWF     0x2a,0x0,0x0   					||                                                                          e:\iro_svn\opensprints\FW\user\user.c
000db8   0e0a     MOVLW     0xa            					kLF == tst_char                                                             e:\iro_svn\opensprints\FW\user\user.c
000dba   6e2b     MOVWF     0x2b,0x0                                                                                        
000dbc   50df     MOVF      0xdf,0x0,0x0                                                                                    
000db6   e005     BZ        0xdc2          				)                                                                            e:\iro_svn\opensprints\FW\user\user.c
000dbe   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
000dc0   e112     BNZ       0xde6                                                                                           
000dac   e11c     BNZ       0xde6          			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000dc2   0101     MOVLB     0x1            				in_cr = TRUE;                                                                e:\iro_svn\opensprints\FW\user\user.c
000dc4   0e01     MOVLW     0x1                                                                                             
000dc6   6fd9     MOVWF     0xd9,0x1                                                                                        
000dc8   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = kCR;                                                 e:\iro_svn\opensprints\FW\user\user.c
000dca   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000dcc   6aea     CLRF      0xea,0x0                                                                                        
000dce   0f40     ADDLW     0x40                                                                                            
000dd0   6ee9     MOVWF     0xe9,0x0                                                                                        
000dd2   0e02     MOVLW     0x2                                                                                             
000dd4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000dd6   0e0d     MOVLW     0xd                                                                                             
000dd8   6eef     MOVWF     0xef,0x0                                                                                        
000dda   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000ddc   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           				// At this point, we know we have a full packet                              e:\iro_svn\opensprints\FW\user\user.c
                                           				// of information from the PC to parse                                       e:\iro_svn\opensprints\FW\user\user.c
000dde   52de     MOVF      0xde,0x1,0x0   				got_full_packet = TRUE;                                                      e:\iro_svn\opensprints\FW\user\user.c
000de0   0e01     MOVLW     0x1                                                                                             
000de2   6edd     MOVWF     0xdd,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000de4   d015     BRA       0xe10          			else if (                                                                     e:\iro_svn\opensprints\FW\user\user.c
000de6   0e0d     MOVLW     0xd            				tst_char != kCR                                                              e:\iro_svn\opensprints\FW\user\user.c
000de8   5cdf     SUBWF     0xdf,0x0,0x0   				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
000dec   0e0a     MOVLW     0xa            				tst_char != kLF                                                              e:\iro_svn\opensprints\FW\user\user.c
000dea   e011     BZ        0xe0e          			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
000dee   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
000df0   e00e     BZ        0xe0e                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Only add a byte if it is not a CR or LF                                   e:\iro_svn\opensprints\FW\user\user.c
000df2   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = tst_char;                                            e:\iro_svn\opensprints\FW\user\user.c
000df4   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000df6   6aea     CLRF      0xea,0x0                                                                                        
000df8   0f40     ADDLW     0x40                                                                                            
000dfa   6ee9     MOVWF     0xe9,0x0                                                                                        
000dfc   0e02     MOVLW     0x2                                                                                             
000dfe   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000e00   cfdf     MOVFF     0xfdf,0xfef                                                                                     
000e02   ffef                                                                                                               
000e04   0101     MOVLB     0x1            				in_cr = FALSE;                                                               e:\iro_svn\opensprints\FW\user\user.c
000e06   6bd9     CLRF      0xd9,0x1                                                                                        
000e08   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000e0a   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e0c   d001     BRA       0xe10          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e0e   d013     BRA       0xe36          				continue;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// Check for buffer wraparound                                                e:\iro_svn\opensprints\FW\user\user.c
000e10   0e40     MOVLW     0x40           			if (kRX_BUF_SIZE == g_RX_buf_in)                                              e:\iro_svn\opensprints\FW\user\user.c
000e12   0101     MOVLB     0x1                                                                                             
000e14   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e16   e102     BNZ       0xe1c                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e18   0101     MOVLB     0x1            				g_RX_buf_in = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000e1a   6ba0     CLRF      0xa0,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// If we hit the out pointer, then this is bad.                               e:\iro_svn\opensprints\FW\user\user.c
000e1c   0101     MOVLB     0x1            			if (g_RX_buf_in == g_RX_buf_out)                                              e:\iro_svn\opensprints\FW\user\user.c
000e1e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000e20   0101     MOVLB     0x1                                                                                             
000e22   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e24   e102     BNZ       0xe2a                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e26   860d     BSF       0xd,0x3,0x0    				bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);                          e:\iro_svn\opensprints\FW\user\user.c
000e28   d009     BRA       0xe3c          				break;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now, if we've gotten a full command (user send <CR>) then                  e:\iro_svn\opensprints\FW\user\user.c
                                           			// go call the code that deals with that command, and then                    e:\iro_svn\opensprints\FW\user\user.c
                                           			// keep parsing. (This allows multiple small commands per packet)             e:\iro_svn\opensprints\FW\user\user.c
000e2a   0e01     MOVLW     0x1            			if (got_full_packet)                                                          e:\iro_svn\opensprints\FW\user\user.c
000e2c   50db     MOVF      0xdb,0x0,0x0                                                                                    
000e2e   e003     BZ        0xe36                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e30   d915     RCALL     0x105c         				parse_packet ();                                                             e:\iro_svn\opensprints\FW\user\user.c
000e32   0e01     MOVLW     0x1            				got_full_packet = FALSE;                                                     e:\iro_svn\opensprints\FW\user\user.c
000e34   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Prepare dual-ram buffer for next OUT transaction                            e:\iro_svn\opensprints\FW\user\user.c
000e3c   0104     MOVLB     0x4            		CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                                     e:\iro_svn\opensprints\FW\user\user.c
000e3e   0e40     MOVLW     0x40                                                                                            
000e40   6f19     MOVWF     0x19,0x1                                                                                        
000e42   0e40     MOVLW     0x40           		mUSBBufferReady(CDC_BULK_BD_OUT);                                              e:\iro_svn\opensprints\FW\user\user.c
000e44   0104     MOVLB     0x4                                                                                             
000e46   1718     ANDWF     0x18,0x1,0x1                                                                                    
000e48   0104     MOVLB     0x4                                                                                             
000e4a   7d18     BTG       0x18,0x6,0x1                                                                                    
000e4c   0e88     MOVLW     0x88                                                                                            
000e4e   0104     MOVLB     0x4                                                                                             
000e50   1318     IORWF     0x18,0x1,0x1                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any errors logged in error_byte that need to be sent out           e:\iro_svn\opensprints\FW\user\user.c
000e52   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
000e54   e101     BNZ       0xe58                                                                                           
000e56   d081     BRA       0xf5a                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000e58   a00d     BTFSS     0xd,0x0,0x0    		if (bittst (error_byte, 0))                                                    e:\iro_svn\opensprints\FW\user\user.c
000e5a   d010     BRA       0xe7c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           e:\iro_svn\opensprints\FW\user\user.c
000e5c   0e9d     MOVLW     0x9d           			printf ((rom char *)"!0 \r\n");                                               e:\iro_svn\opensprints\FW\user\user.c
000e5e   6e2a     MOVWF     0x2a,0x0                                                                                        
000e60   0e43     MOVLW     0x43                                                                                            
000e62   6e2b     MOVWF     0x2b,0x0                                                                                        
000e64   6a2c     CLRF      0x2c,0x0                                                                                        
000e66   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e68   ffe6                                                                                                               
000e6a   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e6c   ffe6                                                                                                               
000e6e   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e70   ffe6                                                                                                               
000e72   ecfe     CALL      0x45fc,0x0                                                                                      
000e74   f022                                                                                                               
000e76   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e78   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e7a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000e7c   a20d     BTFSS     0xd,0x1,0x0    		if (bittst (error_byte, 1))                                                    e:\iro_svn\opensprints\FW\user\user.c
000e7e   d010     BRA       0xea0                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           e:\iro_svn\opensprints\FW\user\user.c
000e80   0e97     MOVLW     0x97           			printf ((rom char *)"!1 \r\n");                                               e:\iro_svn\opensprints\FW\user\user.c
000e82   6e2a     MOVWF     0x2a,0x0                                                                                        
000e84   0e43     MOVLW     0x43                                                                                            
000e86   6e2b     MOVWF     0x2b,0x0                                                                                        
000e88   6a2c     CLRF      0x2c,0x0                                                                                        
000e8a   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e8c   ffe6                                                                                                               
000e8e   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e90   ffe6                                                                                                               
000e92   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e94   ffe6                                                                                                               
000e96   ecfe     CALL      0x45fc,0x0                                                                                      
000e98   f022                                                                                                               
000e9a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e9c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e9e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ea0   a40d     BTFSS     0xd,0x2,0x0    		if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))                           e:\iro_svn\opensprints\FW\user\user.c
000ea2   d010     BRA       0xec4                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ea4   0e7b     MOVLW     0x7b           			printf ((rom char *)"!2 Err: TX Buffer overrun\r\n");                         e:\iro_svn\opensprints\FW\user\user.c
000ea6   6e2a     MOVWF     0x2a,0x0                                                                                        
000ea8   0e43     MOVLW     0x43                                                                                            
000eaa   6e2b     MOVWF     0x2b,0x0                                                                                        
000eac   6a2c     CLRF      0x2c,0x0                                                                                        
000eae   c02a     MOVFF     0x2a,0xfe6                                                                                      
000eb0   ffe6                                                                                                               
000eb2   c02b     MOVFF     0x2b,0xfe6                                                                                      
000eb4   ffe6                                                                                                               
000eb6   c02c     MOVFF     0x2c,0xfe6                                                                                      
000eb8   ffe6                                                                                                               
000eba   ecfe     CALL      0x45fc,0x0                                                                                      
000ebc   f022                                                                                                               
000ebe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ec0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ec2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ec4   a60d     BTFSS     0xd,0x3,0x0    		if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))                        e:\iro_svn\opensprints\FW\user\user.c
000ec6   d010     BRA       0xee8                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ec8   0e5f     MOVLW     0x5f           			printf ((rom char *)"!3 Err: RX Buffer overrun\r\n");                         e:\iro_svn\opensprints\FW\user\user.c
000eca   6e2a     MOVWF     0x2a,0x0                                                                                        
000ecc   0e43     MOVLW     0x43                                                                                            
000ece   6e2b     MOVWF     0x2b,0x0                                                                                        
000ed0   6a2c     CLRF      0x2c,0x0                                                                                        
000ed2   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ed4   ffe6                                                                                                               
000ed6   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ed8   ffe6                                                                                                               
000eda   c02c     MOVFF     0x2c,0xfe6                                                                                      
000edc   ffe6                                                                                                               
000ede   ecfe     CALL      0x45fc,0x0                                                                                      
000ee0   f022                                                                                                               
000ee2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ee4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ee6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ee8   a80d     BTFSS     0xd,0x4,0x0    		if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))                        e:\iro_svn\opensprints\FW\user\user.c
000eea   d010     BRA       0xf0c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000eec   0e40     MOVLW     0x40           			printf ((rom char *)"!4 Err: Missing parameter(s)\r\n");                      e:\iro_svn\opensprints\FW\user\user.c
000eee   6e2a     MOVWF     0x2a,0x0                                                                                        
000ef0   0e43     MOVLW     0x43                                                                                            
000ef2   6e2b     MOVWF     0x2b,0x0                                                                                        
000ef4   6a2c     CLRF      0x2c,0x0                                                                                        
000ef6   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ef8   ffe6                                                                                                               
000efa   c02b     MOVFF     0x2b,0xfe6                                                                                      
000efc   ffe6                                                                                                               
000efe   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f00   ffe6                                                                                                               
000f02   ecfe     CALL      0x45fc,0x0                                                                                      
000f04   f022                                                                                                               
000f06   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f08   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f0a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f0c   aa0d     BTFSS     0xd,0x5,0x0    		if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))                            e:\iro_svn\opensprints\FW\user\user.c
000f0e   d000     BRA       0xf10                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// We don't need to do anything since something has already been printed out  e:\iro_svn\opensprints\FW\user\user.c
                                           			//printf ((rom char *)"!5\r\n");                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f10   ac0d     BTFSS     0xd,0x6,0x0    		if (bittst (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT))                  e:\iro_svn\opensprints\FW\user\user.c
000f12   d010     BRA       0xf34                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f14   0e1f     MOVLW     0x1f           			printf ((rom char *)"!6 Err: Invalid paramter value\r\n");                    e:\iro_svn\opensprints\FW\user\user.c
000f16   6e2a     MOVWF     0x2a,0x0                                                                                        
000f18   0e43     MOVLW     0x43                                                                                            
000f1a   6e2b     MOVWF     0x2b,0x0                                                                                        
000f1c   6a2c     CLRF      0x2c,0x0                                                                                        
000f1e   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f20   ffe6                                                                                                               
000f22   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f24   ffe6                                                                                                               
000f26   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f28   ffe6                                                                                                               
000f2a   ecfe     CALL      0x45fc,0x0                                                                                      
000f2c   f022                                                                                                               
000f2e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f30   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f34   ae0d     BTFSS     0xd,0x7,0x0    		if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))                         e:\iro_svn\opensprints\FW\user\user.c
000f36   d010     BRA       0xf58                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f38   0e06     MOVLW     0x6            			printf ((rom char *)"!7 Err: Extra parmater\r\n");                            e:\iro_svn\opensprints\FW\user\user.c
000f3a   6e2a     MOVWF     0x2a,0x0                                                                                        
000f3c   0e43     MOVLW     0x43                                                                                            
000f3e   6e2b     MOVWF     0x2b,0x0                                                                                        
000f40   6a2c     CLRF      0x2c,0x0                                                                                        
000f42   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f44   ffe6                                                                                                               
000f46   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f48   ffe6                                                                                                               
000f4a   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f4c   ffe6                                                                                                               
000f4e   ecfe     CALL      0x45fc,0x0                                                                                      
000f50   f022                                                                                                               
000f52   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f54   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f56   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f58   6a0d     CLRF      0xd,0x0        		error_byte = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Go send any data that needs sending to PC                                    e:\iro_svn\opensprints\FW\user\user.c
000f5a   d835     RCALL     0xfc6          	check_and_send_TX_data ();                                                      e:\iro_svn\opensprints\FW\user\user.c
000f5c   0e02     MOVLW     0x2            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000f5e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000f60   e202     BC        0xf66                                                                                           
000f62   6ae1     CLRF      0xe1,0x0                                                                                        
000f64   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f66   6ee1     MOVWF     0xe1,0x0                                                                                        
000f68   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f6a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000f6c   ffd9                                                                                                               
000f6e   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // This is our replacement for the standard putc routine                         e:\iro_svn\opensprints\FW\user\user.c
                                           // This enables printf() and all related functions to print to                   e:\iro_svn\opensprints\FW\user\user.c
                                           // the UBS output (i.e. to the PC) buffer                                        e:\iro_svn\opensprints\FW\user\user.c
000f70   cfd9     MOVFF     0xfd9,0xfe6    int _user_putc (char c)                                                          e:\iro_svn\opensprints\FW\user\user.c
000f72   ffe6                                                                                                               
000f74   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000f76   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy the character into the output buffer                                    e:\iro_svn\opensprints\FW\user\user.c
000f78   0101     MOVLB     0x1            	g_TX_buf[g_TX_buf_in] = c;                                                      e:\iro_svn\opensprints\FW\user\user.c
000f7a   519e     MOVF      0x9e,0x0,0x1                                                                                    
000f7c   6aea     CLRF      0xea,0x0                                                                                        
000f7e   0f00     ADDLW     0x0                                                                                             
000f80   6ee9     MOVWF     0xe9,0x0                                                                                        
000f82   0e02     MOVLW     0x2                                                                                             
000f84   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000f86   0efe     MOVLW     0xfe                                                                                            
000f88   cfdb     MOVFF     0xfdb,0xfef                                                                                     
000f8a   ffef                                                                                                               
000f8c   0101     MOVLB     0x1            	g_TX_buf_in++;                                                                  e:\iro_svn\opensprints\FW\user\user.c
000f8e   2b9e     INCF      0x9e,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for wrap around                                                        e:\iro_svn\opensprints\FW\user\user.c
000f90   0e40     MOVLW     0x40           	if (kTX_BUF_SIZE == g_TX_buf_in)                                                e:\iro_svn\opensprints\FW\user\user.c
000f92   0101     MOVLB     0x1                                                                                             
000f94   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000f96   e102     BNZ       0xf9c                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000f98   0101     MOVLB     0x1            		g_TX_buf_in = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000f9a   6b9e     CLRF      0x9e,0x1                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Also check to see if we bumpted up against our output pointer                e:\iro_svn\opensprints\FW\user\user.c
000f9c   0101     MOVLB     0x1            	if (g_TX_buf_in == g_TX_buf_out)                                                e:\iro_svn\opensprints\FW\user\user.c
000f9e   519f     MOVF      0x9f,0x0,0x1                                                                                    
000fa0   0101     MOVLB     0x1                                                                                             
000fa2   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000fa4   e101     BNZ       0xfa8                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000fa6   840d     BSF       0xd,0x2,0x0    		bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);                               e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
000fa8   0efe     MOVLW     0xfe           	return (c);                                                                     e:\iro_svn\opensprints\FW\user\user.c
000faa   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000fac   f02a                                                                                                               
000fae   6a2b     CLRF      0x2b,0x0                                                                                        
000fb0   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000fb2   682b     SETF      0x2b,0x0                                                                                        
000fb4   c02a     MOVFF     0x2a,0xff3                                                                                      
000fb6   fff3                                                                                                               
000fb8   c02b     MOVFF     0x2b,0xff4                                                                                      
000fba   fff4                                                                                                               
000fbc   d000     BRA       0xfbe                                                                                           
000fbe   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000fc0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000fc2   ffd9                                                                                                               
000fc4   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In this function, we check to see it is OK to transmit. If so                 e:\iro_svn\opensprints\FW\user\user.c
                                           // we see if there is any data to transmit to PC. If so, we schedule             e:\iro_svn\opensprints\FW\user\user.c
                                           // it for sending.                                                               e:\iro_svn\opensprints\FW\user\user.c
000fc6   cfd9     MOVFF     0xfd9,0xfe6    void check_and_send_TX_data (void)                                               e:\iro_svn\opensprints\FW\user\user.c
000fc8   ffe6                                                                                                               
000fca   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000fcc   ffd9                                                                                                               
000fce   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	char temp;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Only send if we're not already sending something                             e:\iro_svn\opensprints\FW\user\user.c
000fd0   0101     MOVLB     0x1            	if (mUSBUSARTIsTxTrfReady ())                                                   e:\iro_svn\opensprints\FW\user\user.c
000fd2   51b7     MOVF      0xb7,0x0,0x1                                                                                    
000fd4   e13e     BNZ       0x1052                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And only send if there's something there to send                            e:\iro_svn\opensprints\FW\user\user.c
000fd6   0101     MOVLB     0x1            		if (g_TX_buf_out != g_TX_buf_in)                                               e:\iro_svn\opensprints\FW\user\user.c
000fd8   519e     MOVF      0x9e,0x0,0x1                                                                                    
000fda   0101     MOVLB     0x1                                                                                             
000fdc   5d9f     SUBWF     0x9f,0x0,0x1                                                                                    
000fde   e039     BZ        0x1052                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now decide if we need to break it up into two parts or not                 e:\iro_svn\opensprints\FW\user\user.c
000fe0   0101     MOVLB     0x1            			if (g_TX_buf_in > g_TX_buf_out)                                               e:\iro_svn\opensprints\FW\user\user.c
000fe2   519f     MOVF      0x9f,0x0,0x1                                                                                    
000fe4   0101     MOVLB     0x1                                                                                             
000fe6   80d8     BSF       0xd8,0x0,0x0                                                                                    
000fe8   559e     SUBFWB    0x9e,0x0,0x1                                                                                    
000fea   e21a     BC        0x1020                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is beyond OUT, only need one chunk                               e:\iro_svn\opensprints\FW\user\user.c
000fec   0101     MOVLB     0x1            				temp = g_TX_buf_in - g_TX_buf_out;                                           e:\iro_svn\opensprints\FW\user\user.c
000fee   519f     MOVF      0x9f,0x0,0x1                                                                                    
000ff0   0101     MOVLB     0x1                                                                                             
000ff2   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000ff4   6edf     MOVWF     0xdf,0x0                                                                                        
000ff6   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              e:\iro_svn\opensprints\FW\user\user.c
000ff8   519f     MOVF      0x9f,0x0,0x1                                                                                    
000ffa   0101     MOVLB     0x1                                                                                             
000ffc   6fb8     MOVWF     0xb8,0x1                                                                                        
000ffe   6bb9     CLRF      0xb9,0x1                                                                                        
001000   0e00     MOVLW     0x0                                                                                             
001002   0101     MOVLB     0x1                                                                                             
001004   27b8     ADDWF     0xb8,0x1,0x1                                                                                    
001006   0e02     MOVLW     0x2                                                                                             
001008   0101     MOVLB     0x1                                                                                             
00100a   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
00100c   cfdf     MOVFF     0xfdf,0x1bc                                                                                     
00100e   f1bc                                                                                                               
001010   0101     MOVLB     0x1                                                                                             
001012   6bbd     CLRF      0xbd,0x1                                                                                        
001014   0101     MOVLB     0x1                                                                                             
001016   0e01     MOVLW     0x1                                                                                             
001018   6fb7     MOVWF     0xb7,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        e:\iro_svn\opensprints\FW\user\user.c
00101a   c19e     MOVFF     0x19e,0x19f    				g_TX_buf_out = g_TX_buf_in;                                                  e:\iro_svn\opensprints\FW\user\user.c
00101c   f19f                                                                                                               
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
00101e   d019     BRA       0x1052         			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is before OUT, we need to send from OUT to the end               e:\iro_svn\opensprints\FW\user\user.c
                                           				// of the buffer, then the next time around we'll catch                      e:\iro_svn\opensprints\FW\user\user.c
                                           				// from the beginning to IN.                                                 e:\iro_svn\opensprints\FW\user\user.c
001020   0e40     MOVLW     0x40           				temp = kTX_BUF_SIZE - g_TX_buf_out;                                          e:\iro_svn\opensprints\FW\user\user.c
001022   0101     MOVLB     0x1                                                                                             
001024   80d8     BSF       0xd8,0x0,0x0                                                                                    
001026   559f     SUBFWB    0x9f,0x0,0x1                                                                                    
001028   6edf     MOVWF     0xdf,0x0                                                                                        
00102a   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              e:\iro_svn\opensprints\FW\user\user.c
00102c   519f     MOVF      0x9f,0x0,0x1                                                                                    
00102e   0101     MOVLB     0x1                                                                                             
001030   6fb8     MOVWF     0xb8,0x1                                                                                        
001032   6bb9     CLRF      0xb9,0x1                                                                                        
001034   0e00     MOVLW     0x0                                                                                             
001036   0101     MOVLB     0x1                                                                                             
001038   27b8     ADDWF     0xb8,0x1,0x1                                                                                    
00103a   0e02     MOVLW     0x2                                                                                             
00103c   0101     MOVLB     0x1                                                                                             
00103e   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
001040   cfdf     MOVFF     0xfdf,0x1bc                                                                                     
001042   f1bc                                                                                                               
001044   0101     MOVLB     0x1                                                                                             
001046   6bbd     CLRF      0xbd,0x1                                                                                        
001048   0101     MOVLB     0x1                                                                                             
00104a   0e01     MOVLW     0x1                                                                                             
00104c   6fb7     MOVWF     0xb7,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        e:\iro_svn\opensprints\FW\user\user.c
00104e   0101     MOVLB     0x1            				g_TX_buf_out = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
001050   6b9f     CLRF      0x9f,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001052   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001054   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001056   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001058   ffd9                                                                                                               
00105a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the new packet, see what command it is, and                           e:\iro_svn\opensprints\FW\user\user.c
                                           // route it appropriately. We come in knowing that                               e:\iro_svn\opensprints\FW\user\user.c
                                           // our packet is in g_RX_buf[], and that the beginning                           e:\iro_svn\opensprints\FW\user\user.c
                                           // of the packet is at g_RX_buf_out, and the end (CR) is at                      e:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in. Note that because of buffer wrapping,                            e:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in may be less than g_RX_buf_out.                                    e:\iro_svn\opensprints\FW\user\user.c
00105c   cfd9     MOVFF     0xfd9,0xfe6    void parse_packet(void)                                                          e:\iro_svn\opensprints\FW\user\user.c
00105e   ffe6                                                                                                               
001060   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001062   ffd9                                                                                                               
001064   0e04     MOVLW     0x4                                                                                             
001066   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001068   6ade     CLRF      0xde,0x0       	unsigned int	command = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
00106a   6add     CLRF      0xdd,0x0                                                                                        
00106c   0e02     MOVLW     0x2            	unsigned char	cmd1 = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
00106e   6adb     CLRF      0xdb,0x0                                                                                        
001070   0e03     MOVLW     0x3            	unsigned char	cmd2 = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
001072   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Always grab the first character (which is the first byte of the command)     e:\iro_svn\opensprints\FW\user\user.c
001074   0101     MOVLB     0x1            	cmd1 = toupper (g_RX_buf[g_RX_buf_out]);                                        e:\iro_svn\opensprints\FW\user\user.c
001076   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001078   6aea     CLRF      0xea,0x0                                                                                        
00107a   0f40     ADDLW     0x40                                                                                            
00107c   6ee9     MOVWF     0xe9,0x0                                                                                        
00107e   0e02     MOVLW     0x2                                                                                             
001080   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001082   50ef     MOVF      0xef,0x0,0x0                                                                                    
001084   6ee6     MOVWF     0xe6,0x0                                                                                        
001086   6ae6     CLRF      0xe6,0x0                                                                                        
001088   ecf7     CALL      0x47ee,0x0                                                                                      
00108a   f023                                                                                                               
00108c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00108e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001090   0e02     MOVLW     0x2                                                                                             
001092   cff3     MOVFF     0xff3,0xfdb                                                                                     
001094   ffdb                                                                                                               
001096   0101     MOVLB     0x1            	advance_RX_buf_out();                                                           e:\iro_svn\opensprints\FW\user\user.c
001098   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00109a   0e40     MOVLW     0x40                                                                                            
00109c   0101     MOVLB     0x1                                                                                             
00109e   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0010a0   e102     BNZ       0x10a6                                                                                          
0010a2   0101     MOVLB     0x1                                                                                             
0010a4   6ba1     CLRF      0xa1,0x1                                                                                        
0010a6   0e02     MOVLW     0x2            	command = cmd1;                                                                 e:\iro_svn\opensprints\FW\user\user.c
0010a8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0010aa   6ede     MOVWF     0xde,0x0                                                                                        
0010ac   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Only grab second one if it is not a comma                                    e:\iro_svn\opensprints\FW\user\user.c
0010ae   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',' && g_RX_buf[g_RX_buf_out] != kCR)             e:\iro_svn\opensprints\FW\user\user.c
0010b0   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010b2   6aea     CLRF      0xea,0x0                                                                                        
0010b4   0f40     ADDLW     0x40                                                                                            
0010b6   6ee9     MOVWF     0xe9,0x0                                                                                        
0010b8   0e02     MOVLW     0x2                                                                                             
0010ba   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010bc   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010be   082c     SUBLW     0x2c                                                                                            
0010c0   e035     BZ        0x112c                                                                                          
0010c2   0101     MOVLB     0x1                                                                                             
0010c4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010c6   6aea     CLRF      0xea,0x0                                                                                        
0010c8   0f40     ADDLW     0x40                                                                                            
0010ca   6ee9     MOVWF     0xe9,0x0                                                                                        
0010cc   0e02     MOVLW     0x2                                                                                             
0010ce   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010d0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010d2   080d     SUBLW     0xd                                                                                             
0010d4   e02b     BZ        0x112c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0010d6   0101     MOVLB     0x1            		cmd2 = toupper (g_RX_buf[g_RX_buf_out]);                                       e:\iro_svn\opensprints\FW\user\user.c
0010d8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010da   6aea     CLRF      0xea,0x0                                                                                        
0010dc   0f40     ADDLW     0x40                                                                                            
0010de   6ee9     MOVWF     0xe9,0x0                                                                                        
0010e0   0e02     MOVLW     0x2                                                                                             
0010e2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010e4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0010e8   6ae6     CLRF      0xe6,0x0                                                                                        
0010ea   ecf7     CALL      0x47ee,0x0                                                                                      
0010ec   f023                                                                                                               
0010ee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010f0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010f2   0e03     MOVLW     0x3                                                                                             
0010f4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0010f6   ffdb                                                                                                               
0010f8   0101     MOVLB     0x1            		advance_RX_buf_out();                                                          e:\iro_svn\opensprints\FW\user\user.c
0010fa   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0010fc   0e40     MOVLW     0x40                                                                                            
0010fe   0101     MOVLB     0x1                                                                                             
001100   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001102   e102     BNZ       0x1108                                                                                          
001104   0101     MOVLB     0x1                                                                                             
001106   6ba1     CLRF      0xa1,0x1                                                                                        
001108   0e02     MOVLW     0x2            		command = ((unsigned int)(cmd1) << 8) + cmd2;                                  e:\iro_svn\opensprints\FW\user\user.c
00110a   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00110c   f02c                                                                                                               
00110e   c02c     MOVFF     0x2c,0x2d                                                                                       
001110   f02d                                                                                                               
001112   6a2c     CLRF      0x2c,0x0                                                                                        
001114   0e03     MOVLW     0x3                                                                                             
001116   50db     MOVF      0xdb,0x0,0x0                                                                                    
001118   0100     MOVLB     0x0                                                                                             
00111a   242c     ADDWF     0x2c,0x0,0x0                                                                                    
00111c   6e2a     MOVWF     0x2a,0x0                                                                                        
00111e   0e00     MOVLW     0x0                                                                                             
001120   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
001122   6e2b     MOVWF     0x2b,0x0                                                                                        
001124   c02a     MOVFF     0x2a,0xfde                                                                                      
001126   ffde                                                                                                               
001128   c02b     MOVFF     0x2b,0xfdd                                                                                      
00112a   ffdd                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now 'command' is equal to one or two bytes of our command                    e:\iro_svn\opensprints\FW\user\user.c
00112c   0e00     MOVLW     0x0            	switch (command)                                                                e:\iro_svn\opensprints\FW\user\user.c
00112e   cfdb     MOVFF     0xfdb,0x1e                                                                                      
001130   f01e                                                                                                               
001132   0e01     MOVLW     0x1                                                                                             
001134   cfdb     MOVFF     0xfdb,0x1f                                                                                      
001136   f01f                                                                                                               
001138   0e54     MOVLW     0x54                                                                                            
00113a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00113c   e102     BNZ       0x1142                                                                                          
00113e   0e53     MOVLW     0x53                                                                                            
001140   181f     XORWF     0x1f,0x0,0x0                                                                                    
001142   e101     BNZ       0x1146                                                                                          
001144   d0ec     BRA       0x131e                                                                                          
001146   0e4f     MOVLW     0x4f                                                                                            
001148   181e     XORWF     0x1e,0x0,0x0                                                                                    
00114a   e102     BNZ       0x1150                                                                                          
00114c   0e47     MOVLW     0x47                                                                                            
00114e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001150   e101     BNZ       0x1154                                                                                          
001152   d0e2     BRA       0x1318                                                                                          
001154   0e49     MOVLW     0x49                                                                                            
001156   181e     XORWF     0x1e,0x0,0x0                                                                                    
001158   e102     BNZ       0x115e                                                                                          
00115a   0e43     MOVLW     0x43                                                                                            
00115c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00115e   e101     BNZ       0x1162                                                                                          
001160   d0d8     BRA       0x1312                                                                                          
001162   0e49     MOVLW     0x49                                                                                            
001164   181e     XORWF     0x1e,0x0,0x0                                                                                    
001166   e102     BNZ       0x116c                                                                                          
001168   0e52     MOVLW     0x52                                                                                            
00116a   181f     XORWF     0x1f,0x0,0x0                                                                                    
00116c   e101     BNZ       0x1170                                                                                          
00116e   d0ce     BRA       0x130c                                                                                          
001170   0e49     MOVLW     0x49                                                                                            
001172   181e     XORWF     0x1e,0x0,0x0                                                                                    
001174   e102     BNZ       0x117a                                                                                          
001176   0e53     MOVLW     0x53                                                                                            
001178   181f     XORWF     0x1f,0x0,0x0                                                                                    
00117a   e101     BNZ       0x117e                                                                                          
00117c   d0c4     BRA       0x1306                                                                                          
00117e   0e53     MOVLW     0x53                                                                                            
001180   181e     XORWF     0x1e,0x0,0x0                                                                                    
001182   e102     BNZ       0x1188                                                                                          
001184   0e43     MOVLW     0x43                                                                                            
001186   181f     XORWF     0x1f,0x0,0x0                                                                                    
001188   e101     BNZ       0x118c                                                                                          
00118a   d0ba     BRA       0x1300                                                                                          
00118c   0e53     MOVLW     0x53                                                                                            
00118e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001190   e102     BNZ       0x1196                                                                                          
001192   0e52     MOVLW     0x52                                                                                            
001194   181f     XORWF     0x1f,0x0,0x0                                                                                    
001196   e101     BNZ       0x119a                                                                                          
001198   d0b0     BRA       0x12fa                                                                                          
00119a   0e53     MOVLW     0x53                                                                                            
00119c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00119e   e102     BNZ       0x11a4                                                                                          
0011a0   0e53     MOVLW     0x53                                                                                            
0011a2   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011a4   e101     BNZ       0x11a8                                                                                          
0011a6   d0a6     BRA       0x12f4                                                                                          
0011a8   0e53     MOVLW     0x53                                                                                            
0011aa   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011ac   e102     BNZ       0x11b2                                                                                          
0011ae   0e42     MOVLW     0x42                                                                                            
0011b0   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011b2   e101     BNZ       0x11b6                                                                                          
0011b4   d09c     BRA       0x12ee                                                                                          
0011b6   0e43     MOVLW     0x43                                                                                            
0011b8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011ba   e102     BNZ       0x11c0                                                                                          
0011bc   0e42     MOVLW     0x42                                                                                            
0011be   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011c0   e101     BNZ       0x11c4                                                                                          
0011c2   d092     BRA       0x12e8                                                                                          
0011c4   0e43     MOVLW     0x43                                                                                            
0011c6   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011c8   e102     BNZ       0x11ce                                                                                          
0011ca   0e52     MOVLW     0x52                                                                                            
0011cc   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011ce   e101     BNZ       0x11d2                                                                                          
0011d0   d088     BRA       0x12e2                                                                                          
0011d2   0e4f     MOVLW     0x4f                                                                                            
0011d4   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011d6   e102     BNZ       0x11dc                                                                                          
0011d8   0e42     MOVLW     0x42                                                                                            
0011da   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011dc   e101     BNZ       0x11e0                                                                                          
0011de   d07e     BRA       0x12dc                                                                                          
0011e0   0e57     MOVLW     0x57                                                                                            
0011e2   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011e4   e102     BNZ       0x11ea                                                                                          
0011e6   0e4d     MOVLW     0x4d                                                                                            
0011e8   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011ea   e076     BZ        0x12d8                                                                                          
0011ec   0e52     MOVLW     0x52                                                                                            
0011ee   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011f0   e102     BNZ       0x11f6                                                                                          
0011f2   0e4d     MOVLW     0x4d                                                                                            
0011f4   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011f6   e06e     BZ        0x12d4                                                                                          
0011f8   0e44     MOVLW     0x44                                                                                            
0011fa   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011fc   e102     BNZ       0x1202                                                                                          
0011fe   0e50     MOVLW     0x50                                                                                            
001200   181f     XORWF     0x1f,0x0,0x0                                                                                    
001202   e066     BZ        0x12d0                                                                                          
001204   0e4f     MOVLW     0x4f                                                                                            
001206   181e     XORWF     0x1e,0x0,0x0                                                                                    
001208   e102     BNZ       0x120e                                                                                          
00120a   0e50     MOVLW     0x50                                                                                            
00120c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00120e   e05d     BZ        0x12ca                                                                                          
001210   0e49     MOVLW     0x49                                                                                            
001212   181e     XORWF     0x1e,0x0,0x0                                                                                    
001214   e102     BNZ       0x121a                                                                                          
001216   0e50     MOVLW     0x50                                                                                            
001218   181f     XORWF     0x1f,0x0,0x0                                                                                    
00121a   e055     BZ        0x12c6                                                                                          
00121c   0e58     MOVLW     0x58                                                                                            
00121e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001220   e102     BNZ       0x1226                                                                                          
001222   0e54     MOVLW     0x54                                                                                            
001224   181f     XORWF     0x1f,0x0,0x0                                                                                    
001226   e04c     BZ        0x12c0                                                                                          
001228   0e54     MOVLW     0x54                                                                                            
00122a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00122c   e101     BNZ       0x1230                                                                                          
00122e   501f     MOVF      0x1f,0x0,0x0                                                                                    
001230   e045     BZ        0x12bc                                                                                          
001232   0e41     MOVLW     0x41                                                                                            
001234   181e     XORWF     0x1e,0x0,0x0                                                                                    
001236   e101     BNZ       0x123a                                                                                          
001238   501f     MOVF      0x1f,0x0,0x0                                                                                    
00123a   e03e     BZ        0x12b8                                                                                          
00123c   0e56     MOVLW     0x56                                                                                            
00123e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001240   e101     BNZ       0x1244                                                                                          
001242   501f     MOVF      0x1f,0x0,0x0                                                                                    
001244   e037     BZ        0x12b4                                                                                          
001246   0e49     MOVLW     0x49                                                                                            
001248   181e     XORWF     0x1e,0x0,0x0                                                                                    
00124a   e101     BNZ       0x124e                                                                                          
00124c   501f     MOVF      0x1f,0x0,0x0                                                                                    
00124e   e030     BZ        0x12b0                                                                                          
001250   0e4f     MOVLW     0x4f                                                                                            
001252   181e     XORWF     0x1e,0x0,0x0                                                                                    
001254   e101     BNZ       0x1258                                                                                          
001256   501f     MOVF      0x1f,0x0,0x0                                                                                    
001258   e029     BZ        0x12ac                                                                                          
00125a   0e55     MOVLW     0x55                                                                                            
00125c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00125e   e102     BNZ       0x1264                                                                                          
001260   0e43     MOVLW     0x43                                                                                            
001262   181f     XORWF     0x1f,0x0,0x0                                                                                    
001264   e021     BZ        0x12a8                                                                                          
001266   0e58     MOVLW     0x58                                                                                            
001268   181e     XORWF     0x1e,0x0,0x0                                                                                    
00126a   e102     BNZ       0x1270                                                                                          
00126c   0e43     MOVLW     0x43                                                                                            
00126e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001270   e018     BZ        0x12a2                                                                                          
001272   0e43     MOVLW     0x43                                                                                            
001274   181e     XORWF     0x1e,0x0,0x0                                                                                    
001276   e101     BNZ       0x127a                                                                                          
001278   501f     MOVF      0x1f,0x0,0x0                                                                                    
00127a   e011     BZ        0x129e                                                                                          
00127c   0e52     MOVLW     0x52                                                                                            
00127e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001280   e101     BNZ       0x1284                                                                                          
001282   501f     MOVF      0x1f,0x0,0x0                                                                                    
001284   e00a     BZ        0x129a                                                                                          
001286   0e58     MOVLW     0x58                                                                                            
001288   181e     XORWF     0x1e,0x0,0x0                                                                                    
00128a   e102     BNZ       0x1290                                                                                          
00128c   0e52     MOVLW     0x52                                                                                            
00128e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001290   e001     BZ        0x1294                                                                                          
001292   d048     BRA       0x1324                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For receiving serial                                                       e:\iro_svn\opensprints\FW\user\user.c
001294   ecb9     CALL      0x1d72,0x0     			parse_RX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001296   f00e                                                                                                               
001298   d084     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'R':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Reset command (resets everything to power-on state)                        e:\iro_svn\opensprints\FW\user\user.c
00129a   d8ba     RCALL     0x1410         			parse_R_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
00129c   d082     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'C':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Configure command (configure ports for Input or Ouptut)                    e:\iro_svn\opensprints\FW\user\user.c
00129e   d93d     RCALL     0x151a         			parse_C_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012a0   d080     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring serial port                                                e:\iro_svn\opensprints\FW\user\user.c
0012a2   ecbc     CALL      0x1d78,0x0     			parse_CX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012a4   f00e                                                                                                               
0012a6   d07d     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'U':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring UBW                                                        e:\iro_svn\opensprints\FW\user\user.c
0012a8   d8b7     RCALL     0x1418         			parse_CU_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012aa   d07b     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'O':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Output command (tell the ports to output something)                        e:\iro_svn\opensprints\FW\user\user.c
0012ac   d9a9     RCALL     0x1600         			parse_O_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012ae   d079     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'I':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Input command (return the current status of the ports)                     e:\iro_svn\opensprints\FW\user\user.c
0012b0   d9f0     RCALL     0x1692         			parse_I_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012b2   d077     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'V':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Version command                                                            e:\iro_svn\opensprints\FW\user\user.c
0012b4   da0f     RCALL     0x16d4         			parse_V_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012b6   d075     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'A':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Analog command                                                             e:\iro_svn\opensprints\FW\user\user.c
0012b8   da1e     RCALL     0x16f6         			parse_A_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012ba   d073     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'T':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For timed I/O                                                              e:\iro_svn\opensprints\FW\user\user.c
0012bc   d8ed     RCALL     0x1498         			parse_T_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012be   d071     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}	                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('T' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For transmitting serial                                                    e:\iro_svn\opensprints\FW\user\user.c
0012c0   ecb6     CALL      0x1d6c,0x0     			parse_TX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012c2   f00e                                                                                                               
0012c4   d06e     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PI for reading a single pin                                                e:\iro_svn\opensprints\FW\user\user.c
0012c6   dbcc     RCALL     0x1a60         			parse_PI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012c8   d06c     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PO for setting a single pin                                                e:\iro_svn\opensprints\FW\user\user.c
0012ca   ecda     CALL      0x1bb4,0x0     			parse_PO_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012cc   f00d                                                                                                               
0012ce   d069     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'D':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PD for setting a pin's direction                                           e:\iro_svn\opensprints\FW\user\user.c
0012d0   dae9     RCALL     0x18a4         			parse_PD_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012d2   d067     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'R':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Memory Read                                                         e:\iro_svn\opensprints\FW\user\user.c
0012d4   daa6     RCALL     0x1822         			parse_MR_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012d6   d065     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'W':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MW for Memory Write                                                        e:\iro_svn\opensprints\FW\user\user.c
0012d8   da6f     RCALL     0x17b8         			parse_MW_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012da   d063     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Fast Parallel Output                                                e:\iro_svn\opensprints\FW\user\user.c
0012dc   ecab     CALL      0x1f56,0x0     			parse_BO_packet ();		                                                         e:\iro_svn\opensprints\FW\user\user.c
0012de   f00f                                                                                                               
0012e0   d060     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'C':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RC for RC servo output                                                     e:\iro_svn\opensprints\FW\user\user.c
0012e2   ecbf     CALL      0x1d7e,0x0     			parse_RC_packet ();		                                                         e:\iro_svn\opensprints\FW\user\user.c
0012e4   f00e                                                                                                               
0012e6   d05d     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'C':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// BC for Fast Parallel Configure                                             e:\iro_svn\opensprints\FW\user\user.c
0012e8   ec64     CALL      0x1ec8,0x0     			parse_BC_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012ea   f00f                                                                                                               
0012ec   d05a     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// BS for Fast Binary Stream output                                           e:\iro_svn\opensprints\FW\user\user.c
0012ee   ecf2     CALL      0x21e4,0x0     			parse_BS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012f0   f010                                                                                                               
0012f2   d057     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// SS for Send SPI                                                            e:\iro_svn\opensprints\FW\user\user.c
0012f4   ecae     CALL      0x235c,0x0     			parse_SS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012f6   f011                                                                                                               
0012f8   d054     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RS for Receive SPI                                                         e:\iro_svn\opensprints\FW\user\user.c
0012fa   ecb1     CALL      0x2362,0x0     			parse_RS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012fc   f011                                                                                                               
0012fe   d051     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// CS for Configure SPI                                                       e:\iro_svn\opensprints\FW\user\user.c
001300   ecb4     CALL      0x2368,0x0     			parse_CS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001302   f011                                                                                                               
001304   d04e     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// SI for Send I2C                                                            e:\iro_svn\opensprints\FW\user\user.c
001306   ecb7     CALL      0x236e,0x0     			parse_SI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001308   f011                                                                                                               
00130a   d04b     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RI for Receive I2C                                                         e:\iro_svn\opensprints\FW\user\user.c
00130c   ecba     CALL      0x2374,0x0     			parse_RI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00130e   f011                                                                                                               
001310   d048     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// CI for Configure I2C                                                       e:\iro_svn\opensprints\FW\user\user.c
001312   ecbd     CALL      0x237a,0x0     			parse_CI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001314   f011                                                                                                               
001316   d045     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('G' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001318   ecc0     CALL      0x2380,0x0     			parse_GO_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00131a   f011                                                                                                               
00131c   d042     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'T':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00131e   ecc4     CALL      0x2388,0x0     			parse_ST_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001320   f011                                                                                                               
001322   d03f     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		default:                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001324   0e03     MOVLW     0x3            			if (0 == cmd2)                                                                e:\iro_svn\opensprints\FW\user\user.c
001326   50db     MOVF      0xdb,0x0,0x0                                                                                    
001328   e11a     BNZ       0x135e                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c:%2X'\r\n"                         e:\iro_svn\opensprints\FW\user\user.c
00133a   0ee3     MOVLW     0xe3           					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
00133c   6e2a     MOVWF     0x2a,0x0                                                                                        
00133e   0e42     MOVLW     0x42                                                                                            
001340   6e2b     MOVWF     0x2b,0x0                                                                                        
001342   6a2c     CLRF      0x2c,0x0                                                                                        
001344   c02a     MOVFF     0x2a,0xfe6                                                                                      
001346   ffe6                                                                                                               
001348   c02b     MOVFF     0x2b,0xfe6                                                                                      
00134a   ffe6                                                                                                               
00134c   c02c     MOVFF     0x2c,0xfe6                                                                                      
00134e   ffe6                                                                                                               
001332   0e02     MOVLW     0x2            					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001334   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001336   ffe6                                                                                                               
001338   6ae6     CLRF      0xe6,0x0                                                                                        
00132a   0e02     MOVLW     0x2            				);                                                                           e:\iro_svn\opensprints\FW\user\user.c
00132c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00132e   ffe6                                                                                                               
001330   6ae6     CLRF      0xe6,0x0                                                                                        
001350   ecfe     CALL      0x45fc,0x0                                                                                      
001352   f022                                                                                                               
001354   6e2d     MOVWF     0x2d,0x0                                                                                        
001356   0e07     MOVLW     0x7                                                                                             
001358   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00135a   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
00135c   d021     BRA       0x13a0         			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c%c:%2X%2X'\r\n"                    e:\iro_svn\opensprints\FW\user\user.c
00137e   0ebb     MOVLW     0xbb           					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001380   6e2a     MOVWF     0x2a,0x0                                                                                        
001382   0e42     MOVLW     0x42                                                                                            
001384   6e2b     MOVWF     0x2b,0x0                                                                                        
001386   6a2c     CLRF      0x2c,0x0                                                                                        
001388   c02a     MOVFF     0x2a,0xfe6                                                                                      
00138a   ffe6                                                                                                               
00138c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00138e   ffe6                                                                                                               
001390   c02c     MOVFF     0x2c,0xfe6                                                                                      
001392   ffe6                                                                                                               
001376   0e02     MOVLW     0x2            					,cmd2                                                                       e:\iro_svn\opensprints\FW\user\user.c
001378   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00137a   ffe6                                                                                                               
00137c   6ae6     CLRF      0xe6,0x0                                                                                        
00136e   0e03     MOVLW     0x3            					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001370   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001372   ffe6                                                                                                               
001374   6ae6     CLRF      0xe6,0x0                                                                                        
001366   0e02     MOVLW     0x2            					,cmd2                                                                       e:\iro_svn\opensprints\FW\user\user.c
001368   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00136a   ffe6                                                                                                               
00136c   6ae6     CLRF      0xe6,0x0                                                                                        
00135e   0e03     MOVLW     0x3            				);                                                                           e:\iro_svn\opensprints\FW\user\user.c
001360   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001362   ffe6                                                                                                               
001364   6ae6     CLRF      0xe6,0x0                                                                                        
001394   ecfe     CALL      0x45fc,0x0                                                                                      
001396   f022                                                                                                               
001398   6e2d     MOVWF     0x2d,0x0                                                                                        
00139a   0e0b     MOVLW     0xb                                                                                             
00139c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00139e   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
0013a0   d000     BRA       0x13a2         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Double check that our output pointer is now at the ending <CR>               e:\iro_svn\opensprints\FW\user\user.c
                                           	// If it is not, this indicates that there were extra characters that           e:\iro_svn\opensprints\FW\user\user.c
                                           	// the command parsing routine didn't eat. This would be an error and needs     e:\iro_svn\opensprints\FW\user\user.c
                                           	// to be reported. (Ignore for Reset command because FIFO pointers get cleared.) e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
0013a2   0101     MOVLB     0x1            		(g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)                             e:\iro_svn\opensprints\FW\user\user.c
0013a4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0013a6   6aea     CLRF      0xea,0x0                                                                                        
0013a8   0f40     ADDLW     0x40                                                                                            
0013aa   6ee9     MOVWF     0xe9,0x0                                                                                        
0013ac   0e02     MOVLW     0x2                                                                                             
0013ae   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0013b0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0013b2   080d     SUBLW     0xd                                                                                             
0013b4   e00d     BZ        0x13d0                                                                                          
0013b6   500d     MOVF      0xd,0x0,0x0                                                                                     
0013b8   e10b     BNZ       0x13d0                                                                                          
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
0013ba   0e52     MOVLW     0x52           		('R' != command)                                                               e:\iro_svn\opensprints\FW\user\user.c
0013bc   6e2a     MOVWF     0x2a,0x0                                                                                        
0013be   6a2b     CLRF      0x2b,0x0                                                                                        
0013c0   50df     MOVF      0xdf,0x0,0x0                                                                                    
0013c2   182a     XORWF     0x2a,0x0,0x0                                                                                    
0013c4   e103     BNZ       0x13cc                                                                                          
0013c6   52de     MOVF      0xde,0x1,0x0                                                                                    
0013c8   50dd     MOVF      0xdd,0x0,0x0                                                                                    
0013ca   182b     XORWF     0x2b,0x0,0x0                                                                                    
0013cc   e001     BZ        0x13d0         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0013ce   8e0d     BSF       0xd,0x7,0x0    		bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);                             e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clean up by skipping over any bytes we haven't eaten                         e:\iro_svn\opensprints\FW\user\user.c
                                           	// This is safe since we parse each packet as we get a <CR>                     e:\iro_svn\opensprints\FW\user\user.c
                                           	// (i.e. g_RX_buf_in doesn't move while we are in this routine)                 e:\iro_svn\opensprints\FW\user\user.c
0013d0   c1a0     MOVFF     0x1a0,0x1a1    	g_RX_buf_out = g_RX_buf_in;                                                     e:\iro_svn\opensprints\FW\user\user.c
0013d2   f1a1                                                                                                               
0013d4   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0013d6   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0013d8   e202     BC        0x13de                                                                                          
0013da   6ae1     CLRF      0xe1,0x0                                                                                        
0013dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013de   6ee1     MOVWF     0xe1,0x0                                                                                        
0013e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013e2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0013e4   ffd9                                                                                                               
0013e6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Print out the positive acknoledgement that the packet was received            e:\iro_svn\opensprints\FW\user\user.c
                                           // if we have acks turned on.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack(void)                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0013e8   0101     MOVLB     0x1            	if (g_ack_enable)                                                               e:\iro_svn\opensprints\FW\user\user.c
0013ea   51a6     MOVF      0xa6,0x0,0x1                                                                                    
0013ec   e010     BZ        0x140e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0013ee   0e82     MOVLW     0x82           		printf ((rom char *)st_OK);                                                    e:\iro_svn\opensprints\FW\user\user.c
0013f0   6e2a     MOVWF     0x2a,0x0                                                                                        
0013f2   0e48     MOVLW     0x48                                                                                            
0013f4   6e2b     MOVWF     0x2b,0x0                                                                                        
0013f6   6a2c     CLRF      0x2c,0x0                                                                                        
0013f8   c02a     MOVFF     0x2a,0xfe6                                                                                      
0013fa   ffe6                                                                                                               
0013fc   c02b     MOVFF     0x2b,0xfe6                                                                                      
0013fe   ffe6                                                                                                               
001400   c02c     MOVFF     0x2c,0xfe6                                                                                      
001402   ffe6                                                                                                               
001404   ecfe     CALL      0x45fc,0x0                                                                                      
001406   f022                                                                                                               
001408   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00140a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00140c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
00140e   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Return all I/Os to their default power-on values                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001410   ecc4     CALL      0xb88,0x0      	UserInit ();                                                                    e:\iro_svn\opensprints\FW\user\user.c
001412   f005                                                                                                               
001414   dfe9     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001416   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CU is "Configure UBW" and controls system-wide configruation values           e:\iro_svn\opensprints\FW\user\user.c
                                           // "CU,<parameter_number>,<paramter_value><CR>"                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // <paramter_number>	<parameter_value>                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // 1					{1|0} turns on or off the 'ack' ("OK" at end of packets)                e:\iro_svn\opensprints\FW\user\user.c
001418   cfd9     MOVFF     0xfd9,0xfe6    void parse_CU_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
00141a   ffe6                                                                                                               
00141c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00141e   ffd9                                                                                                               
001420   0e03     MOVLW     0x3                                                                                             
001422   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char parameter_number;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	signed int paramater_value;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001424   0e01     MOVLW     0x1            	parameter_number = extract_number (kUCHAR);                                     e:\iro_svn\opensprints\FW\user\user.c
001426   6ee6     MOVWF     0xe6,0x0                                                                                        
001428   ecc7     CALL      0x238e,0x0                                                                                      
00142a   f011                                                                                                               
00142c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00142e   501d     MOVF      0x1d,0x0,0x0                                                                                    
001430   6edf     MOVWF     0xdf,0x0                                                                                        
001432   0e02     MOVLW     0x2            	paramater_value = extract_number (kINT);                                        e:\iro_svn\opensprints\FW\user\user.c
001434   6ee6     MOVWF     0xe6,0x0                                                                                        
001436   ecc7     CALL      0x238e,0x0                                                                                      
001438   f011                                                                                                               
00143a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00143c   52de     MOVF      0xde,0x1,0x0                                                                                    
00143e   c01d     MOVFF     0x1d,0xfde                                                                                      
001440   ffde                                                                                                               
001442   c01e     MOVFF     0x1e,0xfdd                                                                                      
001444   ffdd                                                                                                               
001446   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001448   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
00144a   e001     BZ        0x144e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00144c   d01b     BRA       0x1484         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
00144e   04df     DECF      0xdf,0x0,0x0   	if (1 == parameter_number)                                                      e:\iro_svn\opensprints\FW\user\user.c
001450   e118     BNZ       0x1482                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001452   50d9     MOVF      0xd9,0x0,0x0   		if (0 == paramater_value || 1 == paramater_value)                              e:\iro_svn\opensprints\FW\user\user.c
001454   0f01     ADDLW     0x1                                                                                             
001456   6ee9     MOVWF     0xe9,0x0                                                                                        
001458   cfda     MOVFF     0xfda,0xfea                                                                                     
00145a   ffea                                                                                                               
00145c   50ee     MOVF      0xee,0x0,0x0                                                                                    
00145e   10ed     IORWF     0xed,0x0,0x0                                                                                    
001460   e00b     BZ        0x1478                                                                                          
001462   0e01     MOVLW     0x1                                                                                             
001464   6e2a     MOVWF     0x2a,0x0                                                                                        
001466   6a2b     CLRF      0x2b,0x0                                                                                        
001468   0e01     MOVLW     0x1                                                                                             
00146a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00146c   182a     XORWF     0x2a,0x0,0x0                                                                                    
00146e   e103     BNZ       0x1476                                                                                          
001470   0e02     MOVLW     0x2                                                                                             
001472   50db     MOVF      0xdb,0x0,0x0                                                                                    
001474   182b     XORWF     0x2b,0x0,0x0                                                                                    
001476   e104     BNZ       0x1480                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001478   0e01     MOVLW     0x1            			g_ack_enable = paramater_value;			                                            e:\iro_svn\opensprints\FW\user\user.c
00147a   cfdb     MOVFF     0xfdb,0x1a6                                                                                     
00147c   f1a6                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00147e   d001     BRA       0x1482         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001480   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001482   dfb2     RCALL     0x13e8         	print_ack();                                                                    e:\iro_svn\opensprints\FW\user\user.c
001484   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001486   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001488   e202     BC        0x148e                                                                                          
00148a   6ae1     CLRF      0xe1,0x0                                                                                        
00148c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00148e   6ee1     MOVWF     0xe1,0x0                                                                                        
001490   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001492   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001494   ffd9                                                                                                               
001496   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // "T" Packet                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // Causes PIC to sample digital or analog inputs at a regular interval and send  e:\iro_svn\opensprints\FW\user\user.c
                                           // I (or A) packets back at that interval.                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Send T,0,0<CR> to stop I (or A) packets                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: T,<TIME_BETWEEN_UPDATES_IN_MS>,<MODE><CR>                             e:\iro_svn\opensprints\FW\user\user.c
                                           // <MODE> is 0 for digital (I packets) and 1 for analog (A packets)              e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,4000,0<CR>" to send an I packet back every 4 seconds.             e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,2000,1<CR>" to send an A packet back every 2 seconds.             e:\iro_svn\opensprints\FW\user\user.c
001498   cfd9     MOVFF     0xfd9,0xfe6    void parse_T_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
00149a   ffe6                                                                                                               
00149c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00149e   ffd9                                                                                                               
0014a0   0e03     MOVLW     0x3                                                                                             
0014a2   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             e:\iro_svn\opensprints\FW\user\user.c
0014a4   0e02     MOVLW     0x2            	unsigned char mode = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
0014a6   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract the <TIME_BETWEEN_UPDATES_IN_MS> value                               e:\iro_svn\opensprints\FW\user\user.c
0014a8   0e03     MOVLW     0x3            	time_between_updates = extract_number (kUINT);                                  e:\iro_svn\opensprints\FW\user\user.c
0014aa   6ee6     MOVWF     0xe6,0x0                                                                                        
0014ac   ecc7     CALL      0x238e,0x0                                                                                      
0014ae   f011                                                                                                               
0014b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014b2   c01d     MOVFF     0x1d,0x0                                                                                        
0014b4   f000                                                                                                               
0014b6   c01e     MOVFF     0x1e,0x1                                                                                        
0014b8   f001                                                                                                               
                                           	// Extract the <MODE> value                                                     e:\iro_svn\opensprints\FW\user\user.c
0014ba   0e01     MOVLW     0x1            	mode = extract_number (kUCHAR);                                                 e:\iro_svn\opensprints\FW\user\user.c
0014bc   6ee6     MOVWF     0xe6,0x0                                                                                        
0014be   ecc7     CALL      0x238e,0x0                                                                                      
0014c0   f011                                                                                                               
0014c2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014c4   0e02     MOVLW     0x2                                                                                             
0014c6   c01d     MOVFF     0x1d,0xfdb                                                                                      
0014c8   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0014ca   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0014cc   e001     BZ        0x14d0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014ce   d01b     BRA       0x1506         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now start up the timer at the right rate or shut                             e:\iro_svn\opensprints\FW\user\user.c
                                           	// it down.                                                                     e:\iro_svn\opensprints\FW\user\user.c
0014d0   0e02     MOVLW     0x2            	if (0 == mode)                                                                  e:\iro_svn\opensprints\FW\user\user.c
0014d2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014d4   e10c     BNZ       0x14ee                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014d6   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 e:\iro_svn\opensprints\FW\user\user.c
0014d8   1001     IORWF     0x1,0x0,0x0                                                                                     
0014da   e103     BNZ       0x14e2                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of I packets.                                             e:\iro_svn\opensprints\FW\user\user.c
0014dc   6a02     CLRF      0x2,0x0        			ISR_D_RepeatRate = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
0014de   6a03     CLRF      0x3,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014e0   d005     BRA       0x14ec         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014e2   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              e:\iro_svn\opensprints\FW\user\user.c
0014e4   c000     MOVFF     0x0,0x2        			ISR_D_RepeatRate = time_between_updates;                                      e:\iro_svn\opensprints\FW\user\user.c
0014e6   f002                                                                                                               
0014e8   c001     MOVFF     0x1,0x3                                                                                         
0014ea   f003                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014ec   d00b     BRA       0x1504         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014ee   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 e:\iro_svn\opensprints\FW\user\user.c
0014f0   1001     IORWF     0x1,0x0,0x0                                                                                     
0014f2   e103     BNZ       0x14fa                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of A packets.                                             e:\iro_svn\opensprints\FW\user\user.c
0014f4   6a07     CLRF      0x7,0x0        			ISR_A_RepeatRate = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
0014f6   6a08     CLRF      0x8,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014f8   d005     BRA       0x1504         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014fa   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              e:\iro_svn\opensprints\FW\user\user.c
0014fc   c000     MOVFF     0x0,0x7        			ISR_A_RepeatRate = time_between_updates;                                      e:\iro_svn\opensprints\FW\user\user.c
0014fe   f007                                                                                                               
001500   c001     MOVFF     0x1,0x8                                                                                         
001502   f008                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001504   df71     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001506   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001508   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00150a   e202     BC        0x1510                                                                                          
00150c   6ae1     CLRF      0xe1,0x0                                                                                        
00150e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001510   6ee1     MOVWF     0xe1,0x0                                                                                        
001512   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001514   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001516   ffd9                                                                                                               
001518   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: C,<portA_IO>,<portB_IO>,<portC_IO>,<analog_config><CR>                e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "C,255,0,4,0<CR>"                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // <portX_IO> is the byte sent to the Data Direction (DDR) regsiter for          e:\iro_svn\opensprints\FW\user\user.c
                                           // each port. A 1 in a bit location means input, a 0 means output.               e:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config> is a value between 0 and 12. It tells the UBW                 e:\iro_svn\opensprints\FW\user\user.c
                                           // how many analog inputs to enable. If a zero is sent for this                  e:\iro_svn\opensprints\FW\user\user.c
                                           // parameter, all analog inputs are disabled.                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // For the other values, see the following chart to know what pins are           e:\iro_svn\opensprints\FW\user\user.c
                                           // used for what:                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // Note that in the following chart, PortE is references. This port              e:\iro_svn\opensprints\FW\user\user.c
                                           // only exists on the 40 and 44 pin versions of the UBW. For the                 e:\iro_svn\opensprints\FW\user\user.c
                                           // 28 pin versions of the UBW, all PortE based analog pins will return           e:\iro_svn\opensprints\FW\user\user.c
                                           // zero.                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config>	Analog Inputs Enabled	Pins Used For Analog Inputs             e:\iro_svn\opensprints\FW\user\user.c
                                           // ---------------	---------------------	-------------------------------         e:\iro_svn\opensprints\FW\user\user.c
                                           //	0				<none>					<none>                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	1				AN0						A0                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           //	2				AN0,AN1					A0,A1	                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           //	3				AN0,AN1,AN2				A0,A1,A2	                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           //	4				AN0,AN1,AN2,AN3			A0,A1,A2,A3	                                           e:\iro_svn\opensprints\FW\user\user.c
                                           //	5				AN0,AN1,AN2,AN3,AN4		A0,A1,A2,A3,A5		                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	6				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5						                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //	7				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1                                e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6						                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           //	8				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2                             e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7						                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	9				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2                          e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8						                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	10				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3                      e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9						                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //	11				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1                   e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AB9,AN10						                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           //	12				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1,B4                e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9,AN10,AN11                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // NOTE: it is up to the user to tell the proper port direction bits to be       e:\iro_svn\opensprints\FW\user\user.c
                                           // inputs for the analog channels they wish to use.                              e:\iro_svn\opensprints\FW\user\user.c
00151a   cfd9     MOVFF     0xfd9,0xfe6    void parse_C_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
00151c   ffe6                                                                                                               
00151e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001520   ffd9                                                                                                               
001522   0e06     MOVLW     0x6                                                                                             
001524   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC, AA;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the four values.                                             e:\iro_svn\opensprints\FW\user\user.c
001526   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001528   6ee6     MOVWF     0xe6,0x0                                                                                        
00152a   ecc7     CALL      0x238e,0x0                                                                                      
00152c   f011                                                                                                               
00152e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001530   501d     MOVF      0x1d,0x0,0x0                                                                                    
001532   6edf     MOVWF     0xdf,0x0                                                                                        
001534   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001536   6ee6     MOVWF     0xe6,0x0                                                                                        
001538   ecc7     CALL      0x238e,0x0                                                                                      
00153a   f011                                                                                                               
00153c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00153e   0e01     MOVLW     0x1                                                                                             
001540   c01d     MOVFF     0x1d,0xfdb                                                                                      
001542   ffdb                                                                                                               
001544   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001546   6ee6     MOVWF     0xe6,0x0                                                                                        
001548   ecc7     CALL      0x238e,0x0                                                                                      
00154a   f011                                                                                                               
00154c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00154e   0e02     MOVLW     0x2                                                                                             
001550   c01d     MOVFF     0x1d,0xfdb                                                                                      
001552   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
001554   0e01     MOVLW     0x1            	PD = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001556   6ee6     MOVWF     0xe6,0x0                                                                                        
001558   ecc7     CALL      0x238e,0x0                                                                                      
00155a   f011                                                                                                               
00155c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00155e   0e04     MOVLW     0x4                                                                                             
001560   c01d     MOVFF     0x1d,0xfdb                                                                                      
001562   ffdb                                                                                                               
001564   0e01     MOVLW     0x1            	PE = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001566   6ee6     MOVWF     0xe6,0x0                                                                                        
001568   ecc7     CALL      0x238e,0x0                                                                                      
00156a   f011                                                                                                               
00156c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00156e   0e05     MOVLW     0x5                                                                                             
001570   c01d     MOVFF     0x1d,0xfdb                                                                                      
001572   ffdb                                                                                                               
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001574   0e01     MOVLW     0x1            	AA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001576   6ee6     MOVWF     0xe6,0x0                                                                                        
001578   ecc7     CALL      0x238e,0x0                                                                                      
00157a   f011                                                                                                               
00157c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00157e   0e03     MOVLW     0x3                                                                                             
001580   c01d     MOVFF     0x1d,0xfdb                                                                                      
001582   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001584   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001586   e001     BZ        0x158a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001588   d031     BRA       0x15ec         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data direction registers.                      e:\iro_svn\opensprints\FW\user\user.c
00158a   50df     MOVF      0xdf,0x0,0x0   	TRISA = PA;                                                                     e:\iro_svn\opensprints\FW\user\user.c
00158c   6e92     MOVWF     0x92,0x0                                                                                        
00158e   0e01     MOVLW     0x1            	TRISB = PB;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001590   50db     MOVF      0xdb,0x0,0x0                                                                                    
001592   6e93     MOVWF     0x93,0x0                                                                                        
001594   0e02     MOVLW     0x2            	TRISC = PC;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001596   50db     MOVF      0xdb,0x0,0x0                                                                                    
001598   6e94     MOVWF     0x94,0x0                                                                                        
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
00159a   0e04     MOVLW     0x4            	TRISD = PD;                                                                     e:\iro_svn\opensprints\FW\user\user.c
00159c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00159e   6e95     MOVWF     0x95,0x0                                                                                        
0015a0   0e05     MOVLW     0x5            	TRISE = PE;                                                                     e:\iro_svn\opensprints\FW\user\user.c
0015a2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015a4   6e96     MOVWF     0x96,0x0                                                                                        
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the analog value.                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	// Maximum value of 12.                                                         e:\iro_svn\opensprints\FW\user\user.c
0015a6   0e03     MOVLW     0x3            	if (AA > 12)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0015a8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015aa   080c     SUBLW     0xc                                                                                             
0015ac   e205     BC        0x15b8                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0015ae   0e0c     MOVLW     0xc            		AA = 12;                                                                       e:\iro_svn\opensprints\FW\user\user.c
0015b0   6ef3     MOVWF     0xf3,0x0                                                                                        
0015b2   0e03     MOVLW     0x3                                                                                             
0015b4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0015b6   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// If we are turning off Analog inputs                                          e:\iro_svn\opensprints\FW\user\user.c
0015b8   0e03     MOVLW     0x3            	if (0 == AA)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0015ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015bc   e105     BNZ       0x15c8                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn all analog inputs into digital inputs                                  e:\iro_svn\opensprints\FW\user\user.c
0015be   0e0f     MOVLW     0xf            		ADCON1 = 0x0F;                                                                 e:\iro_svn\opensprints\FW\user\user.c
0015c0   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           		// Turn off the ADC                                                            e:\iro_svn\opensprints\FW\user\user.c
0015c2   90c2     BCF       0xc2,0x0,0x0   		ADCON0bits.ADON = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off our own idea of how many analog channels to convert                e:\iro_svn\opensprints\FW\user\user.c
0015c4   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0015c6   d011     BRA       0x15ea         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Some protection from ISR                                                    e:\iro_svn\opensprints\FW\user\user.c
0015c8   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// We're turning some on.                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		// Start by selecting channel zero		                                           e:\iro_svn\opensprints\FW\user\user.c
0015ca   6ac2     CLRF      0xc2,0x0       		ADCON0 = 0;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then enabling the proper number of channels                                 e:\iro_svn\opensprints\FW\user\user.c
0015cc   0e03     MOVLW     0x3            		ADCON1 = 15 - AA;                                                              e:\iro_svn\opensprints\FW\user\user.c
0015ce   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0015d0   ffe6                                                                                                               
0015d2   0e0f     MOVLW     0xf                                                                                             
0015d4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015d6   80d8     BSF       0xd8,0x0,0x0                                                                                    
0015d8   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
0015da   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Set up ADCON2 options                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// A/D Result right justified                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           		// Acq time = 20 Tad (?)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// Tad = Fosc/64                                                               e:\iro_svn\opensprints\FW\user\user.c
0015dc   0ebe     MOVLW     0xbe           		ADCON2 = 0b10111110;                                                           e:\iro_svn\opensprints\FW\user\user.c
0015de   6ec0     MOVWF     0xc0,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn on the ADC                                                             e:\iro_svn\opensprints\FW\user\user.c
0015e0   80c2     BSF       0xc2,0x0,0x0   		ADCON0bits.ADON = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Tell ourselves how many channels to convert, and turn on ISR conversions    e:\iro_svn\opensprints\FW\user\user.c
0015e2   0e03     MOVLW     0x3            		AnalogEnable = AA;                                                             e:\iro_svn\opensprints\FW\user\user.c
0015e4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015e6   6e0c     MOVWF     0xc,0x0                                                                                         
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015e8   84ca     BSF       0xca,0x2,0x0   		T2CONbits.TMR2ON = 1;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015ea   defe     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0015ec   0e06     MOVLW     0x6            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015ee   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0015f0   e202     BC        0x15f6                                                                                          
0015f2   6ae1     CLRF      0xe1,0x0                                                                                        
0015f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015f6   6ee1     MOVWF     0xe1,0x0                                                                                        
0015f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015fa   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0015fc   ffd9                                                                                                               
0015fe   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Outputs values to the ports pins that are set up as outputs.                  e:\iro_svn\opensprints\FW\user\user.c
                                           // Example "O,121,224,002<CR>"                                                   e:\iro_svn\opensprints\FW\user\user.c
001600   cfd9     MOVFF     0xfd9,0xfe6    void parse_O_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
001602   ffe6                                                                                                               
001604   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001606   ffd9                                                                                                               
001608   0e05     MOVLW     0x5                                                                                             
00160a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the values.                                                  e:\iro_svn\opensprints\FW\user\user.c
00160c   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00160e   6ee6     MOVWF     0xe6,0x0                                                                                        
001610   ecc7     CALL      0x238e,0x0                                                                                      
001612   f011                                                                                                               
001614   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001616   501d     MOVF      0x1d,0x0,0x0                                                                                    
001618   6edf     MOVWF     0xdf,0x0                                                                                        
00161a   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00161c   6ee6     MOVWF     0xe6,0x0                                                                                        
00161e   ecc7     CALL      0x238e,0x0                                                                                      
001620   f011                                                                                                               
001622   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001624   0e01     MOVLW     0x1                                                                                             
001626   c01d     MOVFF     0x1d,0xfdb                                                                                      
001628   ffdb                                                                                                               
00162a   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00162c   6ee6     MOVWF     0xe6,0x0                                                                                        
00162e   ecc7     CALL      0x238e,0x0                                                                                      
001630   f011                                                                                                               
001632   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001634   0e02     MOVLW     0x2                                                                                             
001636   c01d     MOVFF     0x1d,0xfdb                                                                                      
001638   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
00163a   0e01     MOVLW     0x1            	PD = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00163c   6ee6     MOVWF     0xe6,0x0                                                                                        
00163e   ecc7     CALL      0x238e,0x0                                                                                      
001640   f011                                                                                                               
001642   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001644   0e03     MOVLW     0x3                                                                                             
001646   c01d     MOVFF     0x1d,0xfdb                                                                                      
001648   ffdb                                                                                                               
00164a   0e01     MOVLW     0x1            	PE = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00164c   6ee6     MOVWF     0xe6,0x0                                                                                        
00164e   ecc7     CALL      0x238e,0x0                                                                                      
001650   f011                                                                                                               
001652   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001654   0e04     MOVLW     0x4                                                                                             
001656   c01d     MOVFF     0x1d,0xfdb                                                                                      
001658   ffdb                                                                                                               
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
00165a   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
00165c   e001     BZ        0x1660                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00165e   d00f     BRA       0x167e         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data port registers.                           e:\iro_svn\opensprints\FW\user\user.c
001660   50df     MOVF      0xdf,0x0,0x0   	LATA = PA;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001662   6e89     MOVWF     0x89,0x0                                                                                        
001664   0e01     MOVLW     0x1            	LATB = PB;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001666   50db     MOVF      0xdb,0x0,0x0                                                                                    
001668   6e8a     MOVWF     0x8a,0x0                                                                                        
00166a   0e02     MOVLW     0x2            	LATC = PC;                                                                      e:\iro_svn\opensprints\FW\user\user.c
00166c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00166e   6e8b     MOVWF     0x8b,0x0                                                                                        
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
001670   0e03     MOVLW     0x3            	LATD = PD;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001672   50db     MOVF      0xdb,0x0,0x0                                                                                    
001674   6e8c     MOVWF     0x8c,0x0                                                                                        
001676   0e04     MOVLW     0x4            	LATE = PE;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001678   50db     MOVF      0xdb,0x0,0x0                                                                                    
00167a   6e8d     MOVWF     0x8d,0x0                                                                                        
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
00167c   deb5     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00167e   0e05     MOVLW     0x5            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001680   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001682   e202     BC        0x1688                                                                                          
001684   6ae1     CLRF      0xe1,0x0                                                                                        
001686   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001688   6ee1     MOVWF     0xe1,0x0                                                                                        
00168a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00168c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00168e   ffd9                                                                                                               
001690   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Read in the three I/O ports (A,B,C) and create                                e:\iro_svn\opensprints\FW\user\user.c
                                           // a packet to send back with all of values.                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // Example: "I,143,221,010<CR>"                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // Remember that on UBW 28 pin boards, we only have                              e:\iro_svn\opensprints\FW\user\user.c
                                           // Port A bits 0 through 5                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Port B bits 0 through 7                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Port C bits 0,1,2 and 7,8                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // And that Port C bits 0,1,2 are used for                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // 		User1 LED, User2 LED and Program switch respectively.                       e:\iro_svn\opensprints\FW\user\user.c
                                           // The rest will be read in as zeros.                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
0016b0   0e9e     MOVLW     0x9e           		(rom char*)"I,%03i,%03i,%03i,%03i,%03i\r\n",                                   e:\iro_svn\opensprints\FW\user\user.c
0016b2   6e2a     MOVWF     0x2a,0x0                                                                                        
0016b4   0e42     MOVLW     0x42                                                                                            
0016b6   6e2b     MOVWF     0x2b,0x0                                                                                        
0016b8   6a2c     CLRF      0x2c,0x0                                                                                        
0016ba   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016bc   ffe6                                                                                                               
0016be   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016c0   ffe6                                                                                                               
0016c2   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016c4   ffe6                                                                                                               
0016aa   5080     MOVF      0x80,0x0,0x0   		PORTA,                                                                         e:\iro_svn\opensprints\FW\user\user.c
0016ac   6ee6     MOVWF     0xe6,0x0                                                                                        
0016ae   6ae6     CLRF      0xe6,0x0                                                                                        
0016a4   5081     MOVF      0x81,0x0,0x0   		PORTB,                                                                         e:\iro_svn\opensprints\FW\user\user.c
0016a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0016a8   6ae6     CLRF      0xe6,0x0                                                                                        
00169e   5082     MOVF      0x82,0x0,0x0   		PORTC,                                                                         e:\iro_svn\opensprints\FW\user\user.c
0016a0   6ee6     MOVWF     0xe6,0x0                                                                                        
0016a2   6ae6     CLRF      0xe6,0x0                                                                                        
001698   5083     MOVF      0x83,0x0,0x0   		PORTD,                                                                         e:\iro_svn\opensprints\FW\user\user.c
00169a   6ee6     MOVWF     0xe6,0x0                                                                                        
00169c   6ae6     CLRF      0xe6,0x0                                                                                        
001692   5084     MOVF      0x84,0x0,0x0   		PORTE                                                                          e:\iro_svn\opensprints\FW\user\user.c
001694   6ee6     MOVWF     0xe6,0x0       	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001696   6ae6     CLRF      0xe6,0x0                                                                                        
0016c6   ecfe     CALL      0x45fc,0x0                                                                                      
0016c8   f022                                                                                                               
0016ca   6e2d     MOVWF     0x2d,0x0                                                                                        
0016cc   0e0d     MOVLW     0xd                                                                                             
0016ce   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0016d0   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           #else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"I,%03i,%03i,%03i\r\n",                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTA,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTB,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTC                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
0016d2   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // All we do here is just print out our version number                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0016d4   0e8a     MOVLW     0x8a           	printf ((rom char *)st_version);                                                e:\iro_svn\opensprints\FW\user\user.c
0016d6   6e2a     MOVWF     0x2a,0x0                                                                                        
0016d8   0e48     MOVLW     0x48                                                                                            
0016da   6e2b     MOVWF     0x2b,0x0                                                                                        
0016dc   6a2c     CLRF      0x2c,0x0                                                                                        
0016de   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016e0   ffe6                                                                                                               
0016e2   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016e4   ffe6                                                                                                               
0016e6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016e8   ffe6                                                                                                               
0016ea   ecfe     CALL      0x45fc,0x0                                                                                      
0016ec   f022                                                                                                               
0016ee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016f0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016f2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016f4   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // A is for read Analog inputs                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // Just print out the last analog values for each of the                         e:\iro_svn\opensprints\FW\user\user.c
                                           // enabled channels. The number of value returned in the                         e:\iro_svn\opensprints\FW\user\user.c
                                           // A packet depend upon the number of analog inputs enabled.                     e:\iro_svn\opensprints\FW\user\user.c
                                           // The user can enabled any number of analog inputs between                      e:\iro_svn\opensprints\FW\user\user.c
                                           // 0 and 12. (none enabled, through all 12 analog inputs enabled).               e:\iro_svn\opensprints\FW\user\user.c
                                           // Returned packet will look like "A,0,0,0,0,0,0<CR>" if                         e:\iro_svn\opensprints\FW\user\user.c
                                           // six analog inputs are enabled but they are all                                e:\iro_svn\opensprints\FW\user\user.c
                                           // grounded. Note that each one is a 10 bit                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // value, where 0 means the intput was at ground, and                            e:\iro_svn\opensprints\FW\user\user.c
                                           // 1024 means it was at +5 V. (Or whatever the USB +5                            e:\iro_svn\opensprints\FW\user\user.c
                                           // pin is at.)                                                                   e:\iro_svn\opensprints\FW\user\user.c
0016f6   cfd9     MOVFF     0xfd9,0xfe6    void parse_A_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
0016f8   ffe6                                                                                                               
0016fa   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0016fc   ffd9                                                                                                               
0016fe   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001700   6adf     CLRF      0xdf,0x0       	char channel = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Put the beginning of the packet in place                                     e:\iro_svn\opensprints\FW\user\user.c
001702   0e9c     MOVLW     0x9c           	printf ((rom char *)"A");                                                       e:\iro_svn\opensprints\FW\user\user.c
001704   6e2a     MOVWF     0x2a,0x0                                                                                        
001706   0e42     MOVLW     0x42                                                                                            
001708   6e2b     MOVWF     0x2b,0x0                                                                                        
00170a   6a2c     CLRF      0x2c,0x0                                                                                        
00170c   c02a     MOVFF     0x2a,0xfe6                                                                                      
00170e   ffe6                                                                                                               
001710   c02b     MOVFF     0x2b,0xfe6                                                                                      
001712   ffe6                                                                                                               
001714   c02c     MOVFF     0x2c,0xfe6                                                                                      
001716   ffe6                                                                                                               
001718   ecfe     CALL      0x45fc,0x0                                                                                      
00171a   f022                                                                                                               
00171c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00171e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001720   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now add each analog value                                                    e:\iro_svn\opensprints\FW\user\user.c
001722   6adf     CLRF      0xdf,0x0       	for (channel = 0; channel < AnalogEnable; channel++)                            e:\iro_svn\opensprints\FW\user\user.c
001724   500c     MOVF      0xc,0x0,0x0                                                                                     
001726   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001728   e232     BC        0x178e                                                                                          
00178a   2adf     INCF      0xdf,0x1,0x0                                                                                    
00178c   d7cb     BRA       0x1724                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		printf(                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			(rom char *)",%04u"                                                           e:\iro_svn\opensprints\FW\user\user.c
00172a   cfdf     MOVFF     0xfdf,0x2a     			,ISR_A_FIFO[channel][ISR_A_FIFO_out]                                          e:\iro_svn\opensprints\FW\user\user.c
00172c   f02a                                                                                                               
00172e   6a2b     CLRF      0x2b,0x0                                                                                        
001730   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
001732   682b     SETF      0x2b,0x0                                                                                        
001734   0e06     MOVLW     0x6                                                                                             
001736   022b     MULWF     0x2b,0x0                                                                                        
001738   cff3     MOVFF     0xff3,0x2b                                                                                      
00173a   f02b                                                                                                               
00173c   0e06     MOVLW     0x6                                                                                             
00173e   022a     MULWF     0x2a,0x0                                                                                        
001740   cff3     MOVFF     0xff3,0x2a                                                                                      
001742   f02a                                                                                                               
001744   50f4     MOVF      0xf4,0x0,0x0                                                                                    
001746   262b     ADDWF     0x2b,0x1,0x0                                                                                    
001748   0e00     MOVLW     0x0                                                                                             
00174a   262a     ADDWF     0x2a,0x1,0x0                                                                                    
00174c   0e01     MOVLW     0x1                                                                                             
00174e   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
001750   500a     MOVF      0xa,0x0,0x0                                                                                     
001752   0d02     MULLW     0x2                                                                                             
001754   502a     MOVF      0x2a,0x0,0x0                                                                                    
001756   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
001758   6ee9     MOVWF     0xe9,0x0                                                                                        
00175a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00175c   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
00175e   6eea     MOVWF     0xea,0x0                                                                                        
001768   0e96     MOVLW     0x96                                                                                            
00176a   6e2c     MOVWF     0x2c,0x0                                                                                        
00176c   0e42     MOVLW     0x42                                                                                            
00176e   6e2d     MOVWF     0x2d,0x0                                                                                        
001770   6a2e     CLRF      0x2e,0x0                                                                                        
001772   c02c     MOVFF     0x2c,0xfe6                                                                                      
001774   ffe6                                                                                                               
001776   c02d     MOVFF     0x2d,0xfe6                                                                                      
001778   ffe6                                                                                                               
00177a   c02e     MOVFF     0x2e,0xfe6                                                                                      
00177c   ffe6                                                                                                               
001760   cfee     MOVFF     0xfee,0xfe6    		);                                                                             e:\iro_svn\opensprints\FW\user\user.c
001762   ffe6                                                                                                               
001764   cfef     MOVFF     0xfef,0xfe6                                                                                     
001766   ffe6                                                                                                               
00177e   ecfe     CALL      0x45fc,0x0                                                                                      
001780   f022                                                                                                               
001782   6e2f     MOVWF     0x2f,0x0                                                                                        
001784   0e05     MOVLW     0x5                                                                                             
001786   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001788   502f     MOVF      0x2f,0x0,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Add \r\n and terminating zero.                                               e:\iro_svn\opensprints\FW\user\user.c
00178e   0e87     MOVLW     0x87           	printf ((rom char *)st_LFCR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001790   6e2a     MOVWF     0x2a,0x0                                                                                        
001792   0e48     MOVLW     0x48                                                                                            
001794   6e2b     MOVWF     0x2b,0x0                                                                                        
001796   6a2c     CLRF      0x2c,0x0                                                                                        
001798   c02a     MOVFF     0x2a,0xfe6                                                                                      
00179a   ffe6                                                                                                               
00179c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00179e   ffe6                                                                                                               
0017a0   c02c     MOVFF     0x2c,0xfe6                                                                                      
0017a2   ffe6                                                                                                               
0017a4   ecfe     CALL      0x45fc,0x0                                                                                      
0017a6   f022                                                                                                               
0017a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ae   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0017b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017b2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0017b4   ffd9                                                                                                               
0017b6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // MW is for Memory Write                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location>,<value><CR>"                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to write to  e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is a decimal value between 0 and 255 that is the value to write       e:\iro_svn\opensprints\FW\user\user.c
0017b8   cfd9     MOVFF     0xfd9,0xfe6    void parse_MW_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
0017ba   ffe6                                                                                                               
0017bc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0017be   ffd9                                                                                                               
0017c0   0e03     MOVLW     0x3                                                                                             
0017c2   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0017c4   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              e:\iro_svn\opensprints\FW\user\user.c
0017c6   6ee6     MOVWF     0xe6,0x0                                                                                        
0017c8   ecc7     CALL      0x238e,0x0                                                                                      
0017ca   f011                                                                                                               
0017cc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ce   c01d     MOVFF     0x1d,0xfde                                                                                      
0017d0   ffde                                                                                                               
0017d2   c01e     MOVFF     0x1e,0xfdd                                                                                      
0017d4   ffdd                                                                                                               
0017d6   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                e:\iro_svn\opensprints\FW\user\user.c
0017d8   6ee6     MOVWF     0xe6,0x0                                                                                        
0017da   ecc7     CALL      0x238e,0x0                                                                                      
0017dc   f011                                                                                                               
0017de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017e0   0e02     MOVLW     0x2                                                                                             
0017e2   c01d     MOVFF     0x1d,0xfdb                                                                                      
0017e4   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0017e6   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0017e8   e001     BZ        0x17ec                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0017ea   d011     BRA       0x180e         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                e:\iro_svn\opensprints\FW\user\user.c
0017ec   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            e:\iro_svn\opensprints\FW\user\user.c
0017ee   f02a                                                                                                               
0017f0   cfdd     MOVFF     0xfdd,0x2b                                                                                      
0017f2   f02b                                                                                                               
0017f4   0e00     MOVLW     0x0                                                                                             
0017f6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0017f8   0e10     MOVLW     0x10                                                                                            
0017fa   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0017fc   e207     BC        0x180c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0017fe   cfde     MOVFF     0xfde,0xfe9    		*((unsigned char *)location) = value;                                          e:\iro_svn\opensprints\FW\user\user.c
001800   ffe9                                                                                                               
001802   cfdd     MOVFF     0xfdd,0xfea                                                                                     
001804   ffea                                                                                                               
001806   0e02     MOVLW     0x2                                                                                             
001808   cfdb     MOVFF     0xfdb,0xfef                                                                                     
00180a   ffef                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
00180c   dded     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00180e   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001810   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001812   e202     BC        0x1818                                                                                          
001814   6ae1     CLRF      0xe1,0x0                                                                                        
001816   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001818   6ee1     MOVWF     0xe1,0x0                                                                                        
00181a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00181c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00181e   ffd9                                                                                                               
001820   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // MR is for Memory Read                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location><CR>"                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to read from  e:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will then send a "MR,<value><CR>" packet back to the PC               e:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the byte value read from the address                         e:\iro_svn\opensprints\FW\user\user.c
001822   cfd9     MOVFF     0xfd9,0xfe6    void parse_MR_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001824   ffe6                                                                                                               
001826   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001828   ffd9                                                                                                               
00182a   0e03     MOVLW     0x3                                                                                             
00182c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
00182e   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              e:\iro_svn\opensprints\FW\user\user.c
001830   6ee6     MOVWF     0xe6,0x0                                                                                        
001832   ecc7     CALL      0x238e,0x0                                                                                      
001834   f011                                                                                                               
001836   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001838   c01d     MOVFF     0x1d,0xfde                                                                                      
00183a   ffde                                                                                                               
00183c   c01e     MOVFF     0x1e,0xfdd                                                                                      
00183e   ffdd                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001840   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001842   e001     BZ        0x1846                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001844   d025     BRA       0x1890         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                e:\iro_svn\opensprints\FW\user\user.c
001846   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            e:\iro_svn\opensprints\FW\user\user.c
001848   f02a                                                                                                               
00184a   cfdd     MOVFF     0xfdd,0x2b                                                                                      
00184c   f02b                                                                                                               
00184e   0e00     MOVLW     0x0                                                                                             
001850   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001852   0e10     MOVLW     0x10                                                                                            
001854   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
001856   e207     BC        0x1866                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001858   cfde     MOVFF     0xfde,0xfe9    		value = *((unsigned char *)location);                                          e:\iro_svn\opensprints\FW\user\user.c
00185a   ffe9                                                                                                               
00185c   cfdd     MOVFF     0xfdd,0xfea                                                                                     
00185e   ffea                                                                                                               
001860   0e02     MOVLW     0x2                                                                                             
001862   cfef     MOVFF     0xfef,0xfdb                                                                                     
001864   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back the MR packet                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char *)"MR,%03u\r\n"                                                      e:\iro_svn\opensprints\FW\user\user.c
00186e   0e8c     MOVLW     0x8c           		,value                                                                         e:\iro_svn\opensprints\FW\user\user.c
001870   6e2a     MOVWF     0x2a,0x0                                                                                        
001872   0e42     MOVLW     0x42                                                                                            
001874   6e2b     MOVWF     0x2b,0x0                                                                                        
001876   6a2c     CLRF      0x2c,0x0                                                                                        
001878   c02a     MOVFF     0x2a,0xfe6                                                                                      
00187a   ffe6                                                                                                               
00187c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00187e   ffe6                                                                                                               
001880   c02c     MOVFF     0x2c,0xfe6                                                                                      
001882   ffe6                                                                                                               
001866   0e02     MOVLW     0x2            	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001868   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00186a   ffe6                                                                                                               
00186c   6ae6     CLRF      0xe6,0x0                                                                                        
001884   ecfe     CALL      0x45fc,0x0                                                                                      
001886   f022                                                                                                               
001888   6e2d     MOVWF     0x2d,0x0                                                                                        
00188a   0e05     MOVLW     0x5                                                                                             
00188c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00188e   502d     MOVF      0x2d,0x0,0x0                                                                                    
001890   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001892   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001894   e202     BC        0x189a                                                                                          
001896   6ae1     CLRF      0xe1,0x0                                                                                        
001898   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00189a   6ee1     MOVWF     0xe1,0x0                                                                                        
00189c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00189e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0018a0   ffd9                                                                                                               
0018a2   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PD is for Pin Direction                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // "PD,<port>,<pin>,<direction><CR>"                                             e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to change direction on e:\iro_svn\opensprints\FW\user\user.c
                                           // <direction> is "1" for input, "0" for output                                  e:\iro_svn\opensprints\FW\user\user.c
0018a4   cfd9     MOVFF     0xfd9,0xfe6    void parse_PD_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
0018a6   ffe6                                                                                                               
0018a8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0018aa   ffd9                                                                                                               
0018ac   0e03     MOVLW     0x3                                                                                             
0018ae   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char direction;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0018b0   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
0018b2   6ee6     MOVWF     0xe6,0x0                                                                                        
0018b4   ecc7     CALL      0x238e,0x0                                                                                      
0018b6   f011                                                                                                               
0018b8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018ba   501d     MOVF      0x1d,0x0,0x0                                                                                    
0018bc   6edf     MOVWF     0xdf,0x0                                                                                        
0018be   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
0018c0   6ee6     MOVWF     0xe6,0x0                                                                                        
0018c2   ecc7     CALL      0x238e,0x0                                                                                      
0018c4   f011                                                                                                               
0018c6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018c8   0e01     MOVLW     0x1                                                                                             
0018ca   c01d     MOVFF     0x1d,0xfdb                                                                                      
0018cc   ffdb                                                                                                               
0018ce   0e01     MOVLW     0x1            	direction = extract_number (kUCHAR);                                            e:\iro_svn\opensprints\FW\user\user.c
0018d0   6ee6     MOVWF     0xe6,0x0                                                                                        
0018d2   ecc7     CALL      0x238e,0x0                                                                                      
0018d4   f011                                                                                                               
0018d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018d8   0e02     MOVLW     0x2                                                                                             
0018da   c01d     MOVFF     0x1d,0xfdb                                                                                      
0018dc   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0018de   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0018e0   e001     BZ        0x18e4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018e2   d0b4     BRA       0x1a4c         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
0018e4   0e02     MOVLW     0x2            	if (direction > 1)                                                              e:\iro_svn\opensprints\FW\user\user.c
0018e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018e8   0801     SUBLW     0x1                                                                                             
0018ea   e202     BC        0x18f0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018ec   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0018ee   d0ae     BRA       0x1a4c         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018f0   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0018f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018f4   0807     SUBLW     0x7                                                                                             
0018f6   e202     BC        0x18fc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018f8   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0018fa   d0a8     BRA       0x1a4c         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018fc   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
0018fe   6e2a     MOVWF     0x2a,0x0                                                                                        
001900   50df     MOVF      0xdf,0x0,0x0                                                                                    
001902   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001904   e11c     BNZ       0x193e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001906   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
001908   50db     MOVF      0xdb,0x0,0x0                                                                                    
00190a   e10d     BNZ       0x1926                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00190c   0e01     MOVLW     0x1            			bitclr (DDRA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
00190e   6ef3     MOVWF     0xf3,0x0                                                                                        
001910   0e01     MOVLW     0x1                                                                                             
001912   50db     MOVF      0xdb,0x0,0x0                                                                                    
001914   e004     BZ        0x191e                                                                                          
001916   90d8     BCF       0xd8,0x0,0x0                                                                                    
001918   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00191a   06e8     DECF      0xe8,0x1,0x0                                                                                    
00191c   e1fc     BNZ       0x1916                                                                                          
00191e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001920   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001922   1692     ANDWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001924   d00b     BRA       0x193c         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001926   0e01     MOVLW     0x1            			bitset (DDRA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001928   6ef3     MOVWF     0xf3,0x0                                                                                        
00192a   0e01     MOVLW     0x1                                                                                             
00192c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00192e   e004     BZ        0x1938                                                                                          
001930   90d8     BCF       0xd8,0x0,0x0                                                                                    
001932   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001934   06e8     DECF      0xe8,0x1,0x0                                                                                    
001936   e1fc     BNZ       0x1930                                                                                          
001938   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00193a   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
00193c   d086     BRA       0x1a4a         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
00193e   0e42     MOVLW     0x42                                                                                            
001940   6e2a     MOVWF     0x2a,0x0                                                                                        
001942   50df     MOVF      0xdf,0x0,0x0                                                                                    
001944   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001946   e11c     BNZ       0x1980                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001948   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
00194a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00194c   e10d     BNZ       0x1968                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00194e   0e01     MOVLW     0x1            			bitclr (DDRB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001950   6ef3     MOVWF     0xf3,0x0                                                                                        
001952   0e01     MOVLW     0x1                                                                                             
001954   50db     MOVF      0xdb,0x0,0x0                                                                                    
001956   e004     BZ        0x1960                                                                                          
001958   90d8     BCF       0xd8,0x0,0x0                                                                                    
00195a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00195c   06e8     DECF      0xe8,0x1,0x0                                                                                    
00195e   e1fc     BNZ       0x1958                                                                                          
001960   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001962   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001964   1693     ANDWF     0x93,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001966   d00b     BRA       0x197e         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001968   0e01     MOVLW     0x1            			bitset (DDRB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
00196a   6ef3     MOVWF     0xf3,0x0                                                                                        
00196c   0e01     MOVLW     0x1                                                                                             
00196e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001970   e004     BZ        0x197a                                                                                          
001972   90d8     BCF       0xd8,0x0,0x0                                                                                    
001974   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001976   06e8     DECF      0xe8,0x1,0x0                                                                                    
001978   e1fc     BNZ       0x1972                                                                                          
00197a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00197c   1293     IORWF     0x93,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
00197e   d065     BRA       0x1a4a         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001980   0e43     MOVLW     0x43                                                                                            
001982   6e2a     MOVWF     0x2a,0x0                                                                                        
001984   50df     MOVF      0xdf,0x0,0x0                                                                                    
001986   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001988   e11c     BNZ       0x19c2                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00198a   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
00198c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00198e   e10d     BNZ       0x19aa                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001990   0e01     MOVLW     0x1            			bitclr (DDRC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001992   6ef3     MOVWF     0xf3,0x0                                                                                        
001994   0e01     MOVLW     0x1                                                                                             
001996   50db     MOVF      0xdb,0x0,0x0                                                                                    
001998   e004     BZ        0x19a2                                                                                          
00199a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00199c   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00199e   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019a0   e1fc     BNZ       0x199a                                                                                          
0019a2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019a4   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0019a6   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0019a8   d00b     BRA       0x19c0         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0019aa   0e01     MOVLW     0x1            			bitset (DDRC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
0019ac   6ef3     MOVWF     0xf3,0x0                                                                                        
0019ae   0e01     MOVLW     0x1                                                                                             
0019b0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019b2   e004     BZ        0x19bc                                                                                          
0019b4   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019b6   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019b8   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019ba   e1fc     BNZ       0x19b4                                                                                          
0019bc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019be   1294     IORWF     0x94,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
0019c0   d044     BRA       0x1a4a         	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
0019c2   0e44     MOVLW     0x44                                                                                            
0019c4   6e2a     MOVWF     0x2a,0x0                                                                                        
0019c6   50df     MOVF      0xdf,0x0,0x0                                                                                    
0019c8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0019ca   e11c     BNZ       0x1a04                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0019cc   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
0019ce   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019d0   e10d     BNZ       0x19ec                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0019d2   0e01     MOVLW     0x1            			bitclr (DDRD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
0019d4   6ef3     MOVWF     0xf3,0x0                                                                                        
0019d6   0e01     MOVLW     0x1                                                                                             
0019d8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019da   e004     BZ        0x19e4                                                                                          
0019dc   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019de   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019e0   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019e2   e1fc     BNZ       0x19dc                                                                                          
0019e4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019e6   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0019e8   1695     ANDWF     0x95,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0019ea   d00b     BRA       0x1a02         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0019ec   0e01     MOVLW     0x1            			bitset (DDRD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
0019ee   6ef3     MOVWF     0xf3,0x0                                                                                        
0019f0   0e01     MOVLW     0x1                                                                                             
0019f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019f4   e004     BZ        0x19fe                                                                                          
0019f6   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019f8   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019fa   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019fc   e1fc     BNZ       0x19f6                                                                                          
0019fe   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a00   1295     IORWF     0x95,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a02   d023     BRA       0x1a4a         	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001a04   0e45     MOVLW     0x45                                                                                            
001a06   6e2a     MOVWF     0x2a,0x0                                                                                        
001a08   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a0a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a0c   e11c     BNZ       0x1a46                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a0e   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
001a10   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a12   e10d     BNZ       0x1a2e                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001a14   0e01     MOVLW     0x1            			bitclr (DDRE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001a16   6ef3     MOVWF     0xf3,0x0                                                                                        
001a18   0e01     MOVLW     0x1                                                                                             
001a1a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a1c   e004     BZ        0x1a26                                                                                          
001a1e   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a20   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a22   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a24   e1fc     BNZ       0x1a1e                                                                                          
001a26   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a28   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001a2a   1696     ANDWF     0x96,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001a2c   d00b     BRA       0x1a44         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001a2e   0e01     MOVLW     0x1            			bitset (DDRE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001a30   6ef3     MOVWF     0xf3,0x0                                                                                        
001a32   0e01     MOVLW     0x1                                                                                             
001a34   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a36   e004     BZ        0x1a40                                                                                          
001a38   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a3a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a3c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a3e   e1fc     BNZ       0x1a38                                                                                          
001a40   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a42   1296     IORWF     0x96,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001a44   d002     BRA       0x1a4a         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a46   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001a48   d001     BRA       0x1a4c         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001a4a   dcce     RCALL     0x13e8         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001a4c   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001a4e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001a50   e202     BC        0x1a56                                                                                          
001a52   6ae1     CLRF      0xe1,0x0                                                                                        
001a54   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a56   6ee1     MOVWF     0xe1,0x0                                                                                        
001a58   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a5a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001a5c   ffd9                                                                                                               
001a5e   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PI is for Pin Input                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // "PI,<port>,<pin><CR>"                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to read             e:\iro_svn\opensprints\FW\user\user.c
                                           // The command returns a "PI,<value><CR>" packet,                                e:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the value (0 or 1 for digital, 0 to 1024 for Analog)         e:\iro_svn\opensprints\FW\user\user.c
                                           // value for that pin.                                                           e:\iro_svn\opensprints\FW\user\user.c
001a60   cfd9     MOVFF     0xfd9,0xfe6    void parse_PI_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001a62   ffe6                                                                                                               
001a64   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001a66   ffd9                                                                                                               
001a68   0e03     MOVLW     0x3                                                                                             
001a6a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
001a6c   0e02     MOVLW     0x2            	unsigned char value = 0;                                                        e:\iro_svn\opensprints\FW\user\user.c
001a6e   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001a70   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001a72   6ee6     MOVWF     0xe6,0x0                                                                                        
001a74   ecc7     CALL      0x238e,0x0                                                                                      
001a76   f011                                                                                                               
001a78   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a7a   501d     MOVF      0x1d,0x0,0x0                                                                                    
001a7c   6edf     MOVWF     0xdf,0x0                                                                                        
001a7e   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001a80   6ee6     MOVWF     0xe6,0x0                                                                                        
001a82   ecc7     CALL      0x238e,0x0                                                                                      
001a84   f011                                                                                                               
001a86   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a88   0e01     MOVLW     0x1                                                                                             
001a8a   c01d     MOVFF     0x1d,0xfdb                                                                                      
001a8c   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001a8e   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001a90   e001     BZ        0x1a94                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a92   d086     BRA       0x1ba0         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
001a94   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
001a96   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a98   0807     SUBLW     0x7                                                                                             
001a9a   e202     BC        0x1aa0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a9c   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001a9e   d080     BRA       0x1ba0         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Then test the bit in question based upon port                                e:\iro_svn\opensprints\FW\user\user.c
001aa0   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
001aa2   6e2a     MOVWF     0x2a,0x0                                                                                        
001aa4   50df     MOVF      0xdf,0x0,0x0                                                                                    
001aa6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001aa8   e110     BNZ       0x1aca                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001aaa   0e01     MOVLW     0x1            		value = bittst (PORTA, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001aac   6ef3     MOVWF     0xf3,0x0                                                                                        
001aae   0e01     MOVLW     0x1                                                                                             
001ab0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ab2   e004     BZ        0x1abc                                                                                          
001ab4   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ab6   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001ab8   06e8     DECF      0xe8,0x1,0x0                                                                                    
001aba   e1fc     BNZ       0x1ab4                                                                                          
001abc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001abe   1480     ANDWF     0x80,0x0,0x0                                                                                    
001ac0   6ee7     MOVWF     0xe7,0x0                                                                                        
001ac2   0e02     MOVLW     0x2                                                                                             
001ac4   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001ac6   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ac8   d056     BRA       0x1b76         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001aca   0e42     MOVLW     0x42                                                                                            
001acc   6e2a     MOVWF     0x2a,0x0                                                                                        
001ace   50df     MOVF      0xdf,0x0,0x0                                                                                    
001ad0   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001ad2   e110     BNZ       0x1af4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ad4   0e01     MOVLW     0x1            		value = bittst (PORTB, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001ad6   6ef3     MOVWF     0xf3,0x0                                                                                        
001ad8   0e01     MOVLW     0x1                                                                                             
001ada   50db     MOVF      0xdb,0x0,0x0                                                                                    
001adc   e004     BZ        0x1ae6                                                                                          
001ade   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ae0   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001ae2   06e8     DECF      0xe8,0x1,0x0                                                                                    
001ae4   e1fc     BNZ       0x1ade                                                                                          
001ae6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001ae8   1481     ANDWF     0x81,0x0,0x0                                                                                    
001aea   6ee7     MOVWF     0xe7,0x0                                                                                        
001aec   0e02     MOVLW     0x2                                                                                             
001aee   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001af0   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001af2   d041     BRA       0x1b76         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001af4   0e43     MOVLW     0x43                                                                                            
001af6   6e2a     MOVWF     0x2a,0x0                                                                                        
001af8   50df     MOVF      0xdf,0x0,0x0                                                                                    
001afa   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001afc   e110     BNZ       0x1b1e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001afe   0e01     MOVLW     0x1            		value = bittst (PORTC, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001b00   6ef3     MOVWF     0xf3,0x0                                                                                        
001b02   0e01     MOVLW     0x1                                                                                             
001b04   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b06   e004     BZ        0x1b10                                                                                          
001b08   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b0a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b0c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b0e   e1fc     BNZ       0x1b08                                                                                          
001b10   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b12   1482     ANDWF     0x82,0x0,0x0                                                                                    
001b14   6ee7     MOVWF     0xe7,0x0                                                                                        
001b16   0e02     MOVLW     0x2                                                                                             
001b18   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001b1a   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
001b1c   d02c     BRA       0x1b76         	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001b1e   0e44     MOVLW     0x44                                                                                            
001b20   6e2a     MOVWF     0x2a,0x0                                                                                        
001b22   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b24   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b26   e110     BNZ       0x1b48                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b28   0e01     MOVLW     0x1            		value = bittst (PORTD, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001b2a   6ef3     MOVWF     0xf3,0x0                                                                                        
001b2c   0e01     MOVLW     0x1                                                                                             
001b2e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b30   e004     BZ        0x1b3a                                                                                          
001b32   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b34   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b36   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b38   e1fc     BNZ       0x1b32                                                                                          
001b3a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b3c   1483     ANDWF     0x83,0x0,0x0                                                                                    
001b3e   6ee7     MOVWF     0xe7,0x0                                                                                        
001b40   0e02     MOVLW     0x2                                                                                             
001b42   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001b44   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b46   d017     BRA       0x1b76         	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001b48   0e45     MOVLW     0x45                                                                                            
001b4a   6e2a     MOVWF     0x2a,0x0                                                                                        
001b4c   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b4e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b50   e110     BNZ       0x1b72                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b52   0e01     MOVLW     0x1            		value = bittst (PORTE, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001b54   6ef3     MOVWF     0xf3,0x0                                                                                        
001b56   0e01     MOVLW     0x1                                                                                             
001b58   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b5a   e004     BZ        0x1b64                                                                                          
001b5c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b5e   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b60   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b62   e1fc     BNZ       0x1b5c                                                                                          
001b64   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b66   1484     ANDWF     0x84,0x0,0x0                                                                                    
001b68   6ee7     MOVWF     0xe7,0x0                                                                                        
001b6a   0e02     MOVLW     0x2                                                                                             
001b6c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001b6e   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001b70   d002     BRA       0x1b76         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b72   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001b74   d015     BRA       0x1ba0         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back our response                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		 (rom char *)"PI,%1u\r\n"                                                      e:\iro_svn\opensprints\FW\user\user.c
001b7e   0e83     MOVLW     0x83           		,value                                                                         e:\iro_svn\opensprints\FW\user\user.c
001b80   6e2a     MOVWF     0x2a,0x0                                                                                        
001b82   0e42     MOVLW     0x42                                                                                            
001b84   6e2b     MOVWF     0x2b,0x0                                                                                        
001b86   6a2c     CLRF      0x2c,0x0                                                                                        
001b88   c02a     MOVFF     0x2a,0xfe6                                                                                      
001b8a   ffe6                                                                                                               
001b8c   c02b     MOVFF     0x2b,0xfe6                                                                                      
001b8e   ffe6                                                                                                               
001b90   c02c     MOVFF     0x2c,0xfe6                                                                                      
001b92   ffe6                                                                                                               
001b76   0e02     MOVLW     0x2            	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b78   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001b7a   ffe6                                                                                                               
001b7c   6ae6     CLRF      0xe6,0x0                                                                                        
001b94   ecfe     CALL      0x45fc,0x0                                                                                      
001b96   f022                                                                                                               
001b98   6e2d     MOVWF     0x2d,0x0                                                                                        
001b9a   0e05     MOVLW     0x5                                                                                             
001b9c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001b9e   502d     MOVF      0x2d,0x0,0x0                                                                                    
001ba0   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001ba2   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001ba4   e202     BC        0x1baa                                                                                          
001ba6   6ae1     CLRF      0xe1,0x0                                                                                        
001ba8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001baa   6ee1     MOVWF     0xe1,0x0                                                                                        
001bac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bae   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001bb0   ffd9                                                                                                               
001bb2   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PO is for Pin Output                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           // "PO,<port>,<pin>,<value><CR>"                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to write out the value to e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is "1" or "0" and indicates the state to change the pin to            e:\iro_svn\opensprints\FW\user\user.c
001bb4   cfd9     MOVFF     0xfd9,0xfe6    void parse_PO_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001bb6   ffe6                                                                                                               
001bb8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001bba   ffd9                                                                                                               
001bbc   0e03     MOVLW     0x3                                                                                             
001bbe   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001bc0   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001bc2   6ee6     MOVWF     0xe6,0x0                                                                                        
001bc4   dbe4     RCALL     0x238e                                                                                          
001bc6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bc8   501d     MOVF      0x1d,0x0,0x0                                                                                    
001bca   6edf     MOVWF     0xdf,0x0                                                                                        
001bcc   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001bce   6ee6     MOVWF     0xe6,0x0                                                                                        
001bd0   dbde     RCALL     0x238e                                                                                          
001bd2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bd4   0e01     MOVLW     0x1                                                                                             
001bd6   c01d     MOVFF     0x1d,0xfdb                                                                                      
001bd8   ffdb                                                                                                               
001bda   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                e:\iro_svn\opensprints\FW\user\user.c
001bdc   6ee6     MOVWF     0xe6,0x0                                                                                        
001bde   dbd7     RCALL     0x238e                                                                                          
001be0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001be2   0e02     MOVLW     0x2                                                                                             
001be4   c01d     MOVFF     0x1d,0xfdb                                                                                      
001be6   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001be8   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001bea   e001     BZ        0x1bee                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001bec   d0b5     BRA       0x1d58         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
001bee   0e02     MOVLW     0x2            	if (value > 1)                                                                  e:\iro_svn\opensprints\FW\user\user.c
001bf0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bf2   0801     SUBLW     0x1                                                                                             
001bf4   e202     BC        0x1bfa                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001bf6   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001bf8   d0af     BRA       0x1d58         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001bfa   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
001bfc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bfe   0807     SUBLW     0x7                                                                                             
001c00   e202     BC        0x1c06                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c02   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001c04   d0a9     BRA       0x1d58         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c06   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
001c08   6e2a     MOVWF     0x2a,0x0                                                                                        
001c0a   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c0c   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c0e   e11c     BNZ       0x1c48                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c10   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001c12   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c14   e10d     BNZ       0x1c30                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c16   0e01     MOVLW     0x1            			bitclr (LATA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001c18   6ef3     MOVWF     0xf3,0x0                                                                                        
001c1a   0e01     MOVLW     0x1                                                                                             
001c1c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c1e   e004     BZ        0x1c28                                                                                          
001c20   90d8     BCF       0xd8,0x0,0x0                                                                                    
001c22   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001c24   06e8     DECF      0xe8,0x1,0x0                                                                                    
001c26   e1fc     BNZ       0x1c20                                                                                          
001c28   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001c2a   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001c2c   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c2e   d00b     BRA       0x1c46         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c30   0e01     MOVLW     0x1            			bitset (LATA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001c32   6ef3     MOVWF     0xf3,0x0                                                                                        
001c34   0e01     MOVLW     0x1                                                                                             
001c36   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c38   e004     BZ        0x1c42                                                                                          
001c3a   90d8     BCF       0xd8,0x0,0x0                                                                                    
001c3c   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001c3e   06e8     DECF      0xe8,0x1,0x0                                                                                    
001c40   e1fc     BNZ       0x1c3a                                                                                          
001c42   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001c44   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c46   d086     BRA       0x1d54         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001c48   0e42     MOVLW     0x42                                                                                            
001c4a   6e2a     MOVWF     0x2a,0x0                                                                                        
001c4c   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c4e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c50   e11c     BNZ       0x1c8a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c52   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001c54   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c56   e10d     BNZ       0x1c72                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c58   0e01     MOVLW     0x1            			bitclr (LATB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001c5a   6ef3     MOVWF     0xf3,0x0                                                                                        
001c5c   0e01     MOVLW     0x1                                                                                             
001c5e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c60   e004     BZ        0x1c6a                                                                                          
001c62   90d8     BCF       0xd8,0x0,0x0                                                                                    
001c64   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001c66   06e8     DECF      0xe8,0x1,0x0                                                                                    
001c68   e1fc     BNZ       0x1c62                                                                                          
001c6a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001c6c   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001c6e   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c70   d00b     BRA       0x1c88         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c72   0e01     MOVLW     0x1            			bitset (LATB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001c74   6ef3     MOVWF     0xf3,0x0                                                                                        
001c76   0e01     MOVLW     0x1                                                                                             
001c78   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c7a   e004     BZ        0x1c84                                                                                          
001c7c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001c7e   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001c80   06e8     DECF      0xe8,0x1,0x0                                                                                    
001c82   e1fc     BNZ       0x1c7c                                                                                          
001c84   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001c86   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c88   d065     BRA       0x1d54         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001c8a   0e43     MOVLW     0x43                                                                                            
001c8c   6e2a     MOVWF     0x2a,0x0                                                                                        
001c8e   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c90   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c92   e11c     BNZ       0x1ccc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c94   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001c96   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c98   e10d     BNZ       0x1cb4                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001c9a   0e01     MOVLW     0x1            			bitclr (LATC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001c9c   6ef3     MOVWF     0xf3,0x0                                                                                        
001c9e   0e01     MOVLW     0x1                                                                                             
001ca0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ca2   e004     BZ        0x1cac                                                                                          
001ca4   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ca6   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001ca8   06e8     DECF      0xe8,0x1,0x0                                                                                    
001caa   e1fc     BNZ       0x1ca4                                                                                          
001cac   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001cae   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001cb0   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001cb2   d00b     BRA       0x1cca         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001cb4   0e01     MOVLW     0x1            			bitset (LATC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001cb6   6ef3     MOVWF     0xf3,0x0                                                                                        
001cb8   0e01     MOVLW     0x1                                                                                             
001cba   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cbc   e004     BZ        0x1cc6                                                                                          
001cbe   90d8     BCF       0xd8,0x0,0x0                                                                                    
001cc0   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001cc2   06e8     DECF      0xe8,0x1,0x0                                                                                    
001cc4   e1fc     BNZ       0x1cbe                                                                                          
001cc6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001cc8   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
001cca   d044     BRA       0x1d54         	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001ccc   0e44     MOVLW     0x44                                                                                            
001cce   6e2a     MOVWF     0x2a,0x0                                                                                        
001cd0   50df     MOVF      0xdf,0x0,0x0                                                                                    
001cd2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001cd4   e11c     BNZ       0x1d0e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001cd6   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001cd8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cda   e10d     BNZ       0x1cf6                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001cdc   0e01     MOVLW     0x1            			bitclr (LATD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001cde   6ef3     MOVWF     0xf3,0x0                                                                                        
001ce0   0e01     MOVLW     0x1                                                                                             
001ce2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ce4   e004     BZ        0x1cee                                                                                          
001ce6   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ce8   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001cea   06e8     DECF      0xe8,0x1,0x0                                                                                    
001cec   e1fc     BNZ       0x1ce6                                                                                          
001cee   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001cf0   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001cf2   168c     ANDWF     0x8c,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001cf4   d00b     BRA       0x1d0c         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001cf6   0e01     MOVLW     0x1            			bitset (LATD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001cf8   6ef3     MOVWF     0xf3,0x0                                                                                        
001cfa   0e01     MOVLW     0x1                                                                                             
001cfc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cfe   e004     BZ        0x1d08                                                                                          
001d00   90d8     BCF       0xd8,0x0,0x0                                                                                    
001d02   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001d04   06e8     DECF      0xe8,0x1,0x0                                                                                    
001d06   e1fc     BNZ       0x1d00                                                                                          
001d08   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001d0a   128c     IORWF     0x8c,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001d0c   d023     BRA       0x1d54         	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001d0e   0e45     MOVLW     0x45                                                                                            
001d10   6e2a     MOVWF     0x2a,0x0                                                                                        
001d12   50df     MOVF      0xdf,0x0,0x0                                                                                    
001d14   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001d16   e11c     BNZ       0x1d50                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001d18   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001d1a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d1c   e10d     BNZ       0x1d38                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001d1e   0e01     MOVLW     0x1            			bitclr (LATE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001d20   6ef3     MOVWF     0xf3,0x0                                                                                        
001d22   0e01     MOVLW     0x1                                                                                             
001d24   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d26   e004     BZ        0x1d30                                                                                          
001d28   90d8     BCF       0xd8,0x0,0x0                                                                                    
001d2a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001d2c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001d2e   e1fc     BNZ       0x1d28                                                                                          
001d30   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001d32   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001d34   168d     ANDWF     0x8d,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001d36   d00b     BRA       0x1d4e         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001d38   0e01     MOVLW     0x1            			bitset (LATE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001d3a   6ef3     MOVWF     0xf3,0x0                                                                                        
001d3c   0e01     MOVLW     0x1                                                                                             
001d3e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d40   e004     BZ        0x1d4a                                                                                          
001d42   90d8     BCF       0xd8,0x0,0x0                                                                                    
001d44   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001d46   06e8     DECF      0xe8,0x1,0x0                                                                                    
001d48   e1fc     BNZ       0x1d42                                                                                          
001d4a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001d4c   128d     IORWF     0x8d,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001d4e   d002     BRA       0x1d54         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001d50   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001d52   d002     BRA       0x1d58         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d54   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d56   f009                                                                                                               
001d58   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d5a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001d5c   e202     BC        0x1d62                                                                                          
001d5e   6ae1     CLRF      0xe1,0x0                                                                                        
001d60   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d62   6ee1     MOVWF     0xe1,0x0                                                                                        
001d64   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d66   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001d68   ffd9                                                                                                               
001d6a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // TX is for Serial Transmit                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // "TX,<data_length>,<variable_length_data><CR>"                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <data_length> is a count of the number of bytes in the <variable_length_data> field. e:\iro_svn\opensprints\FW\user\user.c
                                           // It must never be larger than the number of bytes that are currently free in the e:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer or some data will get lost.                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> are the bytes that you want the UBW to send. It will store them e:\iro_svn\opensprints\FW\user\user.c
                                           // in its software TX buffer until there is time to send them out the TX pin.    e:\iro_svn\opensprints\FW\user\user.c
                                           // If you send in "0" for a <data_length" (and thus nothing for <variable_length_data> e:\iro_svn\opensprints\FW\user\user.c
                                           // then the UBW will send back a "TX,<free_buffer_space><CR>" packet,            e:\iro_svn\opensprints\FW\user\user.c
                                           // where <free_buffer_space> is the number of bytes currently available in the   e:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer.                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d6c   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d6e   f009                                                                                                               
001d70   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RX is for Serial Receive                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // "RX,<length_request><CR>"                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> is the maximum number of characters that you want the UBW to send e:\iro_svn\opensprints\FW\user\user.c
                                           // back to you in the RX packet. If you use "0" for <length_request> then the UBW e:\iro_svn\opensprints\FW\user\user.c
                                           // will just send you the current number of bytes in it's RX buffer, and if      e:\iro_svn\opensprints\FW\user\user.c
                                           // there have been any buffer overruns since the last time a <length_request> of  e:\iro_svn\opensprints\FW\user\user.c
                                           // "0" was received by the UBW.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // This command will send back a "RX,<length>,<variable_length_data><CR>"        e:\iro_svn\opensprints\FW\user\user.c
                                           // or "RX,<buffer_fullness>,<status><CR>" packet depending upon if you send      e:\iro_svn\opensprints\FW\user\user.c
                                           // "0" or something else for <length_request>                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // <length> in the returning RX packet is a count of the number of bytes         e:\iro_svn\opensprints\FW\user\user.c
                                           // in the <variable_length_data> field. It will never be more than the           e:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> you sent in.                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> is the data (in raw form - byte for byte what was received -  e:\iro_svn\opensprints\FW\user\user.c
                                           // i.e. not translated in any way, into ASCII values or anything else) that the UBW e:\iro_svn\opensprints\FW\user\user.c
                                           // received. This may include <CR>s and NULLs among any other bytes, so make sure e:\iro_svn\opensprints\FW\user\user.c
                                           // your PC application treates the RX packet coming back from the UBW in a speical way e:\iro_svn\opensprints\FW\user\user.c
                                           // so as not to screw up normal packet processing if any special caracters are received. e:\iro_svn\opensprints\FW\user\user.c
                                           // <buffer_fullness> is a valule between 0 and MAX_SERIAL_RX_BUFFER_SIZE that records e:\iro_svn\opensprints\FW\user\user.c
                                           // the total number of bytes, at that point in time, that the UBW is holding, waiting e:\iro_svn\opensprints\FW\user\user.c
                                           // to pass on to the PC.                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // <status> has several bits.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 0 = Software RX Buffer Overrun (1 means software RX buffer (on RX pin)    e:\iro_svn\opensprints\FW\user\user.c
                                           //		has been overrun and data has been lost) This will happen if you don't       e:\iro_svn\opensprints\FW\user\user.c
                                           //		read the data out of the UWB often enough and the data is coming in too fast. e:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 1 = Software TX Buffer Overrun (1 means software TX buffer (on TX pin)    e:\iro_svn\opensprints\FW\user\user.c
                                           //		as been overrun and data hs been lost. This will happen if you send too much e:\iro_svn\opensprints\FW\user\user.c
                                           //		data to the UBW and you have the serial port set to a low baud rate.         e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d72   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d74   f009                                                                                                               
001d76   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CX is for setting up serial port parameters                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // TBD                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d78   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d7a   f009                                                                                                               
001d7c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RC is for outputting RC servo pulses on a pin                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // "RC,<port>,<pin>,<value><CR>"                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to output the new value on e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is an unsigned 16 bit number between 0 and 11890.                     e:\iro_svn\opensprints\FW\user\user.c
                                           // If <value> is "0" then the RC output on that pin is disabled.                 e:\iro_svn\opensprints\FW\user\user.c
                                           // Otherwise <value> = 1 means 1ms pulse, <value> = 11890 means 2ms pulse,       e:\iro_svn\opensprints\FW\user\user.c
                                           // any value inbetween means proportional pulse values between those two         e:\iro_svn\opensprints\FW\user\user.c
                                           // Note: The pin used for RC output must be set as an output, or not much will happen. e:\iro_svn\opensprints\FW\user\user.c
                                           // The RC command will continue to send out pulses at the last set value on      e:\iro_svn\opensprints\FW\user\user.c
                                           // each pin that has RC output with a repition rate of 1 pulse about every 19ms. e:\iro_svn\opensprints\FW\user\user.c
                                           // If you have RC output enabled on a pin, outputting a digital value to that pin e:\iro_svn\opensprints\FW\user\user.c
                                           // will be overwritten the next time the RC pulses. Make sure to turn off the RC e:\iro_svn\opensprints\FW\user\user.c
                                           // output if you want to use the pin for something else.                         e:\iro_svn\opensprints\FW\user\user.c
001d7e   cfd9     MOVFF     0xfd9,0xfe6    void parse_RC_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001d80   ffe6                                                                                                               
001d82   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001d84   ffd9                                                                                                               
001d86   0e04     MOVLW     0x4                                                                                             
001d88   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001d8a   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001d8c   6ee6     MOVWF     0xe6,0x0                                                                                        
001d8e   daff     RCALL     0x238e                                                                                          
001d90   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d92   501d     MOVF      0x1d,0x0,0x0                                                                                    
001d94   6edf     MOVWF     0xdf,0x0                                                                                        
001d96   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001d98   6ee6     MOVWF     0xe6,0x0                                                                                        
001d9a   daf9     RCALL     0x238e                                                                                          
001d9c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d9e   0e01     MOVLW     0x1                                                                                             
001da0   c01d     MOVFF     0x1d,0xfdb                                                                                      
001da2   ffdb                                                                                                               
001da4   0e03     MOVLW     0x3            	value = extract_number (kUINT);                                                 e:\iro_svn\opensprints\FW\user\user.c
001da6   6ee6     MOVWF     0xe6,0x0                                                                                        
001da8   daf2     RCALL     0x238e                                                                                          
001daa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001dac   0e02     MOVLW     0x2                                                                                             
001dae   c01d     MOVFF     0x1d,0xfdb                                                                                      
001db0   ffdb                                                                                                               
001db2   0e03     MOVLW     0x3                                                                                             
001db4   c01e     MOVFF     0x1e,0xfdb                                                                                      
001db6   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001db8   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001dba   e001     BZ        0x1dbe                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001dbc   d07b     BRA       0x1eb4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Max value user can input. (min is zero)                                      e:\iro_svn\opensprints\FW\user\user.c
001dbe   50d9     MOVF      0xd9,0x0,0x0   	if (value > 11890)                                                              e:\iro_svn\opensprints\FW\user\user.c
001dc0   0f02     ADDLW     0x2                                                                                             
001dc2   6ee9     MOVWF     0xe9,0x0                                                                                        
001dc4   cfda     MOVFF     0xfda,0xfea                                                                                     
001dc6   ffea                                                                                                               
001dc8   0e72     MOVLW     0x72                                                                                            
001dca   80d8     BSF       0xd8,0x0,0x0                                                                                    
001dcc   54ee     SUBFWB    0xee,0x0,0x0                                                                                    
001dce   0e2e     MOVLW     0x2e                                                                                            
001dd0   54ed     SUBFWB    0xed,0x0,0x0                                                                                    
001dd2   e202     BC        0x1dd8                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001dd4   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001dd6   d06e     BRA       0x1eb4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now get Value in the form that TMR0 needs it                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 needs to get filled with values from 65490 (1ms) to 53600 (2ms)         e:\iro_svn\opensprints\FW\user\user.c
001dd8   50d9     MOVF      0xd9,0x0,0x0   	if (value != 0)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001dda   0f02     ADDLW     0x2                                                                                             
001ddc   6ee9     MOVWF     0xe9,0x0                                                                                        
001dde   cfda     MOVFF     0xfda,0xfea                                                                                     
001de0   ffea                                                                                                               
001de2   50ee     MOVF      0xee,0x0,0x0                                                                                    
001de4   10ed     IORWF     0xed,0x0,0x0                                                                                    
001de6   e01f     BZ        0x1e26                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001de8   682d     SETF      0x2d,0x0       		value = (65535 - (value + 45));                                                e:\iro_svn\opensprints\FW\user\user.c
001dea   682e     SETF      0x2e,0x0                                                                                        
001dec   6a2f     CLRF      0x2f,0x0                                                                                        
001dee   0e2d     MOVLW     0x2d                                                                                            
001df0   6ee7     MOVWF     0xe7,0x0                                                                                        
001df2   0e02     MOVLW     0x2                                                                                             
001df4   cfdb     MOVFF     0xfdb,0x30                                                                                      
001df6   f030                                                                                                               
001df8   0e03     MOVLW     0x3                                                                                             
001dfa   cfdb     MOVFF     0xfdb,0x31                                                                                      
001dfc   f031                                                                                                               
001dfe   50e7     MOVF      0xe7,0x0,0x0                                                                                    
001e00   2630     ADDWF     0x30,0x1,0x0                                                                                    
001e02   0e00     MOVLW     0x0                                                                                             
001e04   2231     ADDWFC    0x31,0x1,0x0                                                                                    
001e06   6a32     CLRF      0x32,0x0                                                                                        
001e08   5030     MOVF      0x30,0x0,0x0                                                                                    
001e0a   5c2d     SUBWF     0x2d,0x0,0x0                                                                                    
001e0c   6e2a     MOVWF     0x2a,0x0                                                                                        
001e0e   5031     MOVF      0x31,0x0,0x0                                                                                    
001e10   582e     SUBWFB    0x2e,0x0,0x0                                                                                    
001e12   6e2b     MOVWF     0x2b,0x0                                                                                        
001e14   5032     MOVF      0x32,0x0,0x0                                                                                    
001e16   582f     SUBWFB    0x2f,0x0,0x0                                                                                    
001e18   6e2c     MOVWF     0x2c,0x0                                                                                        
001e1a   0e02     MOVLW     0x2                                                                                             
001e1c   c02a     MOVFF     0x2a,0xfdb                                                                                      
001e1e   ffdb                                                                                                               
001e20   0e03     MOVLW     0x3                                                                                             
001e22   c02b     MOVFF     0x2b,0xfdb                                                                                      
001e24   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001e26   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
001e28   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e2a   0807     SUBLW     0x7                                                                                             
001e2c   e202     BC        0x1e32                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e2e   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001e30   d041     BRA       0x1eb4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e32   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
001e34   6e2a     MOVWF     0x2a,0x0                                                                                        
001e36   50df     MOVF      0xdf,0x0,0x0                                                                                    
001e38   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001e3a   e102     BNZ       0x1e40                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e3c   6adf     CLRF      0xdf,0x0       		port = 0;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e3e   d012     BRA       0x1e64         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001e40   0e42     MOVLW     0x42                                                                                            
001e42   6e2a     MOVWF     0x2a,0x0                                                                                        
001e44   50df     MOVF      0xdf,0x0,0x0                                                                                    
001e46   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001e48   e103     BNZ       0x1e50                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e4a   0e08     MOVLW     0x8            		port = 8;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001e4c   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e4e   d00a     BRA       0x1e64         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001e50   0e43     MOVLW     0x43                                                                                            
001e52   6e2a     MOVWF     0x2a,0x0                                                                                        
001e54   50df     MOVF      0xdf,0x0,0x0                                                                                    
001e56   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001e58   e103     BNZ       0x1e60                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e5a   0e10     MOVLW     0x10           		port = 16;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001e5c   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e5e   d002     BRA       0x1e64         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e60   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001e62   d028     BRA       0x1eb4         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Store the new RC time value                                                  e:\iro_svn\opensprints\FW\user\user.c
001e64   0e01     MOVLW     0x1            	g_RC_value[pin + port] = value;                                                 e:\iro_svn\opensprints\FW\user\user.c
001e66   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e68   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001e6a   6ee9     MOVWF     0xe9,0x0                                                                                        
001e6c   6aea     CLRF      0xea,0x0                                                                                        
001e6e   90d8     BCF       0xd8,0x0,0x0                                                                                    
001e70   36e9     RLCF      0xe9,0x1,0x0                                                                                    
001e72   36ea     RLCF      0xea,0x1,0x0                                                                                    
001e74   0e69     MOVLW     0x69                                                                                            
001e76   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
001e78   0e01     MOVLW     0x1                                                                                             
001e7a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e7c   0e02     MOVLW     0x2                                                                                             
001e7e   cfdb     MOVFF     0xfdb,0xfee                                                                                     
001e80   ffee                                                                                                               
001e82   0e03     MOVLW     0x3                                                                                             
001e84   cfdb     MOVFF     0xfdb,0xfed                                                                                     
001e86   ffed                                                                                                               
                                           	// Only set this state if we are off - if we are already running on             e:\iro_svn\opensprints\FW\user\user.c
                                           	// this pin, then the new value will be picked up next time around (19ms)       e:\iro_svn\opensprints\FW\user\user.c
001e88   0e01     MOVLW     0x1            	if (kOFF == g_RC_state[pin + port])                                             e:\iro_svn\opensprints\FW\user\user.c
001e8a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e8c   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001e8e   6aea     CLRF      0xea,0x0                                                                                        
001e90   0f51     ADDLW     0x51                                                                                            
001e92   6ee9     MOVWF     0xe9,0x0                                                                                        
001e94   0e01     MOVLW     0x1                                                                                             
001e96   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e98   04ef     DECF      0xef,0x0,0x0                                                                                    
001e9a   e10a     BNZ       0x1eb0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001e9c   0e01     MOVLW     0x1            		g_RC_state[pin + port] = kWAITING;                                             e:\iro_svn\opensprints\FW\user\user.c
001e9e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ea0   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001ea2   6aea     CLRF      0xea,0x0                                                                                        
001ea4   0f51     ADDLW     0x51                                                                                            
001ea6   6ee9     MOVWF     0xe9,0x0                                                                                        
001ea8   0e01     MOVLW     0x1                                                                                             
001eaa   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001eac   0e02     MOVLW     0x2                                                                                             
001eae   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001eb0   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001eb2   f009                                                                                                               
001eb4   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001eb6   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001eb8   e202     BC        0x1ebe                                                                                          
001eba   6ae1     CLRF      0xe1,0x0                                                                                        
001ebc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ebe   6ee1     MOVWF     0xe1,0x0                                                                                        
001ec0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ec2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001ec4   ffd9                                                                                                               
001ec6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // BC is for Bulk Configure                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // BC,<port A init>,<waitmask>,<wait delay>,<strobemask>,<strobe delay><CR>      e:\iro_svn\opensprints\FW\user\user.c
                                           // This command sets up the mask and strobe bits on port A for the               e:\iro_svn\opensprints\FW\user\user.c
                                           // BO (Bulk Output) command below. Also suck in wait delay, strobe delay, etc.   e:\iro_svn\opensprints\FW\user\user.c
001ec8   cfd9     MOVFF     0xfd9,0xfe6    void parse_BC_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001eca   ffe6                                                                                                               
001ecc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001ece   ffd9                                                                                                               
001ed0   0e05     MOVLW     0x5                                                                                             
001ed2   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_init;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_mask;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_mask;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_delay;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_delay;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001ed4   0e01     MOVLW     0x1            	BO_init = extract_number (kUCHAR);                                              e:\iro_svn\opensprints\FW\user\user.c
001ed6   6ee6     MOVWF     0xe6,0x0                                                                                        
001ed8   da5a     RCALL     0x238e                                                                                          
001eda   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001edc   501d     MOVF      0x1d,0x0,0x0                                                                                    
001ede   6edf     MOVWF     0xdf,0x0                                                                                        
001ee0   0e01     MOVLW     0x1            	BO_wait_mask = extract_number (kUCHAR);                                         e:\iro_svn\opensprints\FW\user\user.c
001ee2   6ee6     MOVWF     0xe6,0x0                                                                                        
001ee4   da54     RCALL     0x238e                                                                                          
001ee6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ee8   0e02     MOVLW     0x2                                                                                             
001eea   c01d     MOVFF     0x1d,0xfdb                                                                                      
001eec   ffdb                                                                                                               
001eee   0e01     MOVLW     0x1            	BO_wait_delay = extract_number (kUCHAR);                                        e:\iro_svn\opensprints\FW\user\user.c
001ef0   6ee6     MOVWF     0xe6,0x0                                                                                        
001ef2   da4d     RCALL     0x238e                                                                                          
001ef4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ef6   0e03     MOVLW     0x3                                                                                             
001ef8   c01d     MOVFF     0x1d,0xfdb                                                                                      
001efa   ffdb                                                                                                               
001efc   0e01     MOVLW     0x1            	BO_strobe_mask = extract_number (kUCHAR);                                       e:\iro_svn\opensprints\FW\user\user.c
001efe   6ee6     MOVWF     0xe6,0x0                                                                                        
001f00   da46     RCALL     0x238e                                                                                          
001f02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f04   0e01     MOVLW     0x1                                                                                             
001f06   c01d     MOVFF     0x1d,0xfdb                                                                                      
001f08   ffdb                                                                                                               
001f0a   0e01     MOVLW     0x1            	BO_strobe_delay = extract_number (kUCHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001f0c   6ee6     MOVWF     0xe6,0x0                                                                                        
001f0e   da3f     RCALL     0x238e                                                                                          
001f10   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f12   0e04     MOVLW     0x4                                                                                             
001f14   c01d     MOVFF     0x1d,0xfdb                                                                                      
001f16   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001f18   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001f1a   e001     BZ        0x1f1e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001f1c   d012     BRA       0x1f42         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy over values to their gloabls                                            e:\iro_svn\opensprints\FW\user\user.c
001f1e   cfdf     MOVFF     0xfdf,0x199    	g_BO_init = BO_init;                                                            e:\iro_svn\opensprints\FW\user\user.c
001f20   f199                                                                                                               
001f22   0e02     MOVLW     0x2            	g_BO_wait_mask = BO_wait_mask;                                                  e:\iro_svn\opensprints\FW\user\user.c
001f24   cfdb     MOVFF     0xfdb,0x19b                                                                                     
001f26   f19b                                                                                                               
001f28   0e01     MOVLW     0x1            	g_BO_strobe_mask = BO_strobe_mask;                                              e:\iro_svn\opensprints\FW\user\user.c
001f2a   cfdb     MOVFF     0xfdb,0x19a                                                                                     
001f2c   f19a                                                                                                               
001f2e   0e03     MOVLW     0x3            	g_BO_wait_delay = BO_wait_delay;                                                e:\iro_svn\opensprints\FW\user\user.c
001f30   cfdb     MOVFF     0xfdb,0x19c                                                                                     
001f32   f19c                                                                                                               
001f34   0e04     MOVLW     0x4            	g_BO_strobe_delay = BO_strobe_delay;                                            e:\iro_svn\opensprints\FW\user\user.c
001f36   cfdb     MOVFF     0xfdb,0x19d                                                                                     
001f38   f19d                                                                                                               
                                           	// And initalize Port A                                                         e:\iro_svn\opensprints\FW\user\user.c
001f3a   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
001f3c   ff89                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001f3e   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001f40   f009                                                                                                               
001f42   0e05     MOVLW     0x5            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001f44   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001f46   e202     BC        0x1f4c                                                                                          
001f48   6ae1     CLRF      0xe1,0x0                                                                                        
001f4a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f4c   6ee1     MOVWF     0xe1,0x0                                                                                        
001f4e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f50   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001f52   ffd9                                                                                                               
001f54   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Output (BO)                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           // BO,4AF2C124<CR>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // After the inital comma, pull in hex values and spit them out to port A        e:\iro_svn\opensprints\FW\user\user.c
                                           // Note that the procedure here is as follows:                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //	1) Write new value to PortB                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //	2) Assert <strobemask>                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	3) Wait for <strobdelay> (if not zero)                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	4) Deassert <strobemask>                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           //	5) Wait for <waitmask> to be asserted                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //	6) Wait for <waitmask> to be deasserted                                       e:\iro_svn\opensprints\FW\user\user.c
                                           //	7) If 5) or 6) takes longer than <waitdelay> then just move on to next byte   e:\iro_svn\opensprints\FW\user\user.c
                                           //	Repeat for each byte                                                          e:\iro_svn\opensprints\FW\user\user.c
001f56   cfd9     MOVFF     0xfd9,0xfe6    void parse_BO_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001f58   ffe6                                                                                                               
001f5a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001f5c   ffd9                                                                                                               
001f5e   0e04     MOVLW     0x4                                                                                             
001f60   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              e:\iro_svn\opensprints\FW\user\user.c
001f62   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   e:\iro_svn\opensprints\FW\user\user.c
001f64   6adb     CLRF      0xdb,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
001f66   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
001f68   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001f6a   6aea     CLRF      0xea,0x0                                                                                        
001f6c   0f40     ADDLW     0x40                                                                                            
001f6e   6ee9     MOVWF     0xe9,0x0                                                                                        
001f70   0e02     MOVLW     0x2                                                                                             
001f72   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001f74   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f76   082c     SUBLW     0x2c                                                                                            
001f78   e01d     BZ        0x1fb4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001f7a   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
001f7c   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001f7e   6aea     CLRF      0xea,0x0                                                                                        
001f80   0f40     ADDLW     0x40                                                                                            
001f82   6ee9     MOVWF     0xe9,0x0                                                                                        
001f84   0e02     MOVLW     0x2                                                                                             
001f86   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001f88   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f8a   6ee6     MOVWF     0xe6,0x0                                                                                        
001f8c   6ae6     CLRF      0xe6,0x0                                                                                        
001f8e   0e5c     MOVLW     0x5c                                                                                            
001f90   6e2a     MOVWF     0x2a,0x0                                                                                        
001f92   0e42     MOVLW     0x42                                                                                            
001f94   6e2b     MOVWF     0x2b,0x0                                                                                        
001f96   6a2c     CLRF      0x2c,0x0                                                                                        
001f98   c02a     MOVFF     0x2a,0xfe6                                                                                      
001f9a   ffe6                                                                                                               
001f9c   c02b     MOVFF     0x2b,0xfe6                                                                                      
001f9e   ffe6                                                                                                               
001fa0   c02c     MOVFF     0x2c,0xfe6                                                                                      
001fa2   ffe6                                                                                                               
001fa4   ecfe     CALL      0x45fc,0x0                                                                                      
001fa6   f022                                                                                                               
001fa8   6e2d     MOVWF     0x2d,0x0                                                                                        
001faa   0e05     MOVLW     0x5                                                                                             
001fac   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001fae   502d     MOVF      0x2d,0x0,0x0                                                                                    
001fb0   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
001fb2   d10e     BRA       0x21d0         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
001fb4   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
001fb6   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001fb8   0e40     MOVLW     0x40                                                                                            
001fba   0101     MOVLB     0x1                                                                                             
001fbc   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001fbe   e102     BNZ       0x1fc4                                                                                          
001fc0   0101     MOVLB     0x1                                                                                             
001fc2   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  e:\iro_svn\opensprints\FW\user\user.c
001fc4   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
001fc6   ff89                                                                                                               
001fc8   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   e:\iro_svn\opensprints\FW\user\user.c
001fca   1d9a     COMF      0x9a,0x0,0x1                                                                                    
001fcc   1489     ANDWF     0x89,0x0,0x0                                                                                    
001fce   6e2a     MOVWF     0x2a,0x0                                                                                        
001fd0   1c89     COMF      0x89,0x0,0x0                                                                                    
001fd2   0101     MOVLB     0x1                                                                                             
001fd4   159a     ANDWF     0x9a,0x0,0x1                                                                                    
001fd6   102a     IORWF     0x2a,0x0,0x0                                                                                    
001fd8   6ee7     MOVWF     0xe7,0x0                                                                                        
001fda   0e01     MOVLW     0x1                                                                                             
001fdc   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001fde   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001fe0   0101     MOVLB     0x1            	while (g_RX_buf[g_RX_buf_out] != 13)                                            e:\iro_svn\opensprints\FW\user\user.c
001fe2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001fe4   6aea     CLRF      0xea,0x0                                                                                        
001fe6   0f40     ADDLW     0x40                                                                                            
001fe8   6ee9     MOVWF     0xe9,0x0                                                                                        
001fea   0e02     MOVLW     0x2                                                                                             
001fec   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001fee   50ef     MOVF      0xef,0x0,0x0                                                                                    
001ff0   080d     SUBLW     0xd                                                                                             
001ff2   e101     BNZ       0x1ff6                                                                                          
001ff4   d0eb     BRA       0x21cc                                                                                          
0021ca   d70a     BRA       0x1fe0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a nibble from the input buffer                                      e:\iro_svn\opensprints\FW\user\user.c
001ff6   0101     MOVLB     0x1            		tmp = toupper (g_RX_buf[g_RX_buf_out]);                                        e:\iro_svn\opensprints\FW\user\user.c
001ff8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001ffa   6aea     CLRF      0xea,0x0                                                                                        
001ffc   0f40     ADDLW     0x40                                                                                            
001ffe   6ee9     MOVWF     0xe9,0x0                                                                                        
002000   0e02     MOVLW     0x2                                                                                             
002002   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002004   50ef     MOVF      0xef,0x0,0x0                                                                                    
002006   6ee6     MOVWF     0xe6,0x0                                                                                        
002008   6ae6     CLRF      0xe6,0x0                                                                                        
00200a   ecf7     CALL      0x47ee,0x0                                                                                      
00200c   f023                                                                                                               
00200e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002010   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002012   0e02     MOVLW     0x2                                                                                             
002014   cff3     MOVFF     0xff3,0xfdb                                                                                     
002016   ffdb                                                                                                               
002018   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  e:\iro_svn\opensprints\FW\user\user.c
00201a   6ef3     MOVWF     0xf3,0x0                                                                                        
00201c   0e02     MOVLW     0x2                                                                                             
00201e   cfdb     MOVFF     0xfdb,0xff4                                                                                     
002020   fff4                                                                                                               
002022   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002024   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
002026   e30f     BNC       0x2046                                                                                          
002028   0e02     MOVLW     0x2                                                                                             
00202a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00202c   0839     SUBLW     0x39                                                                                            
00202e   e30b     BNC       0x2046                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002030   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  e:\iro_svn\opensprints\FW\user\user.c
002032   6e2a     MOVWF     0x2a,0x0                                                                                        
002034   0e02     MOVLW     0x2                                                                                             
002036   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
002038   ffe7                                                                                                               
00203a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00203c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00203e   0e02     MOVLW     0x2                                                                                             
002040   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002042   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002044   d019     BRA       0x2078         		else if (tmp >= 'A' && tmp <= 'F')                                             e:\iro_svn\opensprints\FW\user\user.c
002046   0e41     MOVLW     0x41                                                                                            
002048   6ef3     MOVWF     0xf3,0x0                                                                                        
00204a   0e02     MOVLW     0x2                                                                                             
00204c   cfdb     MOVFF     0xfdb,0xff4                                                                                     
00204e   fff4                                                                                                               
002050   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002052   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
002054   e30f     BNC       0x2074                                                                                          
002056   0e02     MOVLW     0x2                                                                                             
002058   50db     MOVF      0xdb,0x0,0x0                                                                                    
00205a   0846     SUBLW     0x46                                                                                            
00205c   e30b     BNC       0x2074                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00205e   0e37     MOVLW     0x37           			tmp -= 55;                                                                    e:\iro_svn\opensprints\FW\user\user.c
002060   6e2a     MOVWF     0x2a,0x0                                                                                        
002062   0e02     MOVLW     0x2                                                                                             
002064   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
002066   ffe7                                                                                                               
002068   502a     MOVF      0x2a,0x0,0x0                                                                                    
00206a   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00206c   0e02     MOVLW     0x2                                                                                             
00206e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002070   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002072   d002     BRA       0x2078         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002074   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
002076   d0ac     BRA       0x21d0         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002078   0e02     MOVLW     0x2            		BO_data_byte = tmp << 4;                                                       e:\iro_svn\opensprints\FW\user\user.c
00207a   38db     SWAPF     0xdb,0x0,0x0                                                                                    
00207c   0bf0     ANDLW     0xf0                                                                                            
00207e   6edf     MOVWF     0xdf,0x0                                                                                        
002080   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
002082   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002084   0e40     MOVLW     0x40                                                                                            
002086   0101     MOVLB     0x1                                                                                             
002088   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00208a   e102     BNZ       0x2090                                                                                          
00208c   0101     MOVLB     0x1                                                                                             
00208e   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Check for CR next                                                           e:\iro_svn\opensprints\FW\user\user.c
002090   0e0d     MOVLW     0xd            		if (kCR == g_RX_buf[g_RX_buf_out])                                             e:\iro_svn\opensprints\FW\user\user.c
002092   6e2a     MOVWF     0x2a,0x0                                                                                        
002094   0101     MOVLB     0x1                                                                                             
002096   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002098   6aea     CLRF      0xea,0x0                                                                                        
00209a   0f40     ADDLW     0x40                                                                                            
00209c   6ee9     MOVWF     0xe9,0x0                                                                                        
00209e   0e02     MOVLW     0x2                                                                                             
0020a0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0020a2   50ef     MOVF      0xef,0x0,0x0                                                                                    
0020a4   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0020a6   e102     BNZ       0x20ac                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0020a8   880d     BSF       0xd,0x4,0x0    			bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                           e:\iro_svn\opensprints\FW\user\user.c
0020aa   d092     BRA       0x21d0         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0020ac   0101     MOVLB     0x1            		tmp =  toupper (g_RX_buf[g_RX_buf_out]);                                       e:\iro_svn\opensprints\FW\user\user.c
0020ae   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0020b0   6aea     CLRF      0xea,0x0                                                                                        
0020b2   0f40     ADDLW     0x40                                                                                            
0020b4   6ee9     MOVWF     0xe9,0x0                                                                                        
0020b6   0e02     MOVLW     0x2                                                                                             
0020b8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0020ba   50ef     MOVF      0xef,0x0,0x0                                                                                    
0020bc   6ee6     MOVWF     0xe6,0x0                                                                                        
0020be   6ae6     CLRF      0xe6,0x0                                                                                        
0020c0   ecf7     CALL      0x47ee,0x0                                                                                      
0020c2   f023                                                                                                               
0020c4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0020c6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0020c8   0e02     MOVLW     0x2                                                                                             
0020ca   cff3     MOVFF     0xff3,0xfdb                                                                                     
0020cc   ffdb                                                                                                               
0020ce   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  e:\iro_svn\opensprints\FW\user\user.c
0020d0   6ef3     MOVWF     0xf3,0x0                                                                                        
0020d2   0e02     MOVLW     0x2                                                                                             
0020d4   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0020d6   fff4                                                                                                               
0020d8   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0020da   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0020dc   e30f     BNC       0x20fc                                                                                          
0020de   0e02     MOVLW     0x2                                                                                             
0020e0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020e2   0839     SUBLW     0x39                                                                                            
0020e4   e30b     BNC       0x20fc                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0020e6   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  e:\iro_svn\opensprints\FW\user\user.c
0020e8   6e2a     MOVWF     0x2a,0x0                                                                                        
0020ea   0e02     MOVLW     0x2                                                                                             
0020ec   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0020ee   ffe7                                                                                                               
0020f0   502a     MOVF      0x2a,0x0,0x0                                                                                    
0020f2   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0020f4   0e02     MOVLW     0x2                                                                                             
0020f6   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0020f8   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0020fa   d019     BRA       0x212e         		else if (tmp >= 'A' && tmp <= 'F')                                             e:\iro_svn\opensprints\FW\user\user.c
0020fc   0e41     MOVLW     0x41                                                                                            
0020fe   6ef3     MOVWF     0xf3,0x0                                                                                        
002100   0e02     MOVLW     0x2                                                                                             
002102   cfdb     MOVFF     0xfdb,0xff4                                                                                     
002104   fff4                                                                                                               
002106   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002108   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
00210a   e30f     BNC       0x212a                                                                                          
00210c   0e02     MOVLW     0x2                                                                                             
00210e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002110   0846     SUBLW     0x46                                                                                            
002112   e30b     BNC       0x212a                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002114   0e37     MOVLW     0x37           			tmp -= 55;                                                                    e:\iro_svn\opensprints\FW\user\user.c
002116   6e2a     MOVWF     0x2a,0x0                                                                                        
002118   0e02     MOVLW     0x2                                                                                             
00211a   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
00211c   ffe7                                                                                                               
00211e   502a     MOVF      0x2a,0x0,0x0                                                                                    
002120   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
002122   0e02     MOVLW     0x2                                                                                             
002124   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002126   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002128   d002     BRA       0x212e         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00212a   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
00212c   d051     BRA       0x21d0         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00212e   0e02     MOVLW     0x2            		BO_data_byte = BO_data_byte + tmp;                                             e:\iro_svn\opensprints\FW\user\user.c
002130   50db     MOVF      0xdb,0x0,0x0                                                                                    
002132   24df     ADDWF     0xdf,0x0,0x0                                                                                    
002134   6edf     MOVWF     0xdf,0x0                                                                                        
002136   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
002138   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00213a   0e40     MOVLW     0x40                                                                                            
00213c   0101     MOVLB     0x1                                                                                             
00213e   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002140   e102     BNZ       0x2146                                                                                          
002142   0101     MOVLB     0x1                                                                                             
002144   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   e:\iro_svn\opensprints\FW\user\user.c
002146   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           e:\iro_svn\opensprints\FW\user\user.c
002148   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           e:\iro_svn\opensprints\FW\user\user.c
00214a   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       e:\iro_svn\opensprints\FW\user\user.c
00214c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00214e   6e89     MOVWF     0x89,0x0                                                                                        
002150   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         e:\iro_svn\opensprints\FW\user\user.c
002152   519d     MOVF      0x9d,0x0,0x1                                                                                    
002154   e005     BZ        0x2160                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002156   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              e:\iro_svn\opensprints\FW\user\user.c
002158   ffe6                                                                                                               
00215a   ec96     CALL      0x492c,0x0                                                                                      
00215c   f024                                                                                                               
00215e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002160   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              e:\iro_svn\opensprints\FW\user\user.c
002162   ff89                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002164   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           e:\iro_svn\opensprints\FW\user\user.c
002166   519c     MOVF      0x9c,0x0,0x1                                                                                    
002168   e030     BZ        0x21ca                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          e:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               e:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
00216a   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
00216c   c19c     MOVFF     0x19c,0xfdb                                                                                     
00216e   ffdb                                                                                                               
002198   d7eb     BRA       0x2170         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
002170   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
002172   5199     MOVF      0x99,0x0,0x1                                                                                    
002174   0101     MOVLB     0x1                                                                                             
002176   159b     ANDWF     0x9b,0x0,0x1                                                                                    
002178   6e2a     MOVWF     0x2a,0x0                                                                                        
00217a   0101     MOVLB     0x1                                                                                             
00217c   519b     MOVF      0x9b,0x0,0x1                                                                                    
00217e   1480     ANDWF     0x80,0x0,0x0                                                                                    
002180   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
002184   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
002186   50db     MOVF      0xdb,0x0,0x0                                                                                    
002182   e10b     BNZ       0x219a         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002188   e008     BZ        0x219a                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
00218a   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00218c   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00218e   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002190   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002192   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002194   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
002196   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
00219a   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
00219c   c19c     MOVFF     0x19c,0xfdb                                                                                     
00219e   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       e:\iro_svn\opensprints\FW\user\user.c
0021c8   d7eb     BRA       0x21a0         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
0021a0   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
0021a2   5199     MOVF      0x99,0x0,0x1                                                                                    
0021a4   0101     MOVLB     0x1                                                                                             
0021a6   159b     ANDWF     0x9b,0x0,0x1                                                                                    
0021a8   6e2a     MOVWF     0x2a,0x0                                                                                        
0021aa   0101     MOVLB     0x1                                                                                             
0021ac   519b     MOVF      0x9b,0x0,0x1                                                                                    
0021ae   1480     ANDWF     0x80,0x0,0x0                                                                                    
0021b0   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
0021b4   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
0021b6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021b2   e00b     BZ        0x21ca         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
0021b8   e008     BZ        0x21ca                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0021ba   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
0021bc   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
0021be   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
0021c0   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
0021c2   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
0021c4   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
0021c6   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0021cc   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021ce   f009                                                                                                               
0021d0   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021d2   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0021d4   e202     BC        0x21da                                                                                          
0021d6   6ae1     CLRF      0xe1,0x0                                                                                        
0021d8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021da   6ee1     MOVWF     0xe1,0x0                                                                                        
0021dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021de   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0021e0   ffd9                                                                                                               
0021e2   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Stream (BS) (he he, couldn't think of a better name)                     e:\iro_svn\opensprints\FW\user\user.c
                                           // BS,<count>,<binary_data><CR>                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // This command is extremely similar to the BO command                           e:\iro_svn\opensprints\FW\user\user.c
                                           // except that instead of ASCII HEX values, it actually                          e:\iro_svn\opensprints\FW\user\user.c
                                           // takes raw binary data.                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           // So in order for the UBW to know when the end of the stream                    e:\iro_svn\opensprints\FW\user\user.c
                                           // is, we need to have a <count> of bytes.                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // <count> represents the number of bytes after the second comma                 e:\iro_svn\opensprints\FW\user\user.c
                                           // that will be the actual binary data to be streamed out port B.                e:\iro_svn\opensprints\FW\user\user.c
                                           // Then, <binary_data> must be exactly that length.                              e:\iro_svn\opensprints\FW\user\user.c
                                           // <count> must be between 1 and 56 (currently - in the future                   e:\iro_svn\opensprints\FW\user\user.c
                                           // it would be nice to extend the upper limit)                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will pull in one byte at a time within the <binary_data>              e:\iro_svn\opensprints\FW\user\user.c
                                           // section and output it to PORTB exactly as the BO command does.                e:\iro_svn\opensprints\FW\user\user.c
                                           // It will do this for <count> bytes. It will then pull in another               e:\iro_svn\opensprints\FW\user\user.c
                                           // byte (which must be a carrige return) and be done.                            e:\iro_svn\opensprints\FW\user\user.c
                                           // The whole point of this command is to improve data throughput                 e:\iro_svn\opensprints\FW\user\user.c
                                           // from the PC to the UBW. This form of data is also more efficient              e:\iro_svn\opensprints\FW\user\user.c
                                           // for the UBW to process.                                                       e:\iro_svn\opensprints\FW\user\user.c
0021e4   cfd9     MOVFF     0xfd9,0xfe6    void parse_BS_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
0021e6   ffe6                                                                                                               
0021e8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0021ea   ffd9                                                                                                               
0021ec   0e05     MOVLW     0x5                                                                                             
0021ee   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              e:\iro_svn\opensprints\FW\user\user.c
0021f0   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   e:\iro_svn\opensprints\FW\user\user.c
0021f2   6adb     CLRF      0xdb,0x0                                                                                        
0021f4   0e04     MOVLW     0x4            	unsigned char byte_count = 0;	                                                  e:\iro_svn\opensprints\FW\user\user.c
0021f6   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Get byte_count                                                               e:\iro_svn\opensprints\FW\user\user.c
0021f8   0e01     MOVLW     0x1            	byte_count = extract_number (kUCHAR);                                           e:\iro_svn\opensprints\FW\user\user.c
0021fa   6ee6     MOVWF     0xe6,0x0                                                                                        
0021fc   d8c8     RCALL     0x238e                                                                                          
0021fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002200   0e04     MOVLW     0x4                                                                                             
002202   c01d     MOVFF     0x1d,0xfdb                                                                                      
002204   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check it                                                               e:\iro_svn\opensprints\FW\user\user.c
002206   0e04     MOVLW     0x4            	if (0 == byte_count || byte_count > 56)                                         e:\iro_svn\opensprints\FW\user\user.c
002208   50db     MOVF      0xdb,0x0,0x0                                                                                    
00220a   e004     BZ        0x2214                                                                                          
00220c   0e04     MOVLW     0x4                                                                                             
00220e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002210   0838     SUBLW     0x38                                                                                            
002212   e202     BC        0x2218                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002214   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
002216   d098     BRA       0x2348         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
002218   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
00221a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00221c   6aea     CLRF      0xea,0x0                                                                                        
00221e   0f40     ADDLW     0x40                                                                                            
002220   6ee9     MOVWF     0xe9,0x0                                                                                        
002222   0e02     MOVLW     0x2                                                                                             
002224   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002226   50ef     MOVF      0xef,0x0,0x0                                                                                    
002228   082c     SUBLW     0x2c                                                                                            
00222a   e01d     BZ        0x2266                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00222c   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
00222e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002230   6aea     CLRF      0xea,0x0                                                                                        
002232   0f40     ADDLW     0x40                                                                                            
002234   6ee9     MOVWF     0xe9,0x0                                                                                        
002236   0e02     MOVLW     0x2                                                                                             
002238   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00223a   50ef     MOVF      0xef,0x0,0x0                                                                                    
00223c   6ee6     MOVWF     0xe6,0x0                                                                                        
00223e   6ae6     CLRF      0xe6,0x0                                                                                        
002240   0e5c     MOVLW     0x5c                                                                                            
002242   6e2a     MOVWF     0x2a,0x0                                                                                        
002244   0e42     MOVLW     0x42                                                                                            
002246   6e2b     MOVWF     0x2b,0x0                                                                                        
002248   6a2c     CLRF      0x2c,0x0                                                                                        
00224a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00224c   ffe6                                                                                                               
00224e   c02b     MOVFF     0x2b,0xfe6                                                                                      
002250   ffe6                                                                                                               
002252   c02c     MOVFF     0x2c,0xfe6                                                                                      
002254   ffe6                                                                                                               
002256   ecfe     CALL      0x45fc,0x0                                                                                      
002258   f022                                                                                                               
00225a   6e2d     MOVWF     0x2d,0x0                                                                                        
00225c   0e05     MOVLW     0x5                                                                                             
00225e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002260   502d     MOVF      0x2d,0x0,0x0                                                                                    
002262   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
002264   d071     BRA       0x2348         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
002266   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
002268   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00226a   0e40     MOVLW     0x40                                                                                            
00226c   0101     MOVLB     0x1                                                                                             
00226e   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002270   e102     BNZ       0x2276                                                                                          
002272   0101     MOVLB     0x1                                                                                             
002274   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  e:\iro_svn\opensprints\FW\user\user.c
002276   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
002278   ff89                                                                                                               
00227a   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   e:\iro_svn\opensprints\FW\user\user.c
00227c   1d9a     COMF      0x9a,0x0,0x1                                                                                    
00227e   1489     ANDWF     0x89,0x0,0x0                                                                                    
002280   6e2a     MOVWF     0x2a,0x0                                                                                        
002282   1c89     COMF      0x89,0x0,0x0                                                                                    
002284   0101     MOVLB     0x1                                                                                             
002286   159a     ANDWF     0x9a,0x0,0x1                                                                                    
002288   102a     IORWF     0x2a,0x0,0x0                                                                                    
00228a   6ee7     MOVWF     0xe7,0x0                                                                                        
00228c   0e01     MOVLW     0x1                                                                                             
00228e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002290   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
002292   0e04     MOVLW     0x4            	while (byte_count != 0)                                                         e:\iro_svn\opensprints\FW\user\user.c
002294   50db     MOVF      0xdb,0x0,0x0                                                                                    
002296   e056     BZ        0x2344                                                                                          
002342   d7a7     BRA       0x2292                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a single byte from input buffer                                     e:\iro_svn\opensprints\FW\user\user.c
002298   0101     MOVLB     0x1            		BO_data_byte = g_RX_buf[g_RX_buf_out];                                         e:\iro_svn\opensprints\FW\user\user.c
00229a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00229c   6aea     CLRF      0xea,0x0                                                                                        
00229e   0f40     ADDLW     0x40                                                                                            
0022a0   6ee9     MOVWF     0xe9,0x0                                                                                        
0022a2   0e02     MOVLW     0x2                                                                                             
0022a4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0022a6   cfef     MOVFF     0xfef,0xfdf                                                                                     
0022a8   ffdf                                                                                                               
0022aa   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
0022ac   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0022ae   0e40     MOVLW     0x40                                                                                            
0022b0   0101     MOVLB     0x1                                                                                             
0022b2   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0022b4   e102     BNZ       0x22ba                                                                                          
0022b6   0101     MOVLB     0x1                                                                                             
0022b8   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Count this byte                                                             e:\iro_svn\opensprints\FW\user\user.c
0022ba   0e04     MOVLW     0x4            		byte_count--;                                                                  e:\iro_svn\opensprints\FW\user\user.c
0022bc   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   e:\iro_svn\opensprints\FW\user\user.c
0022be   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           e:\iro_svn\opensprints\FW\user\user.c
0022c0   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           e:\iro_svn\opensprints\FW\user\user.c
0022c2   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       e:\iro_svn\opensprints\FW\user\user.c
0022c4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022c6   6e89     MOVWF     0x89,0x0                                                                                        
0022c8   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         e:\iro_svn\opensprints\FW\user\user.c
0022ca   519d     MOVF      0x9d,0x0,0x1                                                                                    
0022cc   e005     BZ        0x22d8                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022ce   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              e:\iro_svn\opensprints\FW\user\user.c
0022d0   ffe6                                                                                                               
0022d2   ec96     CALL      0x492c,0x0                                                                                      
0022d4   f024                                                                                                               
0022d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022d8   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              e:\iro_svn\opensprints\FW\user\user.c
0022da   ff89                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0022dc   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           e:\iro_svn\opensprints\FW\user\user.c
0022de   519c     MOVF      0x9c,0x0,0x1                                                                                    
0022e0   e030     BZ        0x2342                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          e:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               e:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
0022e2   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
0022e4   c19c     MOVFF     0x19c,0xfdb                                                                                     
0022e6   ffdb                                                                                                               
002310   d7eb     BRA       0x22e8         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
0022e8   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
0022ea   5199     MOVF      0x99,0x0,0x1                                                                                    
0022ec   0101     MOVLB     0x1                                                                                             
0022ee   159b     ANDWF     0x9b,0x0,0x1                                                                                    
0022f0   6e2a     MOVWF     0x2a,0x0                                                                                        
0022f2   0101     MOVLB     0x1                                                                                             
0022f4   519b     MOVF      0x9b,0x0,0x1                                                                                    
0022f6   1480     ANDWF     0x80,0x0,0x0                                                                                    
0022f8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
0022fc   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
0022fe   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022fa   e10b     BNZ       0x2312         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002300   e008     BZ        0x2312                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002302   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002304   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002306   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002308   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00230a   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00230c   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
00230e   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
002312   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
002314   c19c     MOVFF     0x19c,0xfdb                                                                                     
002316   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       e:\iro_svn\opensprints\FW\user\user.c
002340   d7eb     BRA       0x2318         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
002318   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
00231a   5199     MOVF      0x99,0x0,0x1                                                                                    
00231c   0101     MOVLB     0x1                                                                                             
00231e   159b     ANDWF     0x9b,0x0,0x1                                                                                    
002320   6e2a     MOVWF     0x2a,0x0                                                                                        
002322   0101     MOVLB     0x1                                                                                             
002324   519b     MOVF      0x9b,0x0,0x1                                                                                    
002326   1480     ANDWF     0x80,0x0,0x0                                                                                    
002328   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
00232c   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
00232e   50db     MOVF      0xdb,0x0,0x0                                                                                    
00232a   e00b     BZ        0x2342         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002330   e008     BZ        0x2342                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002332   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002334   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002336   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002338   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00233a   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00233c   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
00233e   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002344   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
002346   f009                                                                                                               
002348   0e05     MOVLW     0x5            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00234a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00234c   e202     BC        0x2352                                                                                          
00234e   6ae1     CLRF      0xe1,0x0                                                                                        
002350   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002352   6ee1     MOVWF     0xe1,0x0                                                                                        
002354   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002356   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002358   ffd9                                                                                                               
00235a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // SS Send SPI                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00235c   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00235e   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002360   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RS Receive SPI                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002362   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
002364   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002366   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CS Configure SPI                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002368   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00236a   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
00236c   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // SI Send I2C                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00236e   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
002370   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002372   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RI Receive I2C                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002374   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
002376   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002378   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CI Configure I2C                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00237a   ecf4     CALL      0x13e8,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00237c   f009                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
00237e   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002380   0101     MOVLB     0x1            	is_racing = TRUE;                                                               e:\iro_svn\opensprints\FW\user\user.c
002382   0e01     MOVLW     0x1                                                                                             
002384   6fd8     MOVWF     0xd8,0x1                                                                                        
002386   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002388   0101     MOVLB     0x1            	is_racing = FALSE;                                                              e:\iro_svn\opensprints\FW\user\user.c
00238a   6bd8     CLRF      0xd8,0x1                                                                                        
00238c   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the string pointed to by ptr                                          e:\iro_svn\opensprints\FW\user\user.c
                                           // There should be a comma where ptr points to upon entry.                       e:\iro_svn\opensprints\FW\user\user.c
                                           // If not, throw a comma error.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // If so, then look for up to three bytes after the                              e:\iro_svn\opensprints\FW\user\user.c
                                           // comma for numbers, and put them all into one                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // byte (0-255). If the number is greater than 255, then                         e:\iro_svn\opensprints\FW\user\user.c
                                           // thow a range error.                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // Advance the pointer to the byte after the last number                         e:\iro_svn\opensprints\FW\user\user.c
                                           // and return.                                                                   e:\iro_svn\opensprints\FW\user\user.c
00238e   cfd9     MOVFF     0xfd9,0xfe6    signed short long extract_number(tExtractType type)                              e:\iro_svn\opensprints\FW\user\user.c
002390   ffe6                                                                                                               
002392   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002394   ffd9                                                                                                               
002396   0e04     MOVLW     0x4                                                                                             
002398   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	signed short long acc;                                                          e:\iro_svn\opensprints\FW\user\user.c
00239a   0e03     MOVLW     0x3            	unsigned char neg = FALSE;                                                      e:\iro_svn\opensprints\FW\user\user.c
00239c   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check to see if we're already at the end                                     e:\iro_svn\opensprints\FW\user\user.c
00239e   0e0d     MOVLW     0xd            	if (kCR == g_RX_buf[g_RX_buf_out])                                              e:\iro_svn\opensprints\FW\user\user.c
0023a0   6e2a     MOVWF     0x2a,0x0                                                                                        
0023a2   0101     MOVLB     0x1                                                                                             
0023a4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0023a6   6aea     CLRF      0xea,0x0                                                                                        
0023a8   0f40     ADDLW     0x40                                                                                            
0023aa   6ee9     MOVWF     0xe9,0x0                                                                                        
0023ac   0e02     MOVLW     0x2                                                                                             
0023ae   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0023b0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0023b2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0023b4   e105     BNZ       0x23c0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0023b6   880d     BSF       0xd,0x4,0x0    		bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                            e:\iro_svn\opensprints\FW\user\user.c
0023b8   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
0023ba   6a1e     CLRF      0x1e,0x0                                                                                        
0023bc   6a1f     CLRF      0x1f,0x0                                                                                        
0023be   d193     BRA       0x26e6                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
0023c0   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
0023c2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0023c4   6aea     CLRF      0xea,0x0                                                                                        
0023c6   0f40     ADDLW     0x40                                                                                            
0023c8   6ee9     MOVWF     0xe9,0x0                                                                                        
0023ca   0e02     MOVLW     0x2                                                                                             
0023cc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0023ce   50ef     MOVF      0xef,0x0,0x0                                                                                    
0023d0   082c     SUBLW     0x2c                                                                                            
0023d2   e020     BZ        0x2414                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0023d4   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
0023d6   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0023d8   6aea     CLRF      0xea,0x0                                                                                        
0023da   0f40     ADDLW     0x40                                                                                            
0023dc   6ee9     MOVWF     0xe9,0x0                                                                                        
0023de   0e02     MOVLW     0x2                                                                                             
0023e0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0023e2   50ef     MOVF      0xef,0x0,0x0                                                                                    
0023e4   6ee6     MOVWF     0xe6,0x0                                                                                        
0023e6   6ae6     CLRF      0xe6,0x0                                                                                        
0023e8   0e5c     MOVLW     0x5c                                                                                            
0023ea   6e2a     MOVWF     0x2a,0x0                                                                                        
0023ec   0e42     MOVLW     0x42                                                                                            
0023ee   6e2b     MOVWF     0x2b,0x0                                                                                        
0023f0   6a2c     CLRF      0x2c,0x0                                                                                        
0023f2   c02a     MOVFF     0x2a,0xfe6                                                                                      
0023f4   ffe6                                                                                                               
0023f6   c02b     MOVFF     0x2b,0xfe6                                                                                      
0023f8   ffe6                                                                                                               
0023fa   c02c     MOVFF     0x2c,0xfe6                                                                                      
0023fc   ffe6                                                                                                               
0023fe   ecfe     CALL      0x45fc,0x0                                                                                      
002400   f022                                                                                                               
002402   6e2d     MOVWF     0x2d,0x0                                                                                        
002404   0e05     MOVLW     0x5                                                                                             
002406   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002408   502d     MOVF      0x2d,0x0,0x0                                                                                    
00240a   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
00240c   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
00240e   6a1e     CLRF      0x1e,0x0                                                                                        
002410   6a1f     CLRF      0x1f,0x0                                                                                        
002412   d169     BRA       0x26e6                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
002414   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
002416   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002418   0e40     MOVLW     0x40                                                                                            
00241a   0101     MOVLB     0x1                                                                                             
00241c   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00241e   e102     BNZ       0x2424                                                                                          
002420   0101     MOVLB     0x1                                                                                             
002422   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now check for a sign character if we're not looking for ASCII chars          e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
002424   0e2d     MOVLW     0x2d           		('-' == g_RX_buf[g_RX_buf_out])                                                e:\iro_svn\opensprints\FW\user\user.c
002426   6e2a     MOVWF     0x2a,0x0                                                                                        
002428   0101     MOVLB     0x1                                                                                             
00242a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00242c   6aea     CLRF      0xea,0x0                                                                                        
00242e   0f40     ADDLW     0x40                                                                                            
002430   6ee9     MOVWF     0xe9,0x0                                                                                        
002432   0e02     MOVLW     0x2                                                                                             
002434   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002436   50ef     MOVF      0xef,0x0,0x0                                                                                    
002438   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
00243c   0e04     MOVLW     0x4            			(kASCII_CHAR != type)                                                         e:\iro_svn\opensprints\FW\user\user.c
00243e   6e2b     MOVWF     0x2b,0x0                                                                                        
002440   0efe     MOVLW     0xfe                                                                                            
002442   50db     MOVF      0xdb,0x0,0x0                                                                                    
002444   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
                                           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
002448   0e05     MOVLW     0x5            			(kUCASE_ASCII_CHAR != type)                                                   e:\iro_svn\opensprints\FW\user\user.c
00244a   6e2c     MOVWF     0x2c,0x0                                                                                        
00244c   0efe     MOVLW     0xfe                                                                                            
00244e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002450   5c2c     SUBWF     0x2c,0x0,0x0                                                                                    
002446   e022     BZ        0x248c         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
002452   e01c     BZ        0x248c                                                                                          
00243a   e128     BNZ       0x248c         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// It's an error if we see a negative sign on an unsigned value                e:\iro_svn\opensprints\FW\user\user.c
                                           		if (                                                                           e:\iro_svn\opensprints\FW\user\user.c
002454   0efe     MOVLW     0xfe           			(kUCHAR == type)                                                              e:\iro_svn\opensprints\FW\user\user.c
002456   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			||                                                                            e:\iro_svn\opensprints\FW\user\user.c
00245a   0e03     MOVLW     0x3            			(kUINT == type)                                                               e:\iro_svn\opensprints\FW\user\user.c
00245c   6e2a     MOVWF     0x2a,0x0                                                                                        
00245e   0efe     MOVLW     0xfe                                                                                            
002460   50db     MOVF      0xdb,0x0,0x0                                                                                    
002462   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002458   e006     BZ        0x2466         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
002464   e106     BNZ       0x2472                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002466   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
002468   6a1d     CLRF      0x1d,0x0       			return (0);                                                                   e:\iro_svn\opensprints\FW\user\user.c
00246a   6a1e     CLRF      0x1e,0x0                                                                                        
00246c   6a1f     CLRF      0x1f,0x0                                                                                        
00246e   d13b     BRA       0x26e6                                                                                          
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002470   d00d     BRA       0x248c         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002472   0e01     MOVLW     0x1            			neg = TRUE;                                                                   e:\iro_svn\opensprints\FW\user\user.c
002474   6ef3     MOVWF     0xf3,0x0                                                                                        
002476   0e03     MOVLW     0x3                                                                                             
002478   cff3     MOVFF     0xff3,0xfdb                                                                                     
00247a   ffdb                                                                                                               
                                           			// Move to the next character                                                 e:\iro_svn\opensprints\FW\user\user.c
00247c   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        e:\iro_svn\opensprints\FW\user\user.c
00247e   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002480   0e40     MOVLW     0x40                                                                                            
002482   0101     MOVLB     0x1                                                                                             
002484   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002486   e102     BNZ       0x248c                                                                                          
002488   0101     MOVLB     0x1                                                                                             
00248a   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// If we need to get a digit, go do that                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
00248c   0e04     MOVLW     0x4            		(kASCII_CHAR != type)                                                          e:\iro_svn\opensprints\FW\user\user.c
00248e   6e2a     MOVWF     0x2a,0x0                                                                                        
002490   0efe     MOVLW     0xfe                                                                                            
002492   50db     MOVF      0xdb,0x0,0x0                                                                                    
002494   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
002498   0e05     MOVLW     0x5            		(kUCASE_ASCII_CHAR != type)                                                    e:\iro_svn\opensprints\FW\user\user.c
00249a   6e2b     MOVWF     0x2b,0x0                                                                                        
00249c   0efe     MOVLW     0xfe                                                                                            
00249e   50db     MOVF      0xdb,0x0,0x0                                                                                    
0024a0   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
002496   e011     BZ        0x24ba         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
0024a2   e00b     BZ        0x24ba                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0024a4   0e05     MOVLW     0x5            		extract_digit(&acc, 5);                                                        e:\iro_svn\opensprints\FW\user\user.c
0024a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0024a8   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0024aa   ffe6                                                                                                               
0024ac   cfda     MOVFF     0xfda,0xfe6                                                                                     
0024ae   ffe6                                                                                                               
0024b0   d924     RCALL     0x26fa                                                                                          
0024b2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0024b4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0024b6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0024b8   d03a     BRA       0x252e         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Otherwise just copy the byte                                                e:\iro_svn\opensprints\FW\user\user.c
0024ba   0101     MOVLB     0x1            		acc = g_RX_buf[g_RX_buf_out];                                                  e:\iro_svn\opensprints\FW\user\user.c
0024bc   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0024be   6aea     CLRF      0xea,0x0                                                                                        
0024c0   0f40     ADDLW     0x40                                                                                            
0024c2   6ee9     MOVWF     0xe9,0x0                                                                                        
0024c4   0e02     MOVLW     0x2                                                                                             
0024c6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0024c8   cfef     MOVFF     0xfef,0x2a                                                                                      
0024ca   f02a                                                                                                               
0024cc   6a2b     CLRF      0x2b,0x0                                                                                        
0024ce   6a2c     CLRF      0x2c,0x0                                                                                        
0024d0   c02a     MOVFF     0x2a,0xfdf                                                                                      
0024d2   ffdf                                                                                                               
0024d4   0e01     MOVLW     0x1                                                                                             
0024d6   c02b     MOVFF     0x2b,0xfdb                                                                                      
0024d8   ffdb                                                                                                               
0024da   0e02     MOVLW     0x2                                                                                             
0024dc   c02c     MOVFF     0x2c,0xfdb                                                                                      
0024de   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Force uppercase if that's what type we have                                 e:\iro_svn\opensprints\FW\user\user.c
0024e0   0e05     MOVLW     0x5            		if (kUCASE_ASCII_CHAR == type)                                                 e:\iro_svn\opensprints\FW\user\user.c
0024e2   6e2a     MOVWF     0x2a,0x0                                                                                        
0024e4   0efe     MOVLW     0xfe                                                                                            
0024e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0024e8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0024ea   e119     BNZ       0x251e                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0024ec   0e00     MOVLW     0x0            			acc = toupper (acc);                                                          e:\iro_svn\opensprints\FW\user\user.c
0024ee   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0024f0   ffe6                                                                                                               
0024f2   0e01     MOVLW     0x1                                                                                             
0024f4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0024f6   ffe6                                                                                                               
0024f8   ecf7     CALL      0x47ee,0x0                                                                                      
0024fa   f023                                                                                                               
0024fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0024fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002500   cff3     MOVFF     0xff3,0x2a                                                                                      
002502   f02a                                                                                                               
002504   cff4     MOVFF     0xff4,0x2b                                                                                      
002506   f02b                                                                                                               
002508   6a2c     CLRF      0x2c,0x0                                                                                        
00250a   be2b     BTFSC     0x2b,0x7,0x0                                                                                    
00250c   682c     SETF      0x2c,0x0                                                                                        
00250e   c02a     MOVFF     0x2a,0xfdf                                                                                      
002510   ffdf                                                                                                               
002512   0e01     MOVLW     0x1                                                                                             
002514   c02b     MOVFF     0x2b,0xfdb                                                                                      
002516   ffdb                                                                                                               
002518   0e02     MOVLW     0x2                                                                                             
00251a   c02c     MOVFF     0x2c,0xfdb                                                                                      
00251c   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Move to the next character                                                  e:\iro_svn\opensprints\FW\user\user.c
00251e   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
002520   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002522   0e40     MOVLW     0x40                                                                                            
002524   0101     MOVLB     0x1                                                                                             
002526   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002528   e102     BNZ       0x252e                                                                                          
00252a   0101     MOVLB     0x1                                                                                             
00252c   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the negative sign                                                     e:\iro_svn\opensprints\FW\user\user.c
00252e   0e03     MOVLW     0x3            	if (neg)                                                                        e:\iro_svn\opensprints\FW\user\user.c
002530   50db     MOVF      0xdb,0x0,0x0                                                                                    
002532   e021     BZ        0x2576                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002534   cfdf     MOVFF     0xfdf,0x2a     		acc = -acc;                                                                    e:\iro_svn\opensprints\FW\user\user.c
002536   f02a                                                                                                               
002538   0e01     MOVLW     0x1                                                                                             
00253a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00253c   f02b                                                                                                               
00253e   0e02     MOVLW     0x2                                                                                             
002540   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002542   f02c                                                                                                               
002544   6822     SETF      0x22,0x0                                                                                        
002546   6823     SETF      0x23,0x0                                                                                        
002548   6824     SETF      0x24,0x0                                                                                        
00254a   c02a     MOVFF     0x2a,0x1d                                                                                       
00254c   f01d                                                                                                               
00254e   c02b     MOVFF     0x2b,0x1e                                                                                       
002550   f01e                                                                                                               
002552   c02c     MOVFF     0x2c,0x1f                                                                                       
002554   f01f                                                                                                               
002556   ecd2     CALL      0x43a4,0x0                                                                                      
002558   f021                                                                                                               
00255a   c01a     MOVFF     0x1a,0x2a                                                                                       
00255c   f02a                                                                                                               
00255e   c01b     MOVFF     0x1b,0x2b                                                                                       
002560   f02b                                                                                                               
002562   c01c     MOVFF     0x1c,0x2c                                                                                       
002564   f02c                                                                                                               
002566   c02a     MOVFF     0x2a,0xfdf                                                                                      
002568   ffdf                                                                                                               
00256a   0e01     MOVLW     0x1                                                                                             
00256c   c02b     MOVFF     0x2b,0xfdb                                                                                      
00256e   ffdb                                                                                                               
002570   0e02     MOVLW     0x2                                                                                             
002572   c02c     MOVFF     0x2c,0xfdb                                                                                      
002574   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Range check the new value                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
002576   0efe     MOVLW     0xfe           			kCHAR == type                                                                 e:\iro_svn\opensprints\FW\user\user.c
002578   50db     MOVF      0xdb,0x0,0x0                                                                                    
                                           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
00257c   cfdf     MOVFF     0xfdf,0x2a     				(acc > 127)                                                                  e:\iro_svn\opensprints\FW\user\user.c
00257e   f02a                                                                                                               
002580   0e01     MOVLW     0x1                                                                                             
002582   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002584   f02b                                                                                                               
002586   0e02     MOVLW     0x2                                                                                             
002588   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00258a   f02c                                                                                                               
00258c   342c     RLCF      0x2c,0x0,0x0                                                                                    
00258e   0e00     MOVLW     0x0                                                                                             
002590   182c     XORWF     0x2c,0x0,0x0                                                                                    
002592   e607     BN        0x25a2                                                                                          
002594   80d8     BSF       0xd8,0x0,0x0                                                                                    
002596   0e7f     MOVLW     0x7f                                                                                            
002598   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00259a   0e00     MOVLW     0x0                                                                                             
00259c   542b     SUBFWB    0x2b,0x0,0x0                                                                                    
00259e   0e00     MOVLW     0x0                                                                                             
0025a0   542c     SUBFWB    0x2c,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
0025a6   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -128)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0025a8   ffe9                                                                                                               
0025aa   cfda     MOVFF     0xfda,0xfea                                                                                     
0025ac   ffea                                                                                                               
0025ae   0e02     MOVLW     0x2                                                                                             
0025b0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0025b2   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0025b4   0aff     XORLW     0xff                                                                                            
0025b6   e606     BN        0x25c4                                                                                          
0025b8   0e80     MOVLW     0x80                                                                                            
0025ba   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0025bc   0eff     MOVLW     0xff                                                                                            
0025be   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0025c0   0eff     MOVLW     0xff                                                                                            
0025c2   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0025a2   e201     BC        0x25a6         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
0025a4   d08c     BRA       0x26be                                                                                          
0025c4   e201     BC        0x25c8                                                                                          
0025c6   d07b     BRA       0x26be                                                                                          
00257a   e126     BNZ       0x25c8         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			kUCHAR == type                                                                e:\iro_svn\opensprints\FW\user\user.c
0025c8   0efe     MOVLW     0xfe           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
0025ca   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
0025ce   cfdf     MOVFF     0xfdf,0x2d     				(acc > 255)                                                                  e:\iro_svn\opensprints\FW\user\user.c
0025d0   f02d                                                                                                               
0025d2   0e01     MOVLW     0x1                                                                                             
0025d4   cfdb     MOVFF     0xfdb,0x2e                                                                                      
0025d6   f02e                                                                                                               
0025d8   0e02     MOVLW     0x2                                                                                             
0025da   cfdb     MOVFF     0xfdb,0x2f                                                                                      
0025dc   f02f                                                                                                               
0025de   342f     RLCF      0x2f,0x0,0x0                                                                                    
0025e0   0e00     MOVLW     0x0                                                                                             
0025e2   182f     XORWF     0x2f,0x0,0x0                                                                                    
0025e4   e607     BN        0x25f4                                                                                          
0025e6   80d8     BSF       0xd8,0x0,0x0                                                                                    
0025e8   0eff     MOVLW     0xff                                                                                            
0025ea   542d     SUBFWB    0x2d,0x0,0x0                                                                                    
0025ec   0e00     MOVLW     0x0                                                                                             
0025ee   542e     SUBFWB    0x2e,0x0,0x0                                                                                    
0025f0   0e00     MOVLW     0x0                                                                                             
0025f2   542f     SUBFWB    0x2f,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
0025f6   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0025f8   ffe9                                                                                                               
0025fa   cfda     MOVFF     0xfda,0xfea                                                                                     
0025fc   ffea                                                                                                               
0025fe   0e02     MOVLW     0x2                                                                                             
002600   90d8     BCF       0xd8,0x0,0x0                                                                                    
002602   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002604   0a00     XORLW     0x0                                                                                             
002606   e606     BN        0x2614                                                                                          
002608   0e00     MOVLW     0x0                                                                                             
00260a   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00260c   0e00     MOVLW     0x0                                                                                             
00260e   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002610   0e00     MOVLW     0x0                                                                                             
002612   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0025f4   e364     BNC       0x26be         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002614   e354     BNC       0x26be                                                                                          
0025cc   e124     BNZ       0x2616         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
002616   0e02     MOVLW     0x2            			kINT == type                                                                  e:\iro_svn\opensprints\FW\user\user.c
002618   6e30     MOVWF     0x30,0x0                                                                                        
00261a   0efe     MOVLW     0xfe                                                                                            
00261c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00261e   5c30     SUBWF     0x30,0x0,0x0   			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
002622   cfdf     MOVFF     0xfdf,0x31     				(acc > 32767)                                                                e:\iro_svn\opensprints\FW\user\user.c
002624   f031                                                                                                               
002626   0e01     MOVLW     0x1                                                                                             
002628   cfdb     MOVFF     0xfdb,0x32                                                                                      
00262a   f032                                                                                                               
00262c   0e02     MOVLW     0x2                                                                                             
00262e   cfdb     MOVFF     0xfdb,0x33                                                                                      
002630   f033                                                                                                               
002632   3433     RLCF      0x33,0x0,0x0                                                                                    
002634   0e00     MOVLW     0x0                                                                                             
002636   1833     XORWF     0x33,0x0,0x0                                                                                    
002638   e607     BN        0x2648                                                                                          
00263a   80d8     BSF       0xd8,0x0,0x0                                                                                    
00263c   0eff     MOVLW     0xff                                                                                            
00263e   5431     SUBFWB    0x31,0x0,0x0                                                                                    
002640   0e7f     MOVLW     0x7f                                                                                            
002642   5432     SUBFWB    0x32,0x0,0x0                                                                                    
002644   0e00     MOVLW     0x0                                                                                             
002646   5433     SUBFWB    0x33,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
00264a   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -32768)                                                               e:\iro_svn\opensprints\FW\user\user.c
00264c   ffe9                                                                                                               
00264e   cfda     MOVFF     0xfda,0xfea                                                                                     
002650   ffea                                                                                                               
002652   0e02     MOVLW     0x2                                                                                             
002654   80d8     BSF       0xd8,0x0,0x0                                                                                    
002656   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002658   0aff     XORLW     0xff                                                                                            
00265a   e606     BN        0x2668                                                                                          
00265c   0e00     MOVLW     0x0                                                                                             
00265e   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002660   0e80     MOVLW     0x80                                                                                            
002662   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002664   0eff     MOVLW     0xff                                                                                            
002666   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002648   e33a     BNC       0x26be         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002668   e32a     BNC       0x26be                                                                                          
002620   e124     BNZ       0x266a         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
00266a   0e03     MOVLW     0x3            			kUINT == type                                                                 e:\iro_svn\opensprints\FW\user\user.c
00266c   6e34     MOVWF     0x34,0x0                                                                                        
00266e   0efe     MOVLW     0xfe                                                                                            
002670   50db     MOVF      0xdb,0x0,0x0                                                                                    
002672   5c34     SUBWF     0x34,0x0,0x0   			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
002676   cfdf     MOVFF     0xfdf,0x35     				(acc > 65535)                                                                e:\iro_svn\opensprints\FW\user\user.c
002678   f035                                                                                                               
00267a   0e01     MOVLW     0x1                                                                                             
00267c   cfdb     MOVFF     0xfdb,0x36                                                                                      
00267e   f036                                                                                                               
002680   0e02     MOVLW     0x2                                                                                             
002682   cfdb     MOVFF     0xfdb,0x37                                                                                      
002684   f037                                                                                                               
002686   3437     RLCF      0x37,0x0,0x0                                                                                    
002688   0e00     MOVLW     0x0                                                                                             
00268a   1837     XORWF     0x37,0x0,0x0                                                                                    
00268c   e607     BN        0x269c                                                                                          
00268e   80d8     BSF       0xd8,0x0,0x0                                                                                    
002690   0eff     MOVLW     0xff                                                                                            
002692   5435     SUBFWB    0x35,0x0,0x0                                                                                    
002694   0eff     MOVLW     0xff                                                                                            
002696   5436     SUBFWB    0x36,0x0,0x0                                                                                    
002698   0e00     MOVLW     0x0                                                                                             
00269a   5437     SUBFWB    0x37,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
00269e   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0026a0   ffe9                                                                                                               
0026a2   cfda     MOVFF     0xfda,0xfea                                                                                     
0026a4   ffea                                                                                                               
0026a6   0e02     MOVLW     0x2                                                                                             
0026a8   90d8     BCF       0xd8,0x0,0x0                                                                                    
0026aa   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0026ac   0a00     XORLW     0x0                                                                                             
0026ae   e606     BN        0x26bc                                                                                          
0026b0   0e00     MOVLW     0x0                                                                                             
0026b2   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0026b4   0e00     MOVLW     0x0                                                                                             
0026b6   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0026b8   0e00     MOVLW     0x0                                                                                             
0026ba   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
00269c   e310     BNC       0x26be         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
0026bc   e205     BC        0x26c8                                                                                          
002674   e129     BNZ       0x26c8         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0026be   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0026c0   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
0026c2   6a1e     CLRF      0x1e,0x0                                                                                        
0026c4   6a1f     CLRF      0x1f,0x0                                                                                        
0026c6   d00f     BRA       0x26e6                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026c8   cfdf     MOVFF     0xfdf,0x2a     	return(acc);	                                                                   e:\iro_svn\opensprints\FW\user\user.c
0026ca   f02a                                                                                                               
0026cc   0e01     MOVLW     0x1                                                                                             
0026ce   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0026d0   f02b                                                                                                               
0026d2   0e02     MOVLW     0x2                                                                                             
0026d4   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0026d6   f02c                                                                                                               
0026d8   c02a     MOVFF     0x2a,0x1d                                                                                       
0026da   f01d                                                                                                               
0026dc   c02b     MOVFF     0x2b,0x1e                                                                                       
0026de   f01e                                                                                                               
0026e0   c02c     MOVFF     0x2c,0x1f                                                                                       
0026e2   f01f                                                                                                               
0026e4   d000     BRA       0x26e6                                                                                          
0026e6   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0026e8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0026ea   e202     BC        0x26f0                                                                                          
0026ec   6ae1     CLRF      0xe1,0x0                                                                                        
0026ee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0026f0   6ee1     MOVWF     0xe1,0x0                                                                                        
0026f2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0026f4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0026f6   ffd9                                                                                                               
0026f8   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Loop 'digits' number of times, looking at the                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // byte in input_buffer index *ptr, and if it is                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // a digit, adding it to acc. Take care of                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // powers of ten as well. If you hit a non-numerical                             e:\iro_svn\opensprints\FW\user\user.c
                                           // char, then return FALSE, otherwise return TRUE.                               e:\iro_svn\opensprints\FW\user\user.c
                                           // Store result as you go in *acc.                                               e:\iro_svn\opensprints\FW\user\user.c
0026fa   cfd9     MOVFF     0xfd9,0xfe6    signed char extract_digit(signed short long * acc,	unsigned char digits)         e:\iro_svn\opensprints\FW\user\user.c
0026fc   ffe6                                                                                                               
0026fe   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002700   ffd9                                                                                                               
002702   0e02     MOVLW     0x2                                                                                             
002704   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char val;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char digit_cnt;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
002706   0efd     MOVLW     0xfd           	*acc = 0;                                                                       e:\iro_svn\opensprints\FW\user\user.c
002708   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00270a   ffe9                                                                                                               
00270c   0efe     MOVLW     0xfe                                                                                            
00270e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002710   ffea                                                                                                               
002712   6aee     CLRF      0xee,0x0                                                                                        
002714   6aee     CLRF      0xee,0x0                                                                                        
002716   6aee     CLRF      0xee,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002718   0e01     MOVLW     0x1            	for (digit_cnt = 0; digit_cnt < digits; digit_cnt++)                            e:\iro_svn\opensprints\FW\user\user.c
00271a   6adb     CLRF      0xdb,0x0                                                                                        
00271c   0efc     MOVLW     0xfc                                                                                            
00271e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002720   6ef3     MOVWF     0xf3,0x0                                                                                        
002722   0e01     MOVLW     0x1                                                                                             
002724   cfdb     MOVFF     0xfdb,0xff4                                                                                     
002726   fff4                                                                                                               
002728   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00272a   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
00272c   e255     BC        0x27d8                                                                                          
0027d2   0e01     MOVLW     0x1                                                                                             
0027d4   2adb     INCF      0xdb,0x1,0x0                                                                                    
0027d6   d7a2     BRA       0x271c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00272e   0101     MOVLB     0x1            		val = g_RX_buf[g_RX_buf_out];                                                  e:\iro_svn\opensprints\FW\user\user.c
002730   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002732   6aea     CLRF      0xea,0x0                                                                                        
002734   0f40     ADDLW     0x40                                                                                            
002736   6ee9     MOVWF     0xe9,0x0                                                                                        
002738   0e02     MOVLW     0x2                                                                                             
00273a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00273c   cfef     MOVFF     0xfef,0xfdf                                                                                     
00273e   ffdf                                                                                                               
002740   0e30     MOVLW     0x30           		if ((val >= 48) && (val <= 57))                                                e:\iro_svn\opensprints\FW\user\user.c
002742   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002744   e344     BNC       0x27ce                                                                                          
002746   50df     MOVF      0xdf,0x0,0x0                                                                                    
002748   0839     SUBLW     0x39                                                                                            
00274a   e341     BNC       0x27ce                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00274c   0efd     MOVLW     0xfd           			*acc = (*acc * 10) + (val - 48);                                              e:\iro_svn\opensprints\FW\user\user.c
00274e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002750   ffe9                                                                                                               
002752   0efe     MOVLW     0xfe                                                                                            
002754   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002756   ffea                                                                                                               
002758   cfee     MOVFF     0xfee,0x2d                                                                                      
00275a   f02d                                                                                                               
00275c   cfee     MOVFF     0xfee,0x2e                                                                                      
00275e   f02e                                                                                                               
002760   cfef     MOVFF     0xfef,0x2f                                                                                      
002762   f02f                                                                                                               
002764   0e0a     MOVLW     0xa                                                                                             
002766   6e22     MOVWF     0x22,0x0                                                                                        
002768   6a23     CLRF      0x23,0x0                                                                                        
00276a   6a24     CLRF      0x24,0x0                                                                                        
00276c   c02d     MOVFF     0x2d,0x1d                                                                                       
00276e   f01d                                                                                                               
002770   c02e     MOVFF     0x2e,0x1e                                                                                       
002772   f01e                                                                                                               
002774   c02f     MOVFF     0x2f,0x1f                                                                                       
002776   f01f                                                                                                               
002778   ecd2     CALL      0x43a4,0x0                                                                                      
00277a   f021                                                                                                               
00277c   c01a     MOVFF     0x1a,0x2d                                                                                       
00277e   f02d                                                                                                               
002780   c01b     MOVFF     0x1b,0x2e                                                                                       
002782   f02e                                                                                                               
002784   c01c     MOVFF     0x1c,0x2f                                                                                       
002786   f02f                                                                                                               
002788   0e30     MOVLW     0x30                                                                                            
00278a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00278c   6e30     MOVWF     0x30,0x0                                                                                        
00278e   6a31     CLRF      0x31,0x0                                                                                        
002790   6a32     CLRF      0x32,0x0                                                                                        
002792   502d     MOVF      0x2d,0x0,0x0                                                                                    
002794   2430     ADDWF     0x30,0x0,0x0                                                                                    
002796   6e2a     MOVWF     0x2a,0x0                                                                                        
002798   502e     MOVF      0x2e,0x0,0x0                                                                                    
00279a   2031     ADDWFC    0x31,0x0,0x0                                                                                    
00279c   6e2b     MOVWF     0x2b,0x0                                                                                        
00279e   502f     MOVF      0x2f,0x0,0x0                                                                                    
0027a0   2032     ADDWFC    0x32,0x0,0x0                                                                                    
0027a2   6e2c     MOVWF     0x2c,0x0                                                                                        
0027a4   0efd     MOVLW     0xfd                                                                                            
0027a6   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0027a8   ffe9                                                                                                               
0027aa   0efe     MOVLW     0xfe                                                                                            
0027ac   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0027ae   ffea                                                                                                               
0027b0   c02a     MOVFF     0x2a,0xfee                                                                                      
0027b2   ffee                                                                                                               
0027b4   c02b     MOVFF     0x2b,0xfee                                                                                      
0027b6   ffee                                                                                                               
0027b8   c02c     MOVFF     0x2c,0xfee                                                                                      
0027ba   ffee                                                                                                               
                                           			// Move to the next character                                                 e:\iro_svn\opensprints\FW\user\user.c
0027bc   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        e:\iro_svn\opensprints\FW\user\user.c
0027be   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0027c0   0e40     MOVLW     0x40                                                                                            
0027c2   0101     MOVLB     0x1                                                                                             
0027c4   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0027c6   e102     BNZ       0x27cc                                                                                          
0027c8   0101     MOVLB     0x1                                                                                             
0027ca   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0027cc   d002     BRA       0x27d2         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0027ce   0e00     MOVLW     0x0            			return (FALSE);                                                               e:\iro_svn\opensprints\FW\user\user.c
0027d0   d005     BRA       0x27dc                                                                                          
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0027d8   0e01     MOVLW     0x1            	return (TRUE);                                                                  e:\iro_svn\opensprints\FW\user\user.c
0027da   d000     BRA       0x27dc                                                                                          
0027dc   6e2a     MOVWF     0x2a,0x0       }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0027de   0e02     MOVLW     0x2                                                                                             
0027e0   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0027e2   e202     BC        0x27e8                                                                                          
0027e4   6ae1     CLRF      0xe1,0x0                                                                                        
0027e6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0027e8   6ee1     MOVWF     0xe1,0x0                                                                                        
0027ea   502a     MOVF      0x2a,0x0,0x0                                                                                    
0027ec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0027ee   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0027f0   ffd9                                                                                                               
0027f2   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // For debugging, this command will spit out a bunch of values.                  e:\iro_svn\opensprints\FW\user\user.c
                                           void print_status(void)                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"Status=%i\r\n"                                                     e:\iro_svn\opensprints\FW\user\user.c
0027f4   5006     MOVF      0x6,0x0,0x0    		,ISR_D_FIFO_length                                                             e:\iro_svn\opensprints\FW\user\user.c
0027fa   0e50     MOVLW     0x50                                                                                            
0027fc   6e2a     MOVWF     0x2a,0x0                                                                                        
0027fe   0e42     MOVLW     0x42                                                                                            
002800   6e2b     MOVWF     0x2b,0x0                                                                                        
002802   6a2c     CLRF      0x2c,0x0                                                                                        
002804   c02a     MOVFF     0x2a,0xfe6                                                                                      
002806   ffe6                                                                                                               
002808   c02b     MOVFF     0x2b,0xfe6                                                                                      
00280a   ffe6                                                                                                               
00280c   c02c     MOVFF     0x2c,0xfe6                                                                                      
00280e   ffe6                                                                                                               
0027f6   6ee6     MOVWF     0xe6,0x0       	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
0027f8   6ae6     CLRF      0xe6,0x0                                                                                        
002810   ecfe     CALL      0x45fc,0x0                                                                                      
002812   f022                                                                                                               
002814   6e2d     MOVWF     0x2d,0x0                                                                                        
002816   0e05     MOVLW     0x5                                                                                             
002818   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00281a   502d     MOVF      0x2d,0x0,0x0                                                                                    
00281c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void BlinkUSBStatus(void)                                    e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        BlinkUSBStatus turns on and off LEDs corresponding to        e:\iro_svn\opensprints\FW\user\user.c
                                            *                  the USB device state.                                        e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            mLED macros can be found in io_cfg.h                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                  usb_device_state is declared in usbmmap.c and is modified    e:\iro_svn\opensprints\FW\user\user.c
                                            *                  in usbdrv.c, usbctrltrf.c, and usb9.c                        e:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                               static word LEDCount = 0;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	static unsigned char LEDState = 0;                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               if (                                                                         e:\iro_svn\opensprints\FW\user\user.c
00281e   0101     MOVLB     0x1            		usb_device_state == DETACHED_STATE                                             e:\iro_svn\opensprints\FW\user\user.c
002820   51ea     MOVF      0xea,0x0,0x1                                                                                    
                                                  	||                                                                       e:\iro_svn\opensprints\FW\user\user.c
002824   0e01     MOVLW     0x1                   	1 == UCONbits.SUSPND                                                     e:\iro_svn\opensprints\FW\user\user.c
002826   6e2a     MOVWF     0x2a,0x0                                                                                        
002828   506d     MOVF      0x6d,0x0,0x0                                                                                    
00282a   0b02     ANDLW     0x2                                                                                             
00282c   e001     BZ        0x2830                                                                                          
00282e   0e01     MOVLW     0x1                                                                                             
002822   e008     BZ        0x2834             )                                                                            e:\iro_svn\opensprints\FW\user\user.c
002830   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002832   e102     BNZ       0x2838                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
002834   908b     BCF       0x8b,0x0,0x0   		mLED_1_Off();                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
002836   d05d     BRA       0x28f2             else if (                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           		usb_device_state == ATTACHED_STATE                                             e:\iro_svn\opensprints\FW\user\user.c
002838   0101     MOVLB     0x1            		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
00283a   05ea     DECF      0xea,0x0,0x1                                                                                    
00283e   0e02     MOVLW     0x2            		usb_device_state == POWERED_STATE		                                            e:\iro_svn\opensprints\FW\user\user.c
00283c   e00c     BZ        0x2856         		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
002840   0101     MOVLB     0x1                                                                                             
002842   5dea     SUBWF     0xea,0x0,0x1                                                                                    
002844   e008     BZ        0x2856                                                                                          
002846   0e03     MOVLW     0x3            		usb_device_state == DEFAULT_STATE                                              e:\iro_svn\opensprints\FW\user\user.c
002848   0101     MOVLB     0x1            		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
00284a   5dea     SUBWF     0xea,0x0,0x1                                                                                    
00284c   e004     BZ        0x2856                                                                                          
00284e   0e05     MOVLW     0x5            		usb_device_state == ADDRESS_STATE                                              e:\iro_svn\opensprints\FW\user\user.c
002850   0101     MOVLB     0x1            	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
002852   5dea     SUBWF     0xea,0x0,0x1                                                                                    
002854   e102     BNZ       0x285a                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
002856   808b     BSF       0x8b,0x0,0x0           mLED_1_On();                                                             e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
002858   d04c     BRA       0x28f2             else if (usb_device_state == CONFIGURED_STATE)                               e:\iro_svn\opensprints\FW\user\user.c
00285a   0e06     MOVLW     0x6                                                                                             
00285c   0101     MOVLB     0x1                                                                                             
00285e   5dea     SUBWF     0xea,0x0,0x1                                                                                    
002860   e148     BNZ       0x28f2                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
002862   0101     MOVLB     0x1            		LEDCount--;                                                                    e:\iro_svn\opensprints\FW\user\user.c
002864   07da     DECF      0xda,0x1,0x1                                                                                    
002866   0e00     MOVLW     0x0                                                                                             
002868   5bdb     SUBWFB    0xdb,0x1,0x1                                                                                    
00286a   0101     MOVLB     0x1            		if (0 == LEDState)                                                             e:\iro_svn\opensprints\FW\user\user.c
00286c   51dc     MOVF      0xdc,0x0,0x1                                                                                    
00286e   e10e     BNZ       0x288c                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002870   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
002872   51da     MOVF      0xda,0x0,0x1                                                                                    
002874   11db     IORWF     0xdb,0x0,0x1                                                                                    
002876   e109     BNZ       0x288a                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002878   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 e:\iro_svn\opensprints\FW\user\user.c
00287a   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
00287c   0e10     MOVLW     0x10                                                                                            
00287e   6fda     MOVWF     0xda,0x1                                                                                        
002880   0e27     MOVLW     0x27                                                                                            
002882   6fdb     MOVWF     0xdb,0x1                                                                                        
002884   0101     MOVLB     0x1            				LEDState = 1;                                                                e:\iro_svn\opensprints\FW\user\user.c
002886   0e01     MOVLW     0x1                                                                                             
002888   6fdc     MOVWF     0xdc,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00288a   d033     BRA       0x28f2         		else if (1 == LEDState)                                                        e:\iro_svn\opensprints\FW\user\user.c
00288c   0101     MOVLB     0x1                                                                                             
00288e   05dc     DECF      0xdc,0x0,0x1                                                                                    
002890   e10e     BNZ       0x28ae                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002892   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
002894   51da     MOVF      0xda,0x0,0x1                                                                                    
002896   11db     IORWF     0xdb,0x0,0x1                                                                                    
002898   e109     BNZ       0x28ac                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
00289a   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                e:\iro_svn\opensprints\FW\user\user.c
00289c   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
00289e   0e10     MOVLW     0x10                                                                                            
0028a0   6fda     MOVWF     0xda,0x1                                                                                        
0028a2   0e27     MOVLW     0x27                                                                                            
0028a4   6fdb     MOVWF     0xdb,0x1                                                                                        
0028a6   0101     MOVLB     0x1            				LEDState = 2;                                                                e:\iro_svn\opensprints\FW\user\user.c
0028a8   0e02     MOVLW     0x2                                                                                             
0028aa   6fdc     MOVWF     0xdc,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0028ac   d022     BRA       0x28f2         		else if (2 == LEDState)                                                        e:\iro_svn\opensprints\FW\user\user.c
0028ae   0e02     MOVLW     0x2                                                                                             
0028b0   0101     MOVLB     0x1                                                                                             
0028b2   5ddc     SUBWF     0xdc,0x0,0x1                                                                                    
0028b4   e10e     BNZ       0x28d2                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0028b6   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
0028b8   51da     MOVF      0xda,0x0,0x1                                                                                    
0028ba   11db     IORWF     0xdb,0x0,0x1                                                                                    
0028bc   e109     BNZ       0x28d0                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0028be   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 e:\iro_svn\opensprints\FW\user\user.c
0028c0   0101     MOVLB     0x1            				LEDCount = 100000U;				                                                      e:\iro_svn\opensprints\FW\user\user.c
0028c2   0ea0     MOVLW     0xa0                                                                                            
0028c4   6fda     MOVWF     0xda,0x1                                                                                        
0028c6   0e86     MOVLW     0x86                                                                                            
0028c8   6fdb     MOVWF     0xdb,0x1                                                                                        
0028ca   0101     MOVLB     0x1            				LEDState = 3;                                                                e:\iro_svn\opensprints\FW\user\user.c
0028cc   0e03     MOVLW     0x3                                                                                             
0028ce   6fdc     MOVWF     0xdc,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0028d0   d010     BRA       0x28f2         		else if (LEDState >= 3)                                                        e:\iro_svn\opensprints\FW\user\user.c
0028d2   0e03     MOVLW     0x3                                                                                             
0028d4   0101     MOVLB     0x1                                                                                             
0028d6   5ddc     SUBWF     0xdc,0x0,0x1                                                                                    
0028d8   e30c     BNC       0x28f2                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0028da   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
0028dc   51da     MOVF      0xda,0x0,0x1                                                                                    
0028de   11db     IORWF     0xdb,0x0,0x1                                                                                    
0028e0   e108     BNZ       0x28f2                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0028e2   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                e:\iro_svn\opensprints\FW\user\user.c
0028e4   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
0028e6   0e10     MOVLW     0x10                                                                                            
0028e8   6fda     MOVWF     0xda,0x1                                                                                        
0028ea   0e27     MOVLW     0x27                                                                                            
0028ec   6fdb     MOVWF     0xdb,0x1                                                                                        
0028ee   0101     MOVLB     0x1            				LEDState = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
0028f0   6bdc     CLRF      0xdc,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
0028f2   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0028f4   b482     BTFSC     0x82,0x2,0x0   	if( 0 == UserSW)                   	// If pressed                               e:\iro_svn\opensprints\FW\user\user.c
0028f6   d003     BRA       0x28fe                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0028f8   0e01     MOVLW     0x1            	    return (TRUE);                	// Was pressed                               e:\iro_svn\opensprints\FW\user\user.c
0028fa   d003     BRA       0x2902                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0028fc   d002     BRA       0x2902         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0028fe   0e00     MOVLW     0x0            		return (FALSE);					// Was not pressed                                         e:\iro_svn\opensprints\FW\user\user.c
002900   d000     BRA       0x2902                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002902   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** Start Luke Orland code **************************************************/   e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL justBegun = TRUE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor0;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor1;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor0;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor1;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor0PortApin=0;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor1PortApin=1;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int riderOneTicks;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int riderTwoTicks;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int gameTime;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void HallEffSensors(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002904   0101     MOVLB     0x1            	if(is_racing)                                                                   e:\iro_svn\opensprints\FW\user\user.c
002906   51d8     MOVF      0xd8,0x0,0x1                                                                                    
002908   e101     BNZ       0x290c                                                                                          
00290a   d0b3     BRA       0x2a72                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00290c   0101     MOVLB     0x1            		if(justBegun)                                                                  e:\iro_svn\opensprints\FW\user\user.c
00290e   51dd     MOVF      0xdd,0x0,0x1                                                                                    
002910   e031     BZ        0x2974                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// initialize the pins                                                        e:\iro_svn\opensprints\FW\user\user.c
002912   0e01     MOVLW     0x1            			bitset (DDRA, Sensor0PortApin);     // set Port A Pin x as input              e:\iro_svn\opensprints\FW\user\user.c
002914   c1de     MOVFF     0x1de,0xfe7                                                                                     
002916   ffe7                                                                                                               
002918   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00291a   e004     BZ        0x2924                                                                                          
00291c   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00291e   0bfe     ANDLW     0xfe                                                                                            
002920   06e7     DECF      0xe7,0x1,0x0                                                                                    
002922   e1fc     BNZ       0x291c                                                                                          
002924   1292     IORWF     0x92,0x1,0x0                                                                                    
002926   0e01     MOVLW     0x1            			bitset (DDRA, Sensor1PortApin);     // set Port A Pin x as input              e:\iro_svn\opensprints\FW\user\user.c
002928   c1e0     MOVFF     0x1e0,0xfe7                                                                                     
00292a   ffe7                                                                                                               
00292c   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00292e   e004     BZ        0x2938                                                                                          
002930   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002932   0bfe     ANDLW     0xfe                                                                                            
002934   06e7     DECF      0xe7,0x1,0x0                                                                                    
002936   e1fc     BNZ       0x2930                                                                                          
002938   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           			// read the pins                                                              e:\iro_svn\opensprints\FW\user\user.c
00293a   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read Port A Pin x state e:\iro_svn\opensprints\FW\user\user.c
00293c   c1de     MOVFF     0x1de,0xfe7                                                                                     
00293e   ffe7                                                                                                               
002940   52e7     MOVF      0xe7,0x1,0x0                                                                                    
002942   e004     BZ        0x294c                                                                                          
002944   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002946   0bfe     ANDLW     0xfe                                                                                            
002948   06e7     DECF      0xe7,0x1,0x0                                                                                    
00294a   e1fc     BNZ       0x2944                                                                                          
00294c   1480     ANDWF     0x80,0x0,0x0                                                                                    
00294e   0101     MOVLB     0x1                                                                                             
002950   6fac     MOVWF     0xac,0x1                                                                                        
002952   6bad     CLRF      0xad,0x1                                                                                        
002954   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read Port A Pin x state e:\iro_svn\opensprints\FW\user\user.c
002956   c1e0     MOVFF     0x1e0,0xfe7                                                                                     
002958   ffe7                                                                                                               
00295a   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00295c   e004     BZ        0x2966                                                                                          
00295e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002960   0bfe     ANDLW     0xfe                                                                                            
002962   06e7     DECF      0xe7,0x1,0x0                                                                                    
002964   e1fc     BNZ       0x295e                                                                                          
002966   1480     ANDWF     0x80,0x0,0x0                                                                                    
002968   0101     MOVLB     0x1                                                                                             
00296a   6fae     MOVWF     0xae,0x1                                                                                        
00296c   6baf     CLRF      0xaf,0x1                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
00296e   0101     MOVLB     0x1            			justBegun=0;                                                                  e:\iro_svn\opensprints\FW\user\user.c
002970   6bdd     CLRF      0xdd,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002972   d07f     BRA       0x2a72         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// keeping time                                                               e:\iro_svn\opensprints\FW\user\user.c
002974   a29e     BTFSS     0x9e,0x1,0x0   			if (PIR1bits.TMR2IF)                                                          e:\iro_svn\opensprints\FW\user\user.c
002976   d005     BRA       0x2982                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002978   0101     MOVLB     0x1            				++gameTime; 				// increment by 1ms                                          e:\iro_svn\opensprints\FW\user\user.c
00297a   2bb4     INCF      0xb4,0x1,0x1                                                                                    
00297c   0e00     MOVLW     0x0                                                                                             
00297e   23b5     ADDWFC    0xb5,0x1,0x1                                                                                    
002980   929e     BCF       0x9e,0x1,0x0   				PIR1bits.TMR2IF = 0;		// Clear the interrupt                                 e:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// remember previous state of pins                                            e:\iro_svn\opensprints\FW\user\user.c
002982   c1ac     MOVFF     0x1ac,0x1a8    			prevValueSensor0=currentValueSensor0;                                         e:\iro_svn\opensprints\FW\user\user.c
002984   f1a8                                                                                                               
002986   c1ad     MOVFF     0x1ad,0x1a9                                                                                     
002988   f1a9                                                                                                               
00298a   c1ae     MOVFF     0x1ae,0x1aa    			prevValueSensor1=currentValueSensor1;                                         e:\iro_svn\opensprints\FW\user\user.c
00298c   f1aa                                                                                                               
00298e   c1af     MOVFF     0x1af,0x1ab                                                                                     
002990   f1ab                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           			// read the pins                                                              e:\iro_svn\opensprints\FW\user\user.c
002992   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read state of Port A Pin x e:\iro_svn\opensprints\FW\user\user.c
002994   c1de     MOVFF     0x1de,0xfe7                                                                                     
002996   ffe7                                                                                                               
002998   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00299a   e004     BZ        0x29a4                                                                                          
00299c   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00299e   0bfe     ANDLW     0xfe                                                                                            
0029a0   06e7     DECF      0xe7,0x1,0x0                                                                                    
0029a2   e1fc     BNZ       0x299c                                                                                          
0029a4   1480     ANDWF     0x80,0x0,0x0                                                                                    
0029a6   0101     MOVLB     0x1                                                                                             
0029a8   6fac     MOVWF     0xac,0x1                                                                                        
0029aa   6bad     CLRF      0xad,0x1                                                                                        
0029ac   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read state of Port A Pin x e:\iro_svn\opensprints\FW\user\user.c
0029ae   c1e0     MOVFF     0x1e0,0xfe7                                                                                     
0029b0   ffe7                                                                                                               
0029b2   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0029b4   e004     BZ        0x29be                                                                                          
0029b6   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0029b8   0bfe     ANDLW     0xfe                                                                                            
0029ba   06e7     DECF      0xe7,0x1,0x0                                                                                    
0029bc   e1fc     BNZ       0x29b6                                                                                          
0029be   1480     ANDWF     0x80,0x0,0x0                                                                                    
0029c0   0101     MOVLB     0x1                                                                                             
0029c2   6fae     MOVWF     0xae,0x1                                                                                        
0029c4   6baf     CLRF      0xaf,0x1                                                                                        
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
0029c6   0101     MOVLB     0x1            			if((currentValueSensor0^prevValueSensor0)&~currentValueSensor0)               e:\iro_svn\opensprints\FW\user\user.c
0029c8   0101     MOVLB     0x1                                                                                             
0029ca   51ac     MOVF      0xac,0x0,0x1                                                                                    
0029cc   0101     MOVLB     0x1                                                                                             
0029ce   19a8     XORWF     0xa8,0x0,0x1                                                                                    
0029d0   6e2c     MOVWF     0x2c,0x0                                                                                        
0029d2   0101     MOVLB     0x1                                                                                             
0029d4   0101     MOVLB     0x1                                                                                             
0029d6   51ad     MOVF      0xad,0x0,0x1                                                                                    
0029d8   0101     MOVLB     0x1                                                                                             
0029da   19a9     XORWF     0xa9,0x0,0x1                                                                                    
0029dc   6e2d     MOVWF     0x2d,0x0                                                                                        
0029de   c1ac     MOVFF     0x1ac,0x2e                                                                                      
0029e0   f02e                                                                                                               
0029e2   c1ad     MOVFF     0x1ad,0x2f                                                                                      
0029e4   f02f                                                                                                               
0029e6   1e2e     COMF      0x2e,0x1,0x0                                                                                    
0029e8   1e2f     COMF      0x2f,0x1,0x0                                                                                    
0029ea   502c     MOVF      0x2c,0x0,0x0                                                                                    
0029ec   142e     ANDWF     0x2e,0x0,0x0                                                                                    
0029ee   6e2a     MOVWF     0x2a,0x0                                                                                        
0029f0   502d     MOVF      0x2d,0x0,0x0                                                                                    
0029f2   142f     ANDWF     0x2f,0x0,0x0                                                                                    
0029f4   6e2b     MOVWF     0x2b,0x0                                                                                        
0029f6   502a     MOVF      0x2a,0x0,0x0                                                                                    
0029f8   102b     IORWF     0x2b,0x0,0x0                                                                                    
0029fa   e010     BZ        0x2a1c                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high e:\iro_svn\opensprints\FW\user\user.c
0029fc   0e4c     MOVLW     0x4c           				printf("1\r\n");                                                             e:\iro_svn\opensprints\FW\user\user.c
0029fe   6e2a     MOVWF     0x2a,0x0                                                                                        
002a00   0e42     MOVLW     0x42                                                                                            
002a02   6e2b     MOVWF     0x2b,0x0                                                                                        
002a04   6a2c     CLRF      0x2c,0x0                                                                                        
002a06   c02a     MOVFF     0x2a,0xfe6                                                                                      
002a08   ffe6                                                                                                               
002a0a   c02b     MOVFF     0x2b,0xfe6                                                                                      
002a0c   ffe6                                                                                                               
002a0e   c02c     MOVFF     0x2c,0xfe6                                                                                      
002a10   ffe6                                                                                                               
002a12   ecfe     CALL      0x45fc,0x0                                                                                      
002a14   f022                                                                                                               
002a16   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a18   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
002a1c   0101     MOVLB     0x1            			if((currentValueSensor1^prevValueSensor1)&~currentValueSensor1)               e:\iro_svn\opensprints\FW\user\user.c
002a1e   0101     MOVLB     0x1                                                                                             
002a20   51ae     MOVF      0xae,0x0,0x1                                                                                    
002a22   0101     MOVLB     0x1                                                                                             
002a24   19aa     XORWF     0xaa,0x0,0x1                                                                                    
002a26   6e2c     MOVWF     0x2c,0x0                                                                                        
002a28   0101     MOVLB     0x1                                                                                             
002a2a   0101     MOVLB     0x1                                                                                             
002a2c   51af     MOVF      0xaf,0x0,0x1                                                                                    
002a2e   0101     MOVLB     0x1                                                                                             
002a30   19ab     XORWF     0xab,0x0,0x1                                                                                    
002a32   6e2d     MOVWF     0x2d,0x0                                                                                        
002a34   c1ae     MOVFF     0x1ae,0x2e                                                                                      
002a36   f02e                                                                                                               
002a38   c1af     MOVFF     0x1af,0x2f                                                                                      
002a3a   f02f                                                                                                               
002a3c   1e2e     COMF      0x2e,0x1,0x0                                                                                    
002a3e   1e2f     COMF      0x2f,0x1,0x0                                                                                    
002a40   502c     MOVF      0x2c,0x0,0x0                                                                                    
002a42   142e     ANDWF     0x2e,0x0,0x0                                                                                    
002a44   6e2a     MOVWF     0x2a,0x0                                                                                        
002a46   502d     MOVF      0x2d,0x0,0x0                                                                                    
002a48   142f     ANDWF     0x2f,0x0,0x0                                                                                    
002a4a   6e2b     MOVWF     0x2b,0x0                                                                                        
002a4c   502a     MOVF      0x2a,0x0,0x0                                                                                    
002a4e   102b     IORWF     0x2b,0x0,0x0                                                                                    
002a50   e010     BZ        0x2a72                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high e:\iro_svn\opensprints\FW\user\user.c
002a52   0e48     MOVLW     0x48           				printf("2\r\n");                                                             e:\iro_svn\opensprints\FW\user\user.c
002a54   6e2a     MOVWF     0x2a,0x0                                                                                        
002a56   0e42     MOVLW     0x42                                                                                            
002a58   6e2b     MOVWF     0x2b,0x0                                                                                        
002a5a   6a2c     CLRF      0x2c,0x0                                                                                        
002a5c   c02a     MOVFF     0x2a,0xfe6                                                                                      
002a5e   ffe6                                                                                                               
002a60   c02b     MOVFF     0x2b,0xfe6                                                                                      
002a62   ffe6                                                                                                               
002a64   c02c     MOVFF     0x2c,0xfe6                                                                                      
002a66   ffe6                                                                                                               
002a68   ecfe     CALL      0x45fc,0x0                                                                                      
002a6a   f022                                                                                                               
002a6c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a6e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a70   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002a72   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** EOF user.c ***************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *             Microchip USB C18 Firmware -  CDC Version 1.0                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * FileName:        cdc.c                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Rawin Rojvanit       11/19/04    Original. RS-232 Emulation Subset            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #ifdef USB_USE_CDC                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_rx_len;            // total rx length                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_trf_state;         // States are defined cdc.h                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCSrc;            // Dedicated source pointer                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCDst;            // Dedicated destination pointer                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_tx_len;            // total tx length                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_mem_type;          // _ROM, _RAM                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           LINE_CODING line_coding;    // Buffer to store line coding information           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           CONTROL_SIGNAL_BITMAP control_signal_bitmap;                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /*                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE are required          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * requests according to the CDC specification.                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * However, it is not really being used here, therefore a dummy buffer is        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * used for conformance.                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            */                                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #define dummy_length    0x08                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte dummy_encapsulated_cmd_response[dummy_length];                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** C L A S S  S P E C I F I C  R E Q ****************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void USBCheckCDCRequest(void)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        This routine checks the setup data packet to see if it       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  knows how to handle it                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void USBCheckCDCRequest(void)                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request recipient is not an interface then return                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003696   0104     MOVLB     0x4                if(SetupPkt.Recipient != RCPT_INTF) return;                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003698   5120     MOVF      0x20,0x0,0x1                                                                                    
00369a   0b1f     ANDLW     0x1f                                                                                            
00369c   0801     SUBLW     0x1                                                                                             
00369e   e001     BZ        0x36a2                                                                                          
0036a0   d060     BRA       0x3762                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request type is not class-specific then return                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a2   0104     MOVLB     0x4                if(SetupPkt.RequestType != CLASS) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a4   5120     MOVF      0x20,0x0,0x1                                                                                    
0036a6   0b60     ANDLW     0x60                                                                                            
0036a8   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0036aa   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0036ac   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0036ae   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0036b0   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0036b2   0801     SUBLW     0x1                                                                                             
0036b4   e001     BZ        0x36b8                                                                                          
0036b6   d055     BRA       0x3762                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Interface ID must match interface numbers associated with                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * CDC class, else return                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b8   0104     MOVLB     0x4                if((SetupPkt.bIntfID != CDC_COMM_INTF_ID)&&                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ba   5124     MOVF      0x24,0x0,0x1                                                                                    
0036bc   e004     BZ        0x36c6                (SetupPkt.bIntfID != CDC_DATA_INTF_ID)) return;                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036be   0104     MOVLB     0x4                                                                                             
0036c0   0524     DECF      0x24,0x0,0x1                                                                                    
0036c2   e001     BZ        0x36c6                                                                                          
0036c4   d04e     BRA       0x3762                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036c6   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036c8   5121     MOVF      0x21,0x0,0x1                                                                                    
0036ca   0a23     XORLW     0x23                                                                                            
0036cc   e048     BZ        0x375e                                                                                          
0036ce   0a01     XORLW     0x1                                                                                             
0036d0   e040     BZ        0x3752                                                                                          
0036d2   0a03     XORLW     0x3                                                                                             
0036d4   e030     BZ        0x3736                                                                                          
0036d6   0a01     XORLW     0x1                                                                                             
0036d8   e025     BZ        0x3724                                                                                          
0036da   0a24     XORLW     0x24                                                                                            
0036dc   e022     BZ        0x3722                                                                                          
0036de   0a07     XORLW     0x7                                                                                             
0036e0   e01f     BZ        0x3720                                                                                          
0036e2   0a01     XORLW     0x1                                                                                             
0036e4   e01c     BZ        0x371e                                                                                          
0036e6   0a03     XORLW     0x3                                                                                             
0036e8   e011     BZ        0x370c                                                                                          
0036ea   0a01     XORLW     0x1                                                                                             
0036ec   e001     BZ        0x36f0                                                                                          
0036ee   d038     BRA       0x3760                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_ENCAPSULATED_COMMAND:                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f0   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f2   0e03     MOVLW     0x3                                                                                             
0036f4   6fe3     MOVWF     0xe3,0x1                                                                                        
0036f6   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&dummy_encapsulated_cmd_response;                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f8   0ec6     MOVLW     0xc6                                                                                            
0036fa   6fe4     MOVWF     0xe4,0x1                                                                                        
0036fc   0e01     MOVLW     0x1                                                                                             
0036fe   6fe5     MOVWF     0xe5,0x1                                                                                        
003700   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003702   93eb     BCF       0xeb,0x1,0x1                                                                                    
003704   0101     MOVLB     0x1                        LSB(wCount) = dummy_length;                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003706   0e08     MOVLW     0x8                                                                                             
003708   6fe8     MOVWF     0xe8,0x1                                                                                        
00370a   d02b     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_ENCAPSULATED_RESPONSE:                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00370c   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00370e   0e03     MOVLW     0x3                                                                                             
003710   6fe3     MOVWF     0xe3,0x1                                                                                        
                                                       // Populate dummy_encapsulated_cmd_response first.                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003712   0101     MOVLB     0x1                        pDst.bRam = (byte*)&dummy_encapsulated_cmd_response;                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003714   0ec6     MOVLW     0xc6                                                                                            
003716   6fe6     MOVWF     0xe6,0x1                                                                                        
003718   0e01     MOVLW     0x1                                                                                             
00371a   6fe7     MOVWF     0xe7,0x1                                                                                        
00371c   d022     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_COMM_FEATURE:                  // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00371e   d021     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_COMM_FEATURE:                  // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003720   d020     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case CLEAR_COMM_FEATURE:                // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003722   d01f     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_LINE_CODING:                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003724   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003726   0e03     MOVLW     0x3                                                                                             
003728   6fe3     MOVWF     0xe3,0x1                                                                                        
00372a   0101     MOVLB     0x1                        pDst.bRam = (byte*)&line_coding;    // Set destination               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00372c   0ebe     MOVLW     0xbe                                                                                            
00372e   6fe6     MOVWF     0xe6,0x1                                                                                        
003730   0e01     MOVLW     0x1                                                                                             
003732   6fe7     MOVWF     0xe7,0x1                                                                                        
003734   d016     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_LINE_CODING:                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003736   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003738   0e03     MOVLW     0x3                                                                                             
00373a   6fe3     MOVWF     0xe3,0x1                                                                                        
00373c   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&line_coding;    // Set source                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00373e   0ebe     MOVLW     0xbe                                                                                            
003740   6fe4     MOVWF     0xe4,0x1                                                                                        
003742   0e01     MOVLW     0x1                                                                                             
003744   6fe5     MOVWF     0xe5,0x1                                                                                        
003746   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;       // Set memory type               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003748   93eb     BCF       0xeb,0x1,0x1                                                                                    
00374a   0101     MOVLB     0x1                        LSB(wCount) = LINE_CODING_LENGTH;   // Set data count                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00374c   0e07     MOVLW     0x7                                                                                             
00374e   6fe8     MOVWF     0xe8,0x1                                                                                        
003750   d008     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_CONTROL_LINE_STATE:                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003752   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003754   0e03     MOVLW     0x3                                                                                             
003756   6fe3     MOVWF     0xe3,0x1                                                                                        
003758   c422     MOVFF     0x422,0x1c5                control_signal_bitmap._byte = LSB(SetupPkt.W_Value);                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00375a   f1c5                                                                                                               
00375c   d002     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_BREAK:                        // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00375e   d001     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   default:                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003760   d000     BRA       0x3762                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end switch(SetupPkt.bRequest)                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003762   0012     RETURN    0x0            }//end USBCheckCDCRequest                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** U S E R  A P I ***********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCInitEP(void)                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCInitEP initializes CDC endpoints, buffer descriptors,     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  internal state-machine, and variables.                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It should be called after the USB host has sent out a        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  SET_CONFIGURATION request.                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See USBStdSetCfgHandler() in usb9.c for examples.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void CDCInitEP(void)                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               //Abstract line coding information                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003764   0101     MOVLB     0x1                line_coding.dwDTERate._dword = 115200;      // baud rate                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003766   6bbe     CLRF      0xbe,0x1                                                                                        
003768   0ec2     MOVLW     0xc2                                                                                            
00376a   6fbf     MOVWF     0xbf,0x1                                                                                        
00376c   0e01     MOVLW     0x1                                                                                             
00376e   6fc0     MOVWF     0xc0,0x1                                                                                        
003770   6bc1     CLRF      0xc1,0x1                                                                                        
003772   0101     MOVLB     0x1                line_coding.bCharFormat = 0x00;             // 1 stop bit                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003774   6bc2     CLRF      0xc2,0x1                                                                                        
003776   0101     MOVLB     0x1                line_coding.bParityType = 0x00;             // None                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003778   6bc3     CLRF      0xc3,0x1                                                                                        
00377a   0101     MOVLB     0x1                line_coding.bDataBits = 0x08;               // 5,6,7,8, or 16                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00377c   0e08     MOVLW     0x8                                                                                             
00377e   6fc4     MOVWF     0xc4,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003780   0101     MOVLB     0x1                cdc_trf_state = CDC_TX_READY;                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003782   6bb7     CLRF      0xb7,0x1                                                                                        
003784   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003786   6bb6     CLRF      0xb6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003788   0e1a     MOVLW     0x1a               CDC_COMM_UEP = EP_IN|HSHK_EN;               // Enable 1 Comm pipe            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00378a   6e72     MOVWF     0x72,0x0                                                                                        
00378c   0e1e     MOVLW     0x1e               CDC_DATA_UEP = EP_OUT_IN|HSHK_EN;           // Enable 2 data pipes           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00378e   6e73     MOVWF     0x73,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Do not have to init Cnt of IN pipes here.                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Reason:  Number of bytes to send to the host                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          varies from one transaction to                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          another. Cnt should equal the exact                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          number of bytes to transmit for                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          a given IN transaction.                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          This number of bytes will only                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          be known right before the data is                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          sent.                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003790   0104     MOVLB     0x4                CDC_INT_BD_IN.ADR = (byte*)&cdc_notice;     // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003792   0e00     MOVLW     0x0                                                                                             
003794   6f16     MOVWF     0x16,0x1                                                                                        
003796   0e05     MOVLW     0x5                                                                                             
003798   6f17     MOVWF     0x17,0x1                                                                                        
00379a   0104     MOVLB     0x4                CDC_INT_BD_IN.Stat._byte = _UCPU|_DAT1;     // Set status                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00379c   0e40     MOVLW     0x40                                                                                            
00379e   6f14     MOVWF     0x14,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037a0   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);  // Set buffer size               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037a2   0e40     MOVLW     0x40                                                                                            
0037a4   6f19     MOVWF     0x19,0x1                                                                                        
0037a6   0104     MOVLB     0x4                CDC_BULK_BD_OUT.ADR = (byte*)&cdc_data_rx;  // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037a8   0e08     MOVLW     0x8                                                                                             
0037aa   6f1a     MOVWF     0x1a,0x1                                                                                        
0037ac   0e05     MOVLW     0x5                                                                                             
0037ae   6f1b     MOVWF     0x1b,0x1                                                                                        
0037b0   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Stat._byte = _USIE|_DAT0|_DTSEN;// Set status                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037b2   0e88     MOVLW     0x88                                                                                            
0037b4   6f18     MOVWF     0x18,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037b6   0104     MOVLB     0x4                CDC_BULK_BD_IN.ADR = (byte*)&cdc_data_tx;   // Set buffer size               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037b8   0e48     MOVLW     0x48                                                                                            
0037ba   6f1e     MOVWF     0x1e,0x1                                                                                        
0037bc   0e05     MOVLW     0x5                                                                                             
0037be   6f1f     MOVWF     0x1f,0x1                                                                                        
0037c0   0104     MOVLB     0x4                CDC_BULK_BD_IN.Stat._byte = _UCPU|_DAT1;    // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c2   0e40     MOVLW     0x40                                                                                            
0037c4   6f1c     MOVWF     0x1c,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c6   0012     RETURN    0x0            }//end CDCInitEP                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        byte getsUSBUSART(char *buffer,                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                    byte len)                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    Value of input argument 'len' should be smaller than the     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  maximum endpoint size responsible for receiving bulk         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data from USB host for CDC class.                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Input argument 'buffer' should point to a buffer area that   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  is bigger or equal to the size specified by 'len'.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           buffer  : Pointer to where received bytes are to be stored   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  len     : The number of bytes expected.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          The number of bytes copied to buffer.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    Publicly accessible variable cdc_rx_len is updated with      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the number of bytes copied to buffer.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Once getsUSBUSART is called, subsequent retrieval of         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  cdc_rx_len can be done by calling macro mCDCGetRxLength().   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        getsUSBUSART copies a string of bytes received through       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  USB CDC Bulk OUT endpoint to a user's specified location.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It is a non-blocking function. It does not wait              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  for data if there is no data available. Instead it returns   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  '0' to notify the caller that there is no data available.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            If the actual number of bytes received is larger than the    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the expected number     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes specified will be copied to buffer.                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  If the actual number of bytes received is smaller than the   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the actual number       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes received will be copied to buffer.                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c8   cfd9     MOVFF     0xfd9,0xfe6    byte getsUSBUSART(unsigned char *buffer, byte len)                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ca   ffe6                                                                                                               
0037cc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0037ce   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037d0   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037d2   6bb6     CLRF      0xb6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037d4   0104     MOVLB     0x4                if(!mCDCUsartRxIsBusy())                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037d6   bf18     BTFSC     0x18,0x7,0x1                                                                                    
0037d8   d039     BRA       0x384c                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Adjust the expected number of bytes to equal                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * the actual number of bytes received.                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037da   0efc     MOVLW     0xfc                   if(len > CDC_BULK_BD_OUT.Cnt)                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037dc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0037de   f02a                                                                                                               
0037e0   0104     MOVLB     0x4                                                                                             
0037e2   5119     MOVF      0x19,0x0,0x1                                                                                    
0037e4   80d8     BSF       0xd8,0x0,0x0                                                                                    
0037e6   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0037e8   e203     BC        0x37f0                                                                                          
0037ea   0efc     MOVLW     0xfc                       len = CDC_BULK_BD_OUT.Cnt;                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ec   c419     MOVFF     0x419,0xfdb                                                                                     
0037ee   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Copy data from dual-ram buffer to user's buffer                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f0   0101     MOVLB     0x1                    for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f2   6bb6     CLRF      0xb6,0x1                                                                                        
0037f4   0efc     MOVLW     0xfc                                                                                            
0037f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0037f8   0101     MOVLB     0x1                                                                                             
0037fa   5db6     SUBWF     0xb6,0x0,0x1                                                                                    
0037fc   e21c     BC        0x3836                                                                                          
003830   0101     MOVLB     0x1                                                                                             
003832   2bb6     INCF      0xb6,0x1,0x1                                                                                    
003834   d7df     BRA       0x37f4                                                                                          
0037fe   0101     MOVLB     0x1                        buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003800   51b6     MOVF      0xb6,0x0,0x1                                                                                    
003802   6aea     CLRF      0xea,0x0                                                                                        
003804   0f08     ADDLW     0x8                                                                                             
003806   6ee9     MOVWF     0xe9,0x0                                                                                        
003808   0e05     MOVLW     0x5                                                                                             
00380a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00380c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00380e   6ee6     MOVWF     0xe6,0x0                                                                                        
003810   0101     MOVLB     0x1                                                                                             
003812   51b6     MOVF      0xb6,0x0,0x1                                                                                    
003814   6ee7     MOVWF     0xe7,0x0                                                                                        
003816   0efd     MOVLW     0xfd                                                                                            
003818   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00381a   ffe9                                                                                                               
00381c   0efe     MOVLW     0xfe                                                                                            
00381e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003820   ffea                                                                                                               
003822   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003824   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
003826   0e00     MOVLW     0x0                                                                                             
003828   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00382a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00382c   50e7     MOVF      0xe7,0x0,0x0                                                                                    
00382e   6eef     MOVWF     0xef,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Prepare dual-ram buffer for next OUT transaction                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003836   0104     MOVLB     0x4                    CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003838   0e40     MOVLW     0x40                                                                                            
00383a   6f19     MOVWF     0x19,0x1                                                                                        
00383c   0e40     MOVLW     0x40                   mUSBBufferReady(CDC_BULK_BD_OUT);                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00383e   0104     MOVLB     0x4                                                                                             
003840   1718     ANDWF     0x18,0x1,0x1                                                                                    
003842   0104     MOVLB     0x4                                                                                             
003844   7d18     BTG       0x18,0x6,0x1                                                                                    
003846   0e88     MOVLW     0x88                                                                                            
003848   0104     MOVLB     0x4                                                                                             
00384a   1318     IORWF     0x18,0x1,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00384c   0101     MOVLB     0x1                return cdc_rx_len;                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00384e   51b6     MOVF      0xb6,0x0,0x1                                                                                    
003850   d000     BRA       0x3852                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003852   52e5     MOVF      0xe5,0x1,0x0   }//end getsUSBUSART                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003854   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003856   ffd9                                                                                                               
003858   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putsUSBUSART(char *data)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putsUSBUSART writes a string of data to the USB including    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'puts', to transfer    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data located in data memory.                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00385a   cfd9     MOVFF     0xfd9,0xfe6    void putsUSBUSART(unsigned char *data)                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00385c   ffe6                                                                                                               
00385e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003860   ffd9                                                                                                               
003862   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()==1           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(!mUSBUSARTIsTxTrfReady())                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003864   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003866   51b7     MOVF      0xb7,0x0,0x1                                                                                    
003868   e001     BZ        0x386c                                                                                          
00386a   d031     BRA       0x38ce                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00386c   6adf     CLRF      0xdf,0x0           len = 0;                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00386e   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003870   50df     MOVF      0xdf,0x0,0x0           if(len == 256) break;       // Break loop once max len is reached.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003872   6e2a     MOVWF     0x2a,0x0                                                                                        
003874   6a2b     CLRF      0x2b,0x0                                                                                        
003876   502a     MOVF      0x2a,0x0,0x0                                                                                    
003878   e102     BNZ       0x387e                                                                                          
00387a   0e01     MOVLW     0x1                                                                                             
00387c   182b     XORWF     0x2b,0x0,0x0                                                                                    
00387e   e101     BNZ       0x3882                                                                                          
003880   d00b     BRA       0x3898                                                                                          
003882   0efd     MOVLW     0xfd               }while(*data++);                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003884   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003886   ffe9                                                                                                               
003888   2adb     INCF      0xdb,0x1,0x0                                                                                    
00388a   0efe     MOVLW     0xfe                                                                                            
00388c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00388e   ffea                                                                                                               
003890   e301     BNC       0x3894                                                                                          
003892   2adb     INCF      0xdb,0x1,0x0                                                                                    
003894   50ef     MOVF      0xef,0x0,0x0                                                                                    
003896   e1eb     BNZ       0x386e                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003898   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00389a   6e2a     MOVWF     0x2a,0x0                                                                                        
00389c   6a2b     CLRF      0x2b,0x0                                                                                        
00389e   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0038a0   0ffd     ADDLW     0xfd                                                                                            
0038a2   6ee9     MOVWF     0xe9,0x0                                                                                        
0038a4   0eff     MOVLW     0xff                                                                                            
0038a6   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0038a8   6eea     MOVWF     0xea,0x0                                                                                        
0038aa   502a     MOVF      0x2a,0x0,0x0                                                                                    
0038ac   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0038ae   502b     MOVF      0x2b,0x0,0x0                                                                                    
0038b0   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038b2   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRam to setup the transfer.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038b4   0efd     MOVLW     0xfd               mUSBUSARTTxRam((byte*)data,len);     // See cdc.h                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038b6   cfdb     MOVFF     0xfdb,0x1b8                                                                                     
0038b8   f1b8                                                                                                               
0038ba   0efe     MOVLW     0xfe                                                                                            
0038bc   cfdb     MOVFF     0xfdb,0x1b9                                                                                     
0038be   f1b9                                                                                                               
0038c0   cfdf     MOVFF     0xfdf,0x1bc                                                                                     
0038c2   f1bc                                                                                                               
0038c4   0101     MOVLB     0x1                                                                                             
0038c6   6bbd     CLRF      0xbd,0x1                                                                                        
0038c8   0101     MOVLB     0x1                                                                                             
0038ca   0e01     MOVLW     0x1                                                                                             
0038cc   6fb7     MOVWF     0xb7,0x1                                                                                        
0038ce   52e5     MOVF      0xe5,0x1,0x0   }//end putsUSBUSART                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038d0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0038d2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0038d4   ffd9                                                                                                               
0038d6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putrsUSBUSART(const rom char *data)                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putrsUSBUSART writes a string of data to the USB including   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'putrs', to transfer   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data literals and data located in program memory.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038d8   cfd9     MOVFF     0xfd9,0xfe6    void putrsUSBUSART(const rom unsigned char *data)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038da   ffe6                                                                                                               
0038dc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038de   ffd9                                                                                                               
0038e0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(cdc_trf_state != CDC_TX_READY)                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038e2   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038e4   51b7     MOVF      0xb7,0x0,0x1                                                                                    
0038e6   e001     BZ        0x38ea                                                                                          
0038e8   d033     BRA       0x3950                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ea   6adf     CLRF      0xdf,0x0           len = 0;                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ec   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ee   50df     MOVF      0xdf,0x0,0x0           if(len == 255) break;       // Break loop once max len is reached.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038f0   6e2a     MOVWF     0x2a,0x0                                                                                        
0038f2   6a2b     CLRF      0x2b,0x0                                                                                        
0038f4   0eff     MOVLW     0xff                                                                                            
0038f6   182a     XORWF     0x2a,0x0,0x0                                                                                    
0038f8   e101     BNZ       0x38fc                                                                                          
0038fa   502b     MOVF      0x2b,0x0,0x0                                                                                    
0038fc   e101     BNZ       0x3900                                                                                          
0038fe   d00c     BRA       0x3918                                                                                          
003900   0efd     MOVLW     0xfd               }while(*data++);                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003902   cfdb     MOVFF     0xfdb,0xff6                                                                                     
003904   fff6                                                                                                               
003906   2adb     INCF      0xdb,0x1,0x0                                                                                    
003908   0efe     MOVLW     0xfe                                                                                            
00390a   cfdb     MOVFF     0xfdb,0xff7                                                                                     
00390c   fff7                                                                                                               
00390e   e301     BNC       0x3912                                                                                          
003910   2adb     INCF      0xdb,0x1,0x0                                                                                    
003912   0008     TBLRD                                                                                                     
003914   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003916   e1ea     BNZ       0x38ec                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003918   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00391a   6e2a     MOVWF     0x2a,0x0                                                                                        
00391c   6a2b     CLRF      0x2b,0x0                                                                                        
00391e   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003920   0ffd     ADDLW     0xfd                                                                                            
003922   6ee9     MOVWF     0xe9,0x0                                                                                        
003924   0eff     MOVLW     0xff                                                                                            
003926   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003928   6eea     MOVWF     0xea,0x0                                                                                        
00392a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00392c   5eee     SUBWF     0xee,0x1,0x0                                                                                    
00392e   502b     MOVF      0x2b,0x0,0x0                                                                                    
003930   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003932   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRom to setup the transfer.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * (BPS 5/16/2006) Don't add the zero byte at the end. Send len-1            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * bytes intead of len bytes.                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003934   0efd     MOVLW     0xfd               mUSBUSARTTxRom((rom byte*)data,len); // See cdc.h                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003936   cfdb     MOVFF     0xfdb,0x1b8                                                                                     
003938   f1b8                                                                                                               
00393a   0efe     MOVLW     0xfe                                                                                            
00393c   cfdb     MOVFF     0xfdb,0x1b9                                                                                     
00393e   f1b9                                                                                                               
003940   cfdf     MOVFF     0xfdf,0x1bc                                                                                     
003942   f1bc                                                                                                               
003944   0101     MOVLB     0x1                                                                                             
003946   0e01     MOVLW     0x1                                                                                             
003948   6fbd     MOVWF     0xbd,0x1                                                                                        
00394a   0101     MOVLB     0x1                                                                                             
00394c   0e01     MOVLW     0x1                                                                                             
00394e   6fb7     MOVWF     0xb7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003950   52e5     MOVF      0xe5,0x1,0x0   }//end putrsUSBUSART                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003952   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003954   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003956   ffd9                                                                                                               
003958   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCTxService(void)                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCTxService handles device-to-host transaction(s).          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  This function should be called once per Main Program loop.   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00395a   cfd9     MOVFF     0xfd9,0xfe6    void CDCTxService(void)                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00395c   ffe6                                                                                                               
00395e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003960   ffd9                                                                                                               
003962   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte byte_to_send;                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003964   0104     MOVLB     0x4                if(mCDCUsartTxIsBusy()) return;                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003966   bf1c     BTFSC     0x1c,0x7,0x1                                                                                    
003968   d07d     BRA       0x3a64                                                                                          
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Completing stage is necessary while [ mCDCUSartTxIsBusy()==1 ].           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * By having this stage, user can always check cdc_trf_state,                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * and not having to call mCDCUsartTxIsBusy() directly.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00396a   0e03     MOVLW     0x3                if(cdc_trf_state == CDC_TX_COMPLETING)                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00396c   0101     MOVLB     0x1                                                                                             
00396e   5db7     SUBWF     0xb7,0x0,0x1                                                                                    
003970   e102     BNZ       0x3976                                                                                          
003972   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_READY;                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003974   6bb7     CLRF      0xb7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_READY state, nothing to do, just return.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003976   0101     MOVLB     0x1                if(cdc_trf_state == CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003978   51b7     MOVF      0xb7,0x0,0x1                                                                                    
00397a   e101     BNZ       0x397e                                                                                          
00397c   d073     BRA       0x3a64                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_BUSY_ZLP state, send zero length packet                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00397e   0e02     MOVLW     0x2                if(cdc_trf_state == CDC_TX_BUSY_ZLP)                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003980   0101     MOVLB     0x1                                                                                             
003982   5db7     SUBWF     0xb7,0x0,0x1                                                                                    
003984   e106     BNZ       0x3992                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003986   0104     MOVLB     0x4                    CDC_BULK_BD_IN.Cnt = 0;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003988   6b1d     CLRF      0x1d,0x1                                                                                        
00398a   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_COMPLETING;                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00398c   0e03     MOVLW     0x3                                                                                             
00398e   6fb7     MOVWF     0xb7,0x1                                                                                        
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003990   d061     BRA       0x3a54             else if(cdc_trf_state == CDC_TX_BUSY)                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003992   0101     MOVLB     0x1                                                                                             
003994   05b7     DECF      0xb7,0x0,0x1                                                                                    
003996   e15e     BNZ       0x3a54                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * First, have to figure out how many byte of data to send.              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003998   0e40     MOVLW     0x40               	if(cdc_tx_len > sizeof(cdc_data_tx))                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00399a   6e2a     MOVWF     0x2a,0x0                                                                                        
00399c   6a2b     CLRF      0x2b,0x0                                                                                        
00399e   0101     MOVLB     0x1                                                                                             
0039a0   51bc     MOVF      0xbc,0x0,0x1                                                                                    
0039a2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0039a4   0e00     MOVLW     0x0                                                                                             
0039a6   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0039a8   e203     BC        0x39b0                                                                                          
0039aa   0e40     MOVLW     0x40               	    byte_to_send = sizeof(cdc_data_tx);                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039ac   6edf     MOVWF     0xdf,0x0                                                                                        
0039ae   d002     BRA       0x39b4             	else                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b0   c1bc     MOVFF     0x1bc,0xfdf        	    byte_to_send = cdc_tx_len;                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b2   ffdf                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Next, load the number of bytes to send to Cnt in buffer descriptor    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b4   cfdf     MOVFF     0xfdf,0x41d            CDC_BULK_BD_IN.Cnt = byte_to_send;                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b6   f41d                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Subtract the number of bytes just about to be sent from the total.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b8   50df     MOVF      0xdf,0x0,0x0       	cdc_tx_len = cdc_tx_len - byte_to_send;                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039ba   0101     MOVLB     0x1                                                                                             
0039bc   5dbc     SUBWF     0xbc,0x0,0x1                                                                                    
0039be   0101     MOVLB     0x1                                                                                             
0039c0   6fbc     MOVWF     0xbc,0x1                                                                                        
                                               	                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c2   0101     MOVLB     0x1                    pCDCDst.bRam = (byte*)&cdc_data_tx; // Set destination pointer           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c4   0e48     MOVLW     0x48                                                                                            
0039c6   6fba     MOVWF     0xba,0x1                                                                                        
0039c8   0e05     MOVLW     0x5                                                                                             
0039ca   6fbb     MOVWF     0xbb,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039cc   0101     MOVLB     0x1                    if(cdc_mem_type == _ROM)            // Determine type of memory source   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039ce   05bd     DECF      0xbd,0x0,0x1                                                                                    
0039d0   e118     BNZ       0x3a02                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039d2   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039d4   e015     BZ        0x3a00                                                                                          
0039fe   d7e9     BRA       0x39d2                                                                                          
                                                       {                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039d6   c1b8     MOVFF     0x1b8,0xff6                    *pCDCDst.bRam = *pCDCSrc.bRom;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039d8   fff6                                                                                                               
0039da   c1b9     MOVFF     0x1b9,0xff7                                                                                     
0039dc   fff7                                                                                                               
0039de   0008     TBLRD                                                                                                     
0039e0   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0039e2   c1ba     MOVFF     0x1ba,0xfe9                                                                                     
0039e4   ffe9                                                                                                               
0039e6   c1bb     MOVFF     0x1bb,0xfea                                                                                     
0039e8   ffea                                                                                                               
0039ea   6eef     MOVWF     0xef,0x0                                                                                        
0039ec   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039ee   2bba     INCF      0xba,0x1,0x1                                                                                    
0039f0   0e00     MOVLW     0x0                                                                                             
0039f2   23bb     ADDWFC    0xbb,0x1,0x1                                                                                    
0039f4   0101     MOVLB     0x1                            pCDCSrc.bRom++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039f6   2bb8     INCF      0xb8,0x1,0x1                                                                                    
0039f8   0e00     MOVLW     0x0                                                                                             
0039fa   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
0039fc   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send)                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a00   d016     BRA       0x3a2e                 else // _RAM                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a02   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a04   e014     BZ        0x3a2e                                                                                          
003a2c   d7ea     BRA       0x3a02                                                                                          
                                                       {                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a06   c1b8     MOVFF     0x1b8,0xfe9                    *pCDCDst.bRam = *pCDCSrc.bRam;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a08   ffe9                                                                                                               
003a0a   c1b9     MOVFF     0x1b9,0xfea                                                                                     
003a0c   ffea                                                                                                               
003a0e   50ef     MOVF      0xef,0x0,0x0                                                                                    
003a10   c1ba     MOVFF     0x1ba,0xfe9                                                                                     
003a12   ffe9                                                                                                               
003a14   c1bb     MOVFF     0x1bb,0xfea                                                                                     
003a16   ffea                                                                                                               
003a18   6eef     MOVWF     0xef,0x0                                                                                        
003a1a   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a1c   2bba     INCF      0xba,0x1,0x1                                                                                    
003a1e   0e00     MOVLW     0x0                                                                                             
003a20   23bb     ADDWFC    0xbb,0x1,0x1                                                                                    
003a22   0101     MOVLB     0x1                            pCDCSrc.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a24   2bb8     INCF      0xb8,0x1,0x1                                                                                    
003a26   0e00     MOVLW     0x0                                                                                             
003a28   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
003a2a   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send._word)                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }//end if(cdc_mem_type...)                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Lastly, determine if a zero length packet state is necessary.         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * See explanation in USB Specification 2.0: Section 5.8.3               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a2e   0101     MOVLB     0x1                    if(cdc_tx_len == 0)                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a30   51bc     MOVF      0xbc,0x0,0x1                                                                                    
003a32   e110     BNZ       0x3a54                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a34   0104     MOVLB     0x4                        if(CDC_BULK_BD_IN.Cnt == sizeof(cdc_data_tx))                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a36   511d     MOVF      0x1d,0x0,0x1                                                                                    
003a38   6e2a     MOVWF     0x2a,0x0                                                                                        
003a3a   6a2b     CLRF      0x2b,0x0                                                                                        
003a3c   0e40     MOVLW     0x40                                                                                            
003a3e   182a     XORWF     0x2a,0x0,0x0                                                                                    
003a40   e101     BNZ       0x3a44                                                                                          
003a42   502b     MOVF      0x2b,0x0,0x0                                                                                    
003a44   e104     BNZ       0x3a4e                                                                                          
003a46   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_BUSY_ZLP;                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a48   0e02     MOVLW     0x2                                                                                             
003a4a   6fb7     MOVWF     0xb7,0x1                                                                                        
003a4c   d003     BRA       0x3a54                     else                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a4e   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_COMPLETING;                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a50   0e03     MOVLW     0x3                                                                                             
003a52   6fb7     MOVWF     0xb7,0x1                                                                                        
                                                   }//end if(cdc_tx_len...)                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end if(cdc_tx_sate == CDC_TX_BUSY)                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Both CDC_TX_BUSY and CDC_TX_BUSY_ZLP states use the following macro       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a54   0e40     MOVLW     0x40               mUSBBufferReady(CDC_BULK_BD_IN);                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a56   0104     MOVLB     0x4                                                                                             
003a58   171c     ANDWF     0x1c,0x1,0x1                                                                                    
003a5a   0104     MOVLB     0x4                                                                                             
003a5c   7d1c     BTG       0x1c,0x6,0x1                                                                                    
003a5e   0e88     MOVLW     0x88                                                                                            
003a60   0104     MOVLB     0x4                                                                                             
003a62   131c     IORWF     0x1c,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a64   52e5     MOVF      0xe5,0x1,0x0   }//end CDCTxService                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003a66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003a68   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003a6a   ffd9                                                                                                               
003a6c   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #endif //USB_USE_CDC                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** EOF cdc.c ****************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   LIST P=18F4550                                                           C:\MCC18\SRC\TRADIT~1\PROC\p18f4550.asm
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\PROC\p18f4550.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\PROC\p18f4550.asm
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Function Name: Delay10TCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Description:   This routine delays for multiples of 10          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 10 Tcy.       *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  A value of 1 to 255 provides 10 to 2550   Tcy    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  delay.  A value of 0 will provide a delay of     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  2560 Tcy.                                        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10TCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           Delay10TCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00492c   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00492e   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004930   4ee8     DCFSNZ    0xe8,0x1,0x0       dcfsnz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004932   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10x                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004934   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004936   d000     BRA       0x4938             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004938   d000     BRA       0x493a             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00493a   d000     BRA       0x493c             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00493c   2ee8     DECFSZ    0xe8,0x1,0x0       decfsz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00493e   d7fa     BRA       0x4934             bra     D10x                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004940   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               GLOBAL  Delay10TCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;	RCS Header $Id: fxm2424u.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       24x24 Bit Unsigned Fixed Point Multiply 24 x 24 -> 48                    C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Input:  24 bit unsigned fixed point multiplicand in AARGB0, AARGB1,      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               24 bit unsigned fixed point multiplier in BARGB0, BARGB1,        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               BARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Use:    CALL    FXM2424U                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Output: 48 bit unsigned fixed point product in AARGB0, AARGB1,           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2, AARGB3, AARGB4, AARGB5                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Max Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Min Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       PM: 64              DM: 12                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           FXM2424U                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		GLOBAL	FXM2424U                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a4   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a6   f029                                                                                                               
0043a8   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043aa   f028                                                                                                               
0043ac   c01d     MOVFF     0x1d,0x27      		MOVFF	__AARGB2,__TEMPB2	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ae   f027                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b0   501d     MOVF      0x1d,0x0,0x0   		MOVF	__AARGB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b2   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b4   cff4     MOVFF     0xff4,0x1b     		MOVFF	PRODH,__AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b6   f01b                                                                                                               
0043b8   cff3     MOVFF     0xff3,0x1a     		MOVFF	PRODL,__AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ba   f01a                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043bc   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043be   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c0   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c2   f01d                                                                                                               
0043c4   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c6   f01c                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c8   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ca   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043cc   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ce   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043d0   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043d2   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043d4   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043d6   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043d8   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043da   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043dc   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043de   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043e0   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043e2   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043e4   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043e6   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043e8   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ea   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ec   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ee   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043f0   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043f2   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043f4   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043f6   6a1e     CLRF      0x1e,0x0       		CLRF	__AARGB1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043f8   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043fa   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043fc   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043fe   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004400   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004402   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004404   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004406   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004408   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00440a   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00440c   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00440e   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004410   6a1f     CLRF      0x1f,0x0       		CLRF	__AARGB0                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004412   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004414   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004416   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004418   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00441a   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00441c   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00441e   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004420   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004422   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004424   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004426   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004428   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00442a   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00442c   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00442e   261e     ADDWF     0x1e,0x1,0x0   		ADDWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004430   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004432   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004434   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.5 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGSbits                                                                    C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGS		RES 1       ; floating point library exception flags                  C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   GLOBAL  SIGN, __FPFLAGS, __FPFLAGSbits                                   C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;	RCS Header $Id: aarg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB3                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB7		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB2                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB6		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB1                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB5		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB0                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB4		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB0		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AEXP		RES 1       ; 8 bit biased exponent for argument A                       C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   GLOBAL  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;	RCS Header $Id: barg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB0		RES 1       ; most significant byte of argument B                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BEXP		RES 1       ; 8 bit biased exponent for argument B                       C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;	RCS Header $Id: temparg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMP                                                                           C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB0		RES 1       ; temporary storage                                        C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   GLOBAL  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              of characters output. */                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045fc   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045fe   ffe6                                                                                                               
004600   cfda     MOVFF     0xfda,0xfe6                                                                                     
004602   ffe6                                                                                                               
004604   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004606   ffd9                                                                                                               
004608   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00460a   ffda                                                                                                               
00460c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
00460e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
004610   52e6     MOVF      0xe6,0x1,0x0                                                                                    
004612   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             va_list ap;                                                                    C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             int n;                                                                         C:\MCC18\src\TRADIT~1\stdclib\printf.c
004614   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
004616   0ffb     ADDLW     0xfb                                                                                            
004618   6e2a     MOVWF     0x2a,0x0                                                                                        
00461a   0eff     MOVLW     0xff                                                                                            
00461c   20da     ADDWFC    0xda,0x0,0x0                                                                                    
00461e   6e2b     MOVWF     0x2b,0x0                                                                                        
004620   c02a     MOVFF     0x2a,0xfde                                                                                      
004622   ffde                                                                                                               
004624   6edd     MOVWF     0xdd,0x0                                                                                        
004626   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004628   ffe6                                                                                                               
00462a   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
00462c   ffe6                                                                                                               
00462e   0efb     MOVLW     0xfb                                                                                            
004630   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004632   ffe6                                                                                                               
004634   0efc     MOVLW     0xfc                                                                                            
004636   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004638   ffe6                                                                                                               
00463a   0efd     MOVLW     0xfd                                                                                            
00463c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00463e   ffe6                                                                                                               
004640   c1f0     MOVFF     0x1f0,0xfe6                                                                                     
004642   ffe6                                                                                                               
004644   c1f1     MOVFF     0x1f1,0xfe6                                                                                     
004646   ffe6                                                                                                               
004648   ec50     CALL      0x2aa0,0x0                                                                                      
00464a   f015                                                                                                               
00464c   6e2a     MOVWF     0x2a,0x0                                                                                        
00464e   0e07     MOVLW     0x7                                                                                             
004650   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004652   e202     BC        0x4658                                                                                          
004654   6ae1     CLRF      0xe1,0x0                                                                                        
004656   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004658   6ee1     MOVWF     0xe1,0x0                                                                                        
00465a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00465c   0e02     MOVLW     0x2                                                                                             
00465e   cff3     MOVFF     0xff3,0xfdb                                                                                     
004660   ffdb                                                                                                               
004662   0e03     MOVLW     0x3                                                                                             
004664   cff4     MOVFF     0xff4,0xfdb                                                                                     
004666   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\MCC18\src\TRADIT~1\stdclib\printf.c
004668   0e02     MOVLW     0x2              return n;                                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
00466a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00466c   f02a                                                                                                               
00466e   0e03     MOVLW     0x3                                                                                             
004670   cfdb     MOVFF     0xfdb,0x2b                                                                                      
004672   f02b                                                                                                               
004674   c02a     MOVFF     0x2a,0xff3                                                                                      
004676   fff3                                                                                                               
004678   c02b     MOVFF     0x2b,0xff4                                                                                      
00467a   fff4                                                                                                               
00467c   0e04     MOVLW     0x4            }                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
00467e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004680   e202     BC        0x4686                                                                                          
004682   6ae1     CLRF      0xe1,0x0                                                                                        
004684   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004686   6ee1     MOVWF     0xe1,0x0                                                                                        
004688   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00468a   cfe5     MOVFF     0xfe5,0xfda                                                                                     
00468c   ffda                                                                                                               
00468e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004690   ffd9                                                                                                               
004692   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; @name toupper                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;The {\bf toupper} function converts a lower case character to the               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;corresponding upper case character.                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;@return If {\bf islower} is true for the value of {\bf c}, the corresponding    C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;upper case equivalent is returned, else the value of {\bf c} is returned        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;unchanged.                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; int toupper (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           toupper                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             global toupper                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c') after checking upper byte for 0       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047ee   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047f0   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0047f2   6ee9     MOVWF     0xe9,0x0                                                                                        
0047f4   0eff     MOVLW     0xff                                                                                            
0047f6   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
0047f8   6eea     MOVWF     0xea,0x0                                                                                        
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Copy 'c' into target location                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047fa   cfed     MOVFF     0xfed,0xff4    	  movff POSTDEC0, PRODH                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047fc   fff4                                                                                                               
0047fe   cfef     MOVFF     0xfef,0xff3    	  movff INDF0, PRODL                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004800   fff3                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004802   66f4     TSTFSZ    0xf4,0x0                 tstfsz    PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004804   d007     BRA       0x4814                   bra       jNoMatch            ; upper byte must be 0                   C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Test for lower case condition                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004806   0e60     MOVLW     0x60                     jmpFleL   PRODL,ACCESS,'a'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004808   64f3     CPFSGT    0xf3,0x0                                                                                        
00480a   d004     BRA       0x4814                                                                                          
00480c   0e7b     MOVLW     0x7b                     jmpFgeL   PRODL,ACCESS,'z'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00480e   60f3     CPFSLT    0xf3,0x0                                                                                        
004810   d001     BRA       0x4814                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Convert char from lower to upper by clearing bit 5                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004812   9af3     BCF       0xf3,0x5,0x0             bcf       PRODL,5,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004814   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a74   ec76     CALL      0x34ec,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a76   f01a                                                                                                               
0034ec   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0034ee   ffe6                                                                                                               
0034f0   cfda     MOVFF     0xfda,0xfe6                                                                                     
0034f2   ffe6                                                                                                               
0034f4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0034f6   ffd9                                                                                                               
0034f8   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0034fa   ffda                                                                                                               
0034fc   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a78   0efb     MOVLW     0xfb             while (n--)                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a7a   cfdb     MOVFF     0xfdb,0xff3                                                                                     
002a7c   fff3                                                                                                               
002a7e   06db     DECF      0xdb,0x1,0x0                                                                                    
002a80   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002a82   0900     IORLW     0x0                                                                                             
002a84   e00a     BZ        0x2a9a                                                                                          
002a86   ecc4     CALL      0x3588,0x0         if (putc (c, handle) == EOF)                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a88   f01a                                                                                                               
002a8a   0efa     MOVLW     0xfa                                                                                            
002a8c   ec2f     CALL      0x365e,0x0                                                                                      
002a8e   f01b                                                                                                               
002a90   e1f3     BNZ       0x2a78                                                                                          
002a92   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002a94   e1f1     BNZ       0x2a78                                                                                          
002a96   0e01     MOVLW     0x1                  return 1;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a98   d001     BRA       0x2a9c                                                                                          
002a9a   0e00     MOVLW     0x0              return 0;                                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a9c   efa5     GOTO      0x354a         }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a9e   f01a                                                                                                               
00354a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00354c   cfe5     MOVFF     0xfe5,0xfda                                                                                     
00354e   ffda                                                                                                               
003550   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003552   ffd9                                                                                                               
003554   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa0   ec76     CALL      0x34ec,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa2   f01a                                                                                                               
002aa4   0e3b     MOVLW     0x3b                                                                                            
002aa6   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
002aa8   e302     BNC       0x2aae                                                                                          
002aaa   68e1     SETF      0xe1,0x0                                                                                        
002aac   52e6     MOVF      0xe6,0x1,0x0                                                                                    
002aae   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab0   0e01     MOVLW     0x1              int count = 0;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab2   6adb     CLRF      0xdb,0x0                                                                                        
002ab4   0e02     MOVLW     0x2                                                                                             
002ab6   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab8   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aba   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002abc   fff6                                                                                                               
002abe   0efa     MOVLW     0xfa                                                                                            
002ac0   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002ac2   fff7                                                                                                               
002ac4   0efb     MOVLW     0xfb                                                                                            
002ac6   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002ac8   fff8                                                                                                               
002aca   0008     TBLRD                                                                                                     
002acc   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002ace   6edf     MOVWF     0xdf,0x0                                                                                        
002ad0   50df     MOVF      0xdf,0x0,0x0                                                                                    
002ad2   e102     BNZ       0x2ad8                                                                                          
002ad4   efc9     GOTO      0x3392                                                                                          
002ad6   f019                                                                                                               
00338c   d979     RCALL     0x3680                                                                                          
00338e   ef65     GOTO      0x2aca                                                                                          
003390   f015                                                                                                               
003680   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003682   0ff9     ADDLW     0xf9                                                                                            
003684   6ee9     MOVWF     0xe9,0x0                                                                                        
003686   0eff     MOVLW     0xff                                                                                            
003688   efd9     GOTO      0x35b2                                                                                          
00368a   f01a                                                                                                               
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad8   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ada   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002adc   e002     BZ        0x2ae2                                                                                          
002ade   efbc     GOTO      0x3378                                                                                          
002ae0   f019                                                                                                               
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae2   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae4   6adb     CLRF      0xdb,0x0                                                                                        
002ae6   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae8   6adb     CLRF      0xdb,0x0                                                                                        
002aea   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aec   6adb     CLRF      0xdb,0x0                                                                                        
002aee   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af0   6adb     CLRF      0xdb,0x0                                                                                        
002af2   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af4   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     int n;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af6   ecde     CALL      0x33bc,0x0               c = *++f;                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af8   f019                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specified.)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002afa   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002afc   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002afe   e00c     BZ        0x2b18                                                                                          
002b00   0e2b     MOVLW     0x2b                                                                                            
002b02   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b04   e009     BZ        0x2b18                                                                                          
002b06   0e20     MOVLW     0x20                                                                                            
002b08   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b0a   e006     BZ        0x2b18                                                                                          
002b0c   0e23     MOVLW     0x23                                                                                            
002b4a   d7d5     BRA       0x2af6                                                                                          
002b0e   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b10   e003     BZ        0x2b18                                                                                          
002b12   0e30     MOVLW     0x30                                                                                            
002b14   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b16   e11a     BNZ       0x2b4c                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b18   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b1a   0a30     XORLW     0x30                                                                                            
002b1c   e014     BZ        0x2b46                                                                                          
002b1e   0a13     XORLW     0x13                                                                                            
002b20   e00f     BZ        0x2b40                                                                                          
002b22   0a03     XORLW     0x3                                                                                             
002b24   e00a     BZ        0x2b3a                                                                                          
002b26   0a0b     XORLW     0xb                                                                                             
002b28   e005     BZ        0x2b34                                                                                          
002b2a   0a06     XORLW     0x6                                                                                             
002b2c   e1e4     BNZ       0x2af6                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '-':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b2e   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b30   80db     BSF       0xdb,0x0,0x0                                                                                    
002b32   d7e1     BRA       0x2af6                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '+':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b34   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b36   82db     BSF       0xdb,0x1,0x0                                                                                    
002b38   d7de     BRA       0x2af6                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b3a   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b3c   84db     BSF       0xdb,0x2,0x0                                                                                    
002b3e   d7db     BRA       0x2af6                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '#':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b40   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b42   86db     BSF       0xdb,0x3,0x0                                                                                    
002b44   d7d8     BRA       0x2af6                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '0':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b46   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b48   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b4c   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b4e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b50   e11b     BNZ       0x2b88                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b52   ecda     CALL      0x33b4,0x0                   n = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b54   f019                                                                                                               
002b56   ec28     CALL      0x3450,0x0                                                                                      
002b58   f01a                                                                                                               
003450   0e13     MOVLW     0x13                                                                                            
003452   cfee     MOVFF     0xfee,0xfdb                                                                                     
003454   ffdb                                                                                                               
003456   0e14     MOVLW     0x14                                                                                            
003458   cfed     MOVFF     0xfed,0xfdb                                                                                     
00345a   ffdb                                                                                                               
002b5a   e010     BZ        0x2b7c                       if (n < 0)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00345c   0e13     MOVLW     0x13                                                                                            
00345e   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003460   f02a                                                                                                               
003462   0e14     MOVLW     0x14                                                                                            
003464   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003466   f02b                                                                                                               
003468   0100     MOVLB     0x0                                                                                             
00346a   0e80     MOVLW     0x80                                                                                            
00346c   142b     ANDWF     0x2b,0x0,0x0                                                                                    
00346e   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5c   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5e   80db     BSF       0xdb,0x0,0x0                                                                                    
002b60   681e     SETF      0x1e,0x0                         width = -n;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b62   681f     SETF      0x1f,0x0                                                                                        
002b64   0e13     MOVLW     0x13                                                                                            
002b66   cfdb     MOVFF     0xfdb,0x23                                                                                      
002b68   f023                                                                                                               
002b6a   0e14     MOVLW     0x14                                                                                            
002b6c   cfdb     MOVFF     0xfdb,0x24                                                                                      
002b6e   f024                                                                                                               
002b70   ec1b     CALL      0x4436,0x0                                                                                      
002b72   f022                                                                                                               
002b74   0e04     MOVLW     0x4                                                                                             
002b76   c01c     MOVFF     0x1c,0xfdb                                                                                      
002b78   ffdb                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7a   d003     BRA       0x2b82                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7c   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7e   ec11     CALL      0x3422,0x0                                                                                      
002b80   f01a                                                                                                               
002b82   ecde     CALL      0x33bc,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b84   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b86   d00b     BRA       0x2b9e                   else                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b88   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b8a   6adb     CLRF      0xdb,0x0                                                                                        
002b8c   ec7f     CALL      0x34fe,0x0                   while ((unsigned char) isdigit (c))                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b8e   f01a                                                                                                               
002b90   e003     BZ        0x2b98                                                                                          
002b96   d7fa     BRA       0x2b8c                                                                                          
0034fe   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
003500   ffe6                                                                                                               
003502   6ae6     CLRF      0xe6,0x0                                                                                        
003504   ec0b     CALL      0x4816,0x0                                                                                      
003506   f024                                                                                                               
003508   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00350a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00350c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00350e   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b92   ecf3     CALL      0x35e6,0x0                       cval = cval * 10 + c - '0';                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b94   f01a                                                                                                               
0035e6   0e09     MOVLW     0x9                                                                                             
0035e8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035ea   0d0a     MULLW     0xa                                                                                             
0035ec   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0035ee   24df     ADDWF     0xdf,0x0,0x0                                                                                    
0035f0   0fd0     ADDLW     0xd0                                                                                            
0035f2   6ee7     MOVWF     0xe7,0x0                                                                                        
0035f4   0e09     MOVLW     0x9                                                                                             
0035f6   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0035f8   ffdb                                                                                                               
0035fa   efde     GOTO      0x33bc                           c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0035fc   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b98   0e09     MOVLW     0x9                          width = cval;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b9a   ec11     CALL      0x3422,0x0                                                                                      
002b9c   f01a                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b9e   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba0   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002ba2   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba4   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ba8   e11b     BNZ       0x2be0                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002baa   ecde     CALL      0x33bc,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bac   f019                                                                                                               
002bae   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bb2   e10b     BNZ       0x2bca                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb4   ecda     CALL      0x33b4,0x0                       n = va_arg (ap, int);                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb6   f019                                                                                                               
002bb8   ec28     CALL      0x3450,0x0                                                                                      
002bba   f01a                                                                                                               
0033b4   d929     RCALL     0x3608                                                                                          
0033b6   0e02     MOVLW     0x2                                                                                             
0033b8   efcb     GOTO      0x3596                                                                                          
0033ba   f01a                                                                                                               
003596   5e2a     SUBWF     0x2a,0x1,0x0                                                                                    
003598   0e00     MOVLW     0x0                                                                                             
00359a   5a2b     SUBWFB    0x2b,0x1,0x0                                                                                    
00359c   0ef7     MOVLW     0xf7                                                                                            
00359e   c02a     MOVFF     0x2a,0xfdb                                                                                      
0035a0   ffdb                                                                                                               
0035a2   0ef8     MOVLW     0xf8                                                                                            
0035a4   c02b     MOVFF     0x2b,0xfdb                                                                                      
0035a6   ffdb                                                                                                               
0035a8   c02a     MOVFF     0x2a,0xfe9                                                                                      
0035aa   ffe9                                                                                                               
0035ac   c02b     MOVFF     0x2b,0xfea                                                                                      
0035ae   ffea                                                                                                               
0035b0   0012     RETURN    0x0                                                                                             
003608   0ef7     MOVLW     0xf7                                                                                            
00360a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00360c   f02a                                                                                                               
00360e   0ef8     MOVLW     0xf8                                                                                            
003610   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003612   f02b                                                                                                               
003614   0012     RETURN    0x0                                                                                             
002bbc   e103     BNZ       0x2bc4                           if (n >= 0)                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bbe   0e13     MOVLW     0x13                                 precision = n;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc0   ec63     CALL      0x34c6,0x0                                                                                      
002bc2   f01a                                                                                                               
0034c6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034c8   d8ce     RCALL     0x3666                                                                                          
003666   6ee7     MOVWF     0xe7,0x0                                                                                        
003668   0e05     MOVLW     0x5                                                                                             
00366a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00366c   ffdb                                                                                                               
00366e   0012     RETURN    0x0                                                                                             
0034ca   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0034cc   6ef3     MOVWF     0xf3,0x0                                                                                        
0034ce   0e06     MOVLW     0x6                                                                                             
0034d0   cff3     MOVFF     0xff3,0xfdb                                                                                     
0034d2   ffdb                                                                                                               
0034d4   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc4   ecde     CALL      0x33bc,0x0                       c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc6   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc8   d00b     BRA       0x2be0                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bca   0e09     MOVLW     0x9                              cval = 0;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bcc   6adb     CLRF      0xdb,0x0                                                                                        
002bce   ec7f     CALL      0x34fe,0x0                       while ((unsigned char) isdigit (c))                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd0   f01a                                                                                                               
002bd2   e003     BZ        0x2bda                                                                                          
002bd8   d7fa     BRA       0x2bce                                                                                          
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd4   ecf3     CALL      0x35e6,0x0                           cval = cval * 10 + c - '0';                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd6   f01a                                                                                                               
                                                                 c = *++f;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bda   0e09     MOVLW     0x9                              precision = cval;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bdc   ec63     CALL      0x34c6,0x0                                                                                      
002bde   f01a                                                                                                               
                                                             have_precision = 1;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be0   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002be4   e107     BNZ       0x2bf4                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be6   ecde     CALL      0x33bc,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be8   f019                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bea   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bec   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bee   e11d     BNZ       0x2c2a                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf0   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf2   d018     BRA       0x2c24                   else if (c == 't' || c == 'z')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf4   0e74     MOVLW     0x74                                                                                            
002bf6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bf8   e017     BZ        0x2c28                                                                                          
002bfa   0e7a     MOVLW     0x7a                                                                                            
002bfc   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bfe   e014     BZ        0x2c28                                                                                          
                                                       c = *++f;                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c00   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c02   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002c04   e006     BZ        0x2c12                                                                                          
002c06   0e54     MOVLW     0x54                                                                                            
002c08   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002c0a   e003     BZ        0x2c12                                                                                          
002c0c   0e5a     MOVLW     0x5a                                                                                            
002c0e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002c10   e102     BNZ       0x2c16                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c12   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c14   d007     BRA       0x2c24                   else if (c == 'l' || c == 'j')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c16   0e6c     MOVLW     0x6c                                                                                            
002c18   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002c1a   e003     BZ        0x2c22                                                                                          
002c1c   0e6a     MOVLW     0x6a                                                                                            
002c1e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002c20   e104     BNZ       0x2c2a                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c22   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c24   ecb6     CALL      0x356c,0x0                                                                                      
002c26   f01a                                                                                                               
002c28   dbc9     RCALL     0x33bc                       c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0033bc   d961     RCALL     0x3680                                                                                          
0033be   0008     TBLRD                                                                                                     
0033c0   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0033c2   6edf     MOVWF     0xdf,0x0                                                                                        
0033c4   0012     RETURN    0x0                                                                                             
0035b2   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0035b4   6eea     MOVWF     0xea,0x0                                                                                        
0035b6   2aef     INCF      0xef,0x1,0x0                                                                                    
0035b8   cfee     MOVFF     0xfee,0xff6                                                                                     
0035ba   fff6                                                                                                               
0035bc   0e00     MOVLW     0x0                                                                                             
0035be   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0035c0   cfee     MOVFF     0xfee,0xff7                                                                                     
0035c2   fff7                                                                                                               
0035c4   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0035c6   cfee     MOVFF     0xfee,0xff8                                                                                     
0035c8   fff8                                                                                                               
0035ca   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c2a   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c2c   0a6e     XORLW     0x6e                                                                                            
002c2e   e101     BNZ       0x2c32                                                                                          
002c30   d37f     BRA       0x3330                                                                                          
002c32   0a1e     XORLW     0x1e                                                                                            
002c34   e101     BNZ       0x2c38                                                                                          
002c36   d192     BRA       0x2f5c                                                                                          
002c38   0a20     XORLW     0x20                                                                                            
002c3a   e101     BNZ       0x2c3e                                                                                          
002c3c   d18f     BRA       0x2f5c                                                                                          
002c3e   0a3f     XORLW     0x3f                                                                                            
002c40   e101     BNZ       0x2c44                                                                                          
002c42   d149     BRA       0x2ed6                                                                                          
002c44   0a1a     XORLW     0x1a                                                                                            
002c46   e101     BNZ       0x2c4a                                                                                          
002c48   d146     BRA       0x2ed6                                                                                          
002c4a   0a0d     XORLW     0xd                                                                                             
002c4c   e101     BNZ       0x2c50                                                                                          
002c4e   d143     BRA       0x2ed6                                                                                          
002c50   0a20     XORLW     0x20                                                                                            
002c52   e101     BNZ       0x2c56                                                                                          
002c54   d140     BRA       0x2ed6                                                                                          
002c56   0a3a     XORLW     0x3a                                                                                            
002c58   e101     BNZ       0x2c5c                                                                                          
002c5a   d13d     BRA       0x2ed6                                                                                          
002c5c   0a20     XORLW     0x20                                                                                            
002c5e   e101     BNZ       0x2c62                                                                                          
002c60   d13a     BRA       0x2ed6                                                                                          
002c62   0a26     XORLW     0x26                                                                                            
002c64   e101     BNZ       0x2c68                                                                                          
002c66   d135     BRA       0x2ed2                                                                                          
002c68   0a0d     XORLW     0xd                                                                                             
002c6a   e101     BNZ       0x2c6e                                                                                          
002c6c   d132     BRA       0x2ed2                                                                                          
002c6e   0a1a     XORLW     0x1a                                                                                            
002c70   e101     BNZ       0x2c74                                                                                          
002c72   d0d9     BRA       0x2e26                                                                                          
002c74   0a20     XORLW     0x20                                                                                            
002c76   e04a     BZ        0x2d0c                                                                                          
002c78   0a30     XORLW     0x30                                                                                            
002c7a   e01f     BZ        0x2cba                                                                                          
002c7c   0a46     XORLW     0x46                                                                                            
002c7e   e00e     BZ        0x2c9c                                                                                          
002c80   0a25     XORLW     0x25                                                                                            
002c82   e001     BZ        0x2c86                                                                                          
002c84   d383     BRA       0x338c                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            character. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c86   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c88   0ff9     ADDLW     0xf9                                                                                            
002c8a   6ee9     MOVWF     0xe9,0x0                                                                                        
002c8c   0eff     MOVLW     0xff                                                                                            
002c8e   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002c90   6eea     MOVWF     0xea,0x0                                                                                        
002c92   0e01     MOVLW     0x1                                                                                             
002c94   5eee     SUBWF     0xee,0x1,0x0                                                                                    
002c96   0e00     MOVLW     0x0                                                                                             
002c98   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
002c9a   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '%':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9c   ecc4     CALL      0x3588,0x0                   if (putc ('%', handle) == EOF)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9e   f01a                                                                                                               
002ca0   0e25     MOVLW     0x25                                                                                            
002ca2   6ee6     MOVWF     0xe6,0x0                                                                                        
002ca4   db95     RCALL     0x33d0                                                                                          
002ca6   e103     BNZ       0x2cae                                                                                          
002ca8   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002caa   e101     BNZ       0x2cae                                                                                          
002cac   d369     BRA       0x3380                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cae   ecc0     CALL      0x3580,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cb0   f01a                                                                                                               
002cb2   e201     BC        0x2cb6                                                                                          
002cb4   d36b     BRA       0x338c                                                                                          
002cb6   2adb     INCF      0xdb,0x1,0x0                                                                                    
002cb8   d369     BRA       0x338c                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cba   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cbc   6adb     CLRF      0xdb,0x0                                                                                        
002cbe   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cc0   50db     MOVF      0xdb,0x0,0x0                                                                                    
002cc2   0801     SUBLW     0x1                                                                                             
002cc4   e206     BC        0x2cd2                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cc6   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cc8   04db     DECF      0xdb,0x0,0x0                                                                                    
002cca   ec88     CALL      0x3510,0x0                                                                                      
002ccc   f01a                                                                                                               
002cce   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd0   db8b     RCALL     0x33e8                                                                                          
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd2   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd4   50db     MOVF      0xdb,0x0,0x0                                                                                    
002cd6   e009     BZ        0x2cea                                                                                          
002cd8   0e03     MOVLW     0x3                                                                                             
002cda   50db     MOVF      0xdb,0x0,0x0                                                                                    
002cdc   0b01     ANDLW     0x1                                                                                             
002cde   e105     BNZ       0x2cea                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce0   db72     RCALL     0x33c6                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce2   e001     BZ        0x2ce6                                                                                          
002ce4   d34d     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce6   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce8   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cea   db64     RCALL     0x33b4                       c = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cec   cfef     MOVFF     0xfef,0xfdf                                                                                     
002cee   ffdf                                                                                                               
002cf0   ec38     CALL      0x3670,0x0                   if (putc (c, handle) == EOF)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf2   f01b                                                                                                               
002cf4   e103     BNZ       0x2cfc                                                                                          
002cf6   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002cf8   e101     BNZ       0x2cfc                                                                                          
002cfa   d342     BRA       0x3380                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cfc   ecc0     CALL      0x3580,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cfe   f01a                                                                                                               
002d00   e301     BNC       0x2d04                                                                                          
002d02   2adb     INCF      0xdb,0x1,0x0                                                                                    
002d04   db60     RCALL     0x33c6                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d06   e101     BNZ       0x2d0a                                                                                          
002d08   d341     BRA       0x338c                                                                                          
002d0a   d33a     BRA       0x3380                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d0c   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d0e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d10   0802     SUBLW     0x2                                                                                             
002d12   e10f     BNZ       0x2d32                                                                                          
002d14   ec04     CALL      0x3608,0x0                     romstring = va_arg (ap, rom far char *);                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d16   f01b                                                                                                               
002d18   0e03     MOVLW     0x3                                                                                             
002d1a   eccb     CALL      0x3596,0x0                                                                                      
002d1c   f01a                                                                                                               
002d1e   0e0e     MOVLW     0xe                                                                                             
002d20   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d22   ffdb                                                                                                               
002d24   0e0f     MOVLW     0xf                                                                                             
002d26   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d28   ffdb                                                                                                               
002d2a   0e10     MOVLW     0x10                                                                                            
002d2c   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d2e   ffdb                                                                                                               
002d30   d020     BRA       0x2d72                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d32   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d34   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002d36   f02d                                                                                                               
002d38   0ef8     MOVLW     0xf8                                                                                            
002d3a   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002d3c   f02e                                                                                                               
002d3e   0e02     MOVLW     0x2                                                                                             
002d40   5e2d     SUBWF     0x2d,0x1,0x0                                                                                    
002d42   0e00     MOVLW     0x0                                                                                             
002d44   5a2e     SUBWFB    0x2e,0x1,0x0                                                                                    
002d46   0ef7     MOVLW     0xf7                                                                                            
002d48   c02d     MOVFF     0x2d,0xfdb                                                                                      
002d4a   ffdb                                                                                                               
002d4c   0ef8     MOVLW     0xf8                                                                                            
002d4e   c02e     MOVFF     0x2e,0xfdb                                                                                      
002d50   ffdb                                                                                                               
002d52   c02d     MOVFF     0x2d,0xfe9                                                                                      
002d54   ffe9                                                                                                               
002d56   c02e     MOVFF     0x2e,0xfea                                                                                      
002d58   ffea                                                                                                               
002d5a   ecbb     CALL      0x3576,0x0                                                                                      
002d5c   f01a                                                                                                               
002d5e   6a2c     CLRF      0x2c,0x0                                                                                        
002d60   0e0e     MOVLW     0xe                                                                                             
002d62   c02a     MOVFF     0x2a,0xfdb                                                                                      
002d64   ffdb                                                                                                               
002d66   0e0f     MOVLW     0xf                                                                                             
002d68   c02b     MOVFF     0x2b,0xfdb                                                                                      
002d6a   ffdb                                                                                                               
002d6c   0e10     MOVLW     0x10                                                                                            
002d6e   c02c     MOVFF     0x2c,0xfdb                                                                                      
002d70   ffdb                                                                                                               
002d72   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d74   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d76   ffe6                                                                                                               
002d78   0e0f     MOVLW     0xf                                                                                             
002d7a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d7c   ffe6                                                                                                               
002d7e   0e10     MOVLW     0x10                                                                                            
002d80   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d82   ffe6                                                                                                               
002d84   ecd2     CALL      0x47a4,0x0                                                                                      
002d86   f023                                                                                                               
002d88   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d8a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d8e   0e13     MOVLW     0x13                                                                                            
002d90   c01d     MOVFF     0x1d,0xfdb                                                                                      
002d92   ffdb                                                                                                               
002d94   0e14     MOVLW     0x14                                                                                            
002d96   c01e     MOVFF     0x1e,0xfdb                                                                                      
002d98   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d9a   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d9c   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d9e   e005     BZ        0x2daa                                                                                          
002da0   0e13     MOVLW     0x13                                                                                            
002da2   ecff     CALL      0x35fe,0x0                                                                                      
002da4   f01a                                                                                                               
002da6   e201     BC        0x2daa                                                                                          
002da8   db6a     RCALL     0x347e                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00347e   0e05     MOVLW     0x5                                                                                             
003480   50db     MOVF      0xdb,0x0,0x0                                                                                    
003482   6ee6     MOVWF     0xe6,0x0                                                                                        
003484   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003486   0f13     ADDLW     0x13                                                                                            
003488   d901     RCALL     0x368c                                                                                          
00348a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00348c   50e7     MOVF      0xe7,0x0,0x0                                                                                    
00348e   6eee     MOVWF     0xee,0x0                                                                                        
003490   6aed     CLRF      0xed,0x0                                                                                        
003492   0012     RETURN    0x0                                                                                             
002daa   ec23     CALL      0x3646,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dac   f01b                                                                                                               
002dae   e202     BC        0x2db4                                                                                          
003646   0e13     MOVLW     0x13                                                                                            
003648   50db     MOVF      0xdb,0x0,0x0                                                                                    
00364a   6ef3     MOVWF     0xf3,0x0                                                                                        
00364c   0e04     MOVLW     0x4                                                                                             
00364e   ef0c     GOTO      0x3418                                                                                          
003650   f01a                                                                                                               
002db0   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db2   db37     RCALL     0x3422                                                                                          
002db4   ece6     CALL      0x35cc,0x0                   space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db6   f01a                                                                                                               
0035cc   0e04     MOVLW     0x4                                                                                             
0035ce   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0035d0   ffe6                                                                                                               
0035d2   0e13     MOVLW     0x13                                                                                            
0035d4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035d8   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
0035da   df9a     RCALL     0x3510                                                                                          
0035dc   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0035de   df04     RCALL     0x33e8                                                                                          
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db8   e006     BZ        0x2dc6                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dba   0e04     MOVLW     0x4                                                                                             
002dbc   ecff     CALL      0x35fe,0x0                                                                                      
002dbe   f01a                                                                                                               
002dc0   e202     BC        0x2dc6                                                                                          
0035e0   0e06     MOVLW     0x6                                                                                             
0035e2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035e4   0012     RETURN    0x0                                                                                             
002dc2   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc4   db2e     RCALL     0x3422                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc6   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc8   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002dca   d005     BRA       0x2dd6                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dcc   dafc     RCALL     0x33c6                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dce   e001     BZ        0x2dd2                                                                                          
002dd0   d2d7     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd2   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd4   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd6   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd8   6adb     CLRF      0xdb,0x0                                                                                        
002dda   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ddc   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002dde   fff6                                                                                                               
002de0   0e0f     MOVLW     0xf                                                                                             
002de2   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002de4   fff7                                                                                                               
002de6   0e10     MOVLW     0x10                                                                                            
002de8   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002dea   fff8                                                                                                               
002dec   0008     TBLRD                                                                                                     
002dee   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002df0   6edf     MOVWF     0xdf,0x0                                                                                        
002df2   50df     MOVF      0xdf,0x0,0x0                                                                                    
002df4   e014     BZ        0x2e1e                                                                                          
002df6   ec29     CALL      0x3652,0x0                                                                                      
002df8   f01b                                                                                                               
002dfa   e211     BC        0x2e1e                                                                                          
002e12   50d9     MOVF      0xd9,0x0,0x0                                                                                    
002e14   0f0e     ADDLW     0xe                                                                                             
002e16   6ee9     MOVWF     0xe9,0x0                                                                                        
002e18   0e00     MOVLW     0x0                                                                                             
002e1a   dbcb     RCALL     0x35b2                                                                                          
002e1c   d7e7     BRA       0x2dec                                                                                          
003652   0e04     MOVLW     0x4                                                                                             
003654   50db     MOVF      0xdb,0x0,0x0                                                                                    
003656   6ef3     MOVWF     0xf3,0x0                                                                                        
003658   0e09     MOVLW     0x9                                                                                             
00365a   ef0c     GOTO      0x3418                                                                                          
00365c   f01a                                                                                                               
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfc   ec38     CALL      0x3670,0x0                       if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfe   f01b                                                                                                               
002e00   e103     BNZ       0x2e08                                                                                          
002e02   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002e04   e101     BNZ       0x2e08                                                                                          
002e06   d2bc     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e08   dbbb     RCALL     0x3580                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0a   e301     BNC       0x2e0e                                                                                          
002e0c   2adb     INCF      0xdb,0x1,0x0                                                                                    
002e0e   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e10   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e1e   dad3     RCALL     0x33c6                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e20   e101     BNZ       0x2e24                                                                                          
002e22   d2b4     BRA       0x338c                                                                                          
002e24   d2ad     BRA       0x3380                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 's':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e26   dac6     RCALL     0x33b4                       ramstring = va_arg (ap, char *);                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e28   0e11     MOVLW     0x11                                                                                            
002e2a   cfee     MOVFF     0xfee,0xfdb                                                                                     
002e2c   ffdb                                                                                                               
002e2e   0e12     MOVLW     0x12                                                                                            
002e30   cfed     MOVFF     0xfed,0xfdb                                                                                     
002e32   ffdb                                                                                                               
002e34   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e36   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002e38   ffe6                                                                                                               
002e3a   0e12     MOVLW     0x12                                                                                            
002e3c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002e3e   ffe6                                                                                                               
002e40   ecc4     CALL      0x4788,0x0                                                                                      
002e42   f023                                                                                                               
002e44   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002e46   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002e48   0e13     MOVLW     0x13                                                                                            
002e4a   cff3     MOVFF     0xff3,0xfdb                                                                                     
002e4c   ffdb                                                                                                               
002e4e   0e14     MOVLW     0x14                                                                                            
002e50   cff4     MOVFF     0xff4,0xfdb                                                                                     
002e52   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e54   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e56   50db     MOVF      0xdb,0x0,0x0                                                                                    
002e58   e004     BZ        0x2e62                                                                                          
002e5a   0e13     MOVLW     0x13                                                                                            
002e5c   dbd0     RCALL     0x35fe                                                                                          
002e5e   e201     BC        0x2e62                                                                                          
002e60   db0e     RCALL     0x347e                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e62   ec23     CALL      0x3646,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e64   f01b                                                                                                               
002e66   e202     BC        0x2e6c                                                                                          
002e68   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6a   dadb     RCALL     0x3422                                                                                          
002e6c   dbaf     RCALL     0x35cc                       space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003510   6ee7     MOVWF     0xe7,0x0                                                                                        
003512   0e08     MOVLW     0x8                                                                                             
003514   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003516   ffdb                                                                                                               
003518   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6e   e005     BZ        0x2e7a                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e70   0e04     MOVLW     0x4                                                                                             
002e72   dbc5     RCALL     0x35fe                                                                                          
002e74   e202     BC        0x2e7a                                                                                          
0035fe   50db     MOVF      0xdb,0x0,0x0                                                                                    
003600   6ef3     MOVWF     0xf3,0x0                                                                                        
003602   0e05     MOVLW     0x5                                                                                             
003604   ef0c     GOTO      0x3418                                                                                          
003606   f01a                                                                                                               
002e76   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e78   dad4     RCALL     0x3422                                                                                          
003422   50db     MOVF      0xdb,0x0,0x0                                                                                    
003424   6ee7     MOVWF     0xe7,0x0                                                                                        
003426   0e04     MOVLW     0x4                                                                                             
003428   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00342a   ffdb                                                                                                               
00342c   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e7a   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e7c   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002e7e   d005     BRA       0x2e8a                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e80   daa2     RCALL     0x33c6                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e82   e001     BZ        0x2e86                                                                                          
002e84   d27d     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e86   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e88   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e8a   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e8c   6adb     CLRF      0xdb,0x0                                                                                        
002e8e   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e90   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002e92   ffe9                                                                                                               
002e94   0e12     MOVLW     0x12                                                                                            
002e96   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002e98   ffea                                                                                                               
002e9a   cfef     MOVFF     0xfef,0xfdf                                                                                     
002e9c   ffdf                                                                                                               
002e9e   50df     MOVF      0xdf,0x0,0x0                                                                                    
002ea0   e014     BZ        0x2eca                                                                                          
002ea2   dbd7     RCALL     0x3652                                                                                          
002ea4   e212     BC        0x2eca                                                                                          
002eba   0e11     MOVLW     0x11                                                                                            
002ebc   2adb     INCF      0xdb,0x1,0x0                                                                                    
002ebe   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002ec0   ffe9                                                                                                               
002ec2   0e12     MOVLW     0x12                                                                                            
002ec4   e3e8     BNC       0x2e96                                                                                          
002ec6   2adb     INCF      0xdb,0x1,0x0                                                                                    
002ec8   d7e6     BRA       0x2e96                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ea6   dbe4     RCALL     0x3670                           if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ea8   e103     BNZ       0x2eb0                                                                                          
002eaa   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002eac   e101     BNZ       0x2eb0                                                                                          
002eae   d268     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb0   db67     RCALL     0x3580                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb2   e301     BNC       0x2eb6                                                                                          
002eb4   2adb     INCF      0xdb,0x1,0x0                                                                                    
002eb6   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb8   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eca   da7d     RCALL     0x33c6                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ecc   e101     BNZ       0x2ed0                                                                                          
002ece   d25e     BRA       0x338c                                                                                          
002ed0   d257     BRA       0x3380                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed2   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed4   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed6   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed8   04db     DECF      0xdb,0x0,0x0                                                                                    
002eda   e110     BNZ       0x2efc                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002edc   db95     RCALL     0x3608                           larg = va_arg (ap, long int);                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ede   0e04     MOVLW     0x4                                                                                             
002ee0   db5a     RCALL     0x3596                                                                                          
002ee2   0e0a     MOVLW     0xa                                                                                             
002ee4   cfee     MOVFF     0xfee,0xfdb                                                                                     
002ee6   ffdb                                                                                                               
002ee8   0e0b     MOVLW     0xb                                                                                             
002eea   cfee     MOVFF     0xfee,0xfdb                                                                                     
002eec   ffdb                                                                                                               
002eee   0e0c     MOVLW     0xc                                                                                             
002ef0   cfee     MOVFF     0xfee,0xfdb                                                                                     
002ef2   ffdb                                                                                                               
002ef4   0e0d     MOVLW     0xd                                                                                             
002ef6   cfee     MOVFF     0xfee,0xfdb                                                                                     
002ef8   ffdb                                                                                                               
002efa   d06c     BRA       0x2fd4                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002efc   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002efe   50db     MOVF      0xdb,0x0,0x0                                                                                    
002f00   0803     SUBLW     0x3                                                                                             
002f02   e12c     BNZ       0x2f5c                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f04   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f06   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002f08   d00d     BRA       0x2f24                                                                                          
002f0a   dab2     RCALL     0x3470                             larg = (signed char) va_arg (ap, int);                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f0c   0e02     MOVLW     0x2                                                                                             
002f0e   da76     RCALL     0x33fc                                                                                          
002f10   cfef     MOVFF     0xfef,0x2a                                                                                      
002f12   f02a                                                                                                               
002f14   6a2b     CLRF      0x2b,0x0                                                                                        
002f16   6a2c     CLRF      0x2c,0x0                                                                                        
002f18   6a2d     CLRF      0x2d,0x0                                                                                        
002f1a   ae2a     BTFSS     0x2a,0x7,0x0                                                                                    
002f1c   d039     BRA       0x2f90                                                                                          
002f1e   682b     SETF      0x2b,0x0                                                                                        
002f20   682c     SETF      0x2c,0x0                                                                                        
002f22   d035     BRA       0x2f8e                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f24   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f26   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002f28   f02b                                                                                                               
002f2a   0ef8     MOVLW     0xf8                                                                                            
002f2c   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002f2e   f02c                                                                                                               
002f30   0e02     MOVLW     0x2                                                                                             
002f32   5e2b     SUBWF     0x2b,0x1,0x0                                                                                    
002f34   0e00     MOVLW     0x0                                                                                             
002f36   5a2c     SUBWFB    0x2c,0x1,0x0                                                                                    
002f38   0ef7     MOVLW     0xf7                                                                                            
002f3a   c02b     MOVFF     0x2b,0xfdb                                                                                      
002f3c   ffdb                                                                                                               
002f3e   0ef8     MOVLW     0xf8                                                                                            
002f40   c02c     MOVFF     0x2c,0xfdb                                                                                      
002f42   ffdb                                                                                                               
002f44   c02b     MOVFF     0x2b,0xfe9                                                                                      
002f46   ffe9                                                                                                               
002f48   c02c     MOVFF     0x2c,0xfea                                                                                      
002f4a   ffea                                                                                                               
002f4c   cfef     MOVFF     0xfef,0x2a                                                                                      
002f4e   f02a                                                                                                               
002f50   0e0a     MOVLW     0xa                                                                                             
002f52   c02a     MOVFF     0x2a,0xfdb                                                                                      
002f54   ffdb                                                                                                               
002f56   0e0b     MOVLW     0xb                                                                                             
002f58   6adb     CLRF      0xdb,0x0                                                                                        
002f5a   d038     BRA       0x2fcc                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f5c   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f5e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002f60   0802     SUBLW     0x2                                                                                             
002f62   e109     BNZ       0x2f76                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f64   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f66   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002f68   d004     BRA       0x2f72                                                                                          
002f6a   db59     RCALL     0x361e                             larg = va_arg (ap, short long int);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f6c   ae2c     BTFSS     0x2c,0x7,0x0                                                                                    
002f6e   d010     BRA       0x2f90                                                                                          
00351a   cfee     MOVFF     0xfee,0x2a                                                                                      
00351c   f02a                                                                                                               
00351e   cfee     MOVFF     0xfee,0x2b                                                                                      
003520   f02b                                                                                                               
003522   cfef     MOVFF     0xfef,0x2c                                                                                      
003524   f02c                                                                                                               
003526   6a2d     CLRF      0x2d,0x0                                                                                        
003528   0012     RETURN    0x0                                                                                             
00361e   df28     RCALL     0x3470                                                                                          
003620   0e03     MOVLW     0x3                                                                                             
003622   deec     RCALL     0x33fc                                                                                          
003624   ef8d     GOTO      0x351a                                                                                          
003626   f01a                                                                                                               
002f70   d00e     BRA       0x2f8e                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f72   db55     RCALL     0x361e                             larg = va_arg (ap, unsigned short long int);                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f74   d00d     BRA       0x2f90                       else if (flags & _FLAG_SIGNED)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f76   0e03     MOVLW     0x3                                                                                             
002f78   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002f7a   d012     BRA       0x2fa0                                                                                          
002f7c   da79     RCALL     0x3470                         larg = va_arg (ap, int);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f7e   0e02     MOVLW     0x2                                                                                             
002f80   da3d     RCALL     0x33fc                                                                                          
002f82   daf9     RCALL     0x3576                                                                                          
002f84   6a2c     CLRF      0x2c,0x0                                                                                        
002f86   6a2d     CLRF      0x2d,0x0                                                                                        
002f88   ae2b     BTFSS     0x2b,0x7,0x0                                                                                    
002f8a   d002     BRA       0x2f90                                                                                          
002f8c   682c     SETF      0x2c,0x0                                                                                        
002f8e   682d     SETF      0x2d,0x0                                                                                        
002f90   dae2     RCALL     0x3556                                                                                          
002f92   0e0c     MOVLW     0xc                                                                                             
002f94   c02c     MOVFF     0x2c,0xfdb                                                                                      
002f96   ffdb                                                                                                               
002f98   0e0d     MOVLW     0xd                                                                                             
002f9a   c02d     MOVFF     0x2d,0xfdb                                                                                      
002f9c   ffdb                                                                                                               
0033fc   5e2e     SUBWF     0x2e,0x1,0x0                                                                                    
0033fe   0e00     MOVLW     0x0                                                                                             
003400   5a2f     SUBWFB    0x2f,0x1,0x0                                                                                    
003402   0ef7     MOVLW     0xf7                                                                                            
003404   c02e     MOVFF     0x2e,0xfdb                                                                                      
003406   ffdb                                                                                                               
003408   0ef8     MOVLW     0xf8                                                                                            
00340a   c02f     MOVFF     0x2f,0xfdb                                                                                      
00340c   ffdb                                                                                                               
00340e   c02e     MOVFF     0x2e,0xfe9                                                                                      
003410   ffe9                                                                                                               
003412   c02f     MOVFF     0x2f,0xfea                                                                                      
003414   ffea                                                                                                               
003416   0012     RETURN    0x0                                                                                             
003470   0ef7     MOVLW     0xf7                                                                                            
003472   cfdb     MOVFF     0xfdb,0x2e                                                                                      
003474   f02e                                                                                                               
003476   0ef8     MOVLW     0xf8                                                                                            
003478   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00347a   f02f                                                                                                               
00347c   0012     RETURN    0x0                                                                                             
003556   0e0a     MOVLW     0xa                                                                                             
003558   c02a     MOVFF     0x2a,0xfdb                                                                                      
00355a   ffdb                                                                                                               
00355c   0e0b     MOVLW     0xb                                                                                             
00355e   c02b     MOVFF     0x2b,0xfdb                                                                                      
003560   ffdb                                                                                                               
003562   0012     RETURN    0x0                                                                                             
003576   cfee     MOVFF     0xfee,0x2a                                                                                      
003578   f02a                                                                                                               
00357a   cfef     MOVFF     0xfef,0x2b                                                                                      
00357c   f02b                                                                                                               
00357e   0012     RETURN    0x0                                                                                             
002f9e   d01a     BRA       0x2fd4                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa0   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa2   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002fa4   f02c                                                                                                               
002fa6   0ef8     MOVLW     0xf8                                                                                            
002fa8   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002faa   f02d                                                                                                               
002fac   0e02     MOVLW     0x2                                                                                             
002fae   5e2c     SUBWF     0x2c,0x1,0x0                                                                                    
002fb0   0e00     MOVLW     0x0                                                                                             
002fb2   5a2d     SUBWFB    0x2d,0x1,0x0                                                                                    
002fb4   0ef7     MOVLW     0xf7                                                                                            
002fb6   c02c     MOVFF     0x2c,0xfdb                                                                                      
002fb8   ffdb                                                                                                               
002fba   0ef8     MOVLW     0xf8                                                                                            
002fbc   c02d     MOVFF     0x2d,0xfdb                                                                                      
002fbe   ffdb                                                                                                               
002fc0   c02c     MOVFF     0x2c,0xfe9                                                                                      
002fc2   ffe9                                                                                                               
002fc4   c02d     MOVFF     0x2d,0xfea                                                                                      
002fc6   ffea                                                                                                               
002fc8   dad6     RCALL     0x3576                                                                                          
002fca   dac5     RCALL     0x3556                                                                                          
002fcc   0e0c     MOVLW     0xc                                                                                             
002fce   6adb     CLRF      0xdb,0x0                                                                                        
002fd0   0e0d     MOVLW     0xd                                                                                             
002fd2   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd4   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd6   50db     MOVF      0xdb,0x0,0x0                                                                                    
002fd8   e105     BNZ       0x2fe4                                                                                          
002fda   0e01     MOVLW     0x1                            precision = 1;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fdc   6ef3     MOVWF     0xf3,0x0                                                                                        
002fde   0e05     MOVLW     0x5                                                                                             
002fe0   cff3     MOVFF     0xff3,0xfdb                                                                                     
002fe2   ffdb                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         {                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fe4   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fe6   6adb     CLRF      0xdb,0x0                                                                                        
002fe8   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fea   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fec   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fee   0f37     ADDLW     0x37                                                                                            
002ff0   6e2a     MOVWF     0x2a,0x0                                                                                        
002ff2   0e00     MOVLW     0x0                                                                                             
002ff4   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002ff6   6e2b     MOVWF     0x2b,0x0                                                                                        
002ff8   0e39     MOVLW     0x39                                                                                            
002ffa   c02a     MOVFF     0x2a,0xfdb                                                                                      
002ffc   ffdb                                                                                                               
002ffe   0e3a     MOVLW     0x3a                                                                                            
003000   c02b     MOVFF     0x2b,0xfdb                                                                                      
003002   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003004   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003006   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003008   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00300a   6adb     CLRF      0xdb,0x0                                                                                        
00300c   0e0a     MOVLW     0xa                            size = 10;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00300e   daae     RCALL     0x356c                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003010   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003012   0a78     XORLW     0x78                                                                                            
003014   e012     BZ        0x303a                                                                                          
003016   0a20     XORLW     0x20                                                                                            
003018   e010     BZ        0x303a                                                                                          
00301a   0a28     XORLW     0x28                                                                                            
00301c   e00c     BZ        0x3036                                                                                          
00301e   0a20     XORLW     0x20                                                                                            
003020   e00a     BZ        0x3036                                                                                          
003022   0a3f     XORLW     0x3f                                                                                            
003024   e006     BZ        0x3032                                                                                          
003026   0a0d     XORLW     0xd                                                                                             
003028   e002     BZ        0x302e                                                                                          
00302a   0a20     XORLW     0x20                                                                                            
00302c   e108     BNZ       0x303e                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00302e   0e02     MOVLW     0x2                                size = 2;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003030   d005     BRA       0x303c                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003032   0e08     MOVLW     0x8                                size = 8;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003034   d003     BRA       0x303c                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003036   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003038   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303a   0e10     MOVLW     0x10                               size = 16;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303c   da97     RCALL     0x356c                                                                                          
00356c   6ef3     MOVWF     0xf3,0x0                                                                                        
00356e   0e07     MOVLW     0x7                                                                                             
003570   cff3     MOVFF     0xff3,0xfdb                                                                                     
003572   ffdb                                                                                                               
003574   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303e   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003040   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
003042   d002     BRA       0x3048                                                                                          
003044   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003046   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003048   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00304a   0b80     ANDLW     0x80                                                                                            
00304c   e024     BZ        0x3096                                                                                          
00304e   da8a     RCALL     0x3564                                                                                          
003050   90d8     BCF       0xd8,0x0,0x0                                                                                    
003052   0e03     MOVLW     0x3                                                                                             
003054   50eb     MOVF      0xeb,0x0,0x0                                                                                    
003056   0a00     XORLW     0x0                                                                                             
003058   e608     BN        0x306a                                                                                          
00305a   0e00     MOVLW     0x0                                                                                             
00305c   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00305e   0e00     MOVLW     0x0                                                                                             
003060   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
003062   0e00     MOVLW     0x0                                                                                             
003064   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
003066   0e00     MOVLW     0x0                                                                                             
003068   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00306a   e215     BC        0x3096                                                                                          
003564   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003566   0f0a     ADDLW     0xa                                                                                             
003568   ef46     GOTO      0x368c                                                                                          
00356a   f01b                                                                                                               
00368c   6ee9     MOVWF     0xe9,0x0                                                                                        
00368e   0e00     MOVLW     0x0                                                                                             
003690   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003692   6eea     MOVWF     0xea,0x0                                                                                        
003694   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00306c   da13     RCALL     0x3494                             larg = -(long) larg;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00306e   6821     SETF      0x21,0x0                                                                                        
003070   6822     SETF      0x22,0x0                                                                                        
003072   6823     SETF      0x23,0x0                                                                                        
003074   6824     SETF      0x24,0x0                                                                                        
003076   ec8c     CALL      0x4718,0x0                                                                                      
003078   f023                                                                                                               
00307a   0e0a     MOVLW     0xa                                                                                             
00307c   c018     MOVFF     0x18,0xfdb                                                                                      
00307e   ffdb                                                                                                               
003080   0e0b     MOVLW     0xb                                                                                             
003082   c019     MOVFF     0x19,0xfdb                                                                                      
003084   ffdb                                                                                                               
003086   0e0c     MOVLW     0xc                                                                                             
003088   c01a     MOVFF     0x1a,0xfdb                                                                                      
00308a   ffdb                                                                                                               
00308c   0e0d     MOVLW     0xd                                                                                             
00308e   c01b     MOVFF     0x1b,0xfdb                                                                                      
003090   ffdb                                                                                                               
003494   0e0a     MOVLW     0xa                                                                                             
003496   cfdb     MOVFF     0xfdb,0x1c                                                                                      
003498   f01c                                                                                                               
00349a   0e0b     MOVLW     0xb                                                                                             
00349c   cfdb     MOVFF     0xfdb,0x1d                                                                                      
00349e   f01d                                                                                                               
0034a0   0e0c     MOVLW     0xc                                                                                             
0034a2   cfdb     MOVFF     0xfdb,0x1e                                                                                      
0034a4   f01e                                                                                                               
0034a6   0e0d     MOVLW     0xd                                                                                             
0034a8   cfdb     MOVFF     0xfdb,0x1f                                                                                      
0034aa   f01f                                                                                                               
0034ac   0012     RETURN    0x0                                                                                             
003092   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003094   d008     BRA       0x30a6                         else if (flags & _FLAG_PLUS)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003096   0e03     MOVLW     0x3                                                                                             
003098   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
00309a   d002     BRA       0x30a0                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00309c   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00309e   d003     BRA       0x30a6                         else if (flags & _FLAG_SPACE)                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a0   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
0030a2   d008     BRA       0x30b4                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a4   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a6   6ef3     MOVWF     0xf3,0x0                                                                                        
0030a8   0e17     MOVLW     0x17                                                                                            
0030aa   cff3     MOVFF     0xff3,0xfdb                                                                                     
0030ac   ffdb                                                                                                               
0030ae   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b0   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b2   d002     BRA       0x30b8                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b4   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b6   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b8   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030bc   e103     BNZ       0x30c4                                                                                          
0030be   d9b7     RCALL     0x342e                                                                                          
0030c0   e101     BNZ       0x30c4                                                                                          
0030c2   d089     BRA       0x31d6                                                                                          
00342e   0e0a     MOVLW     0xa                                                                                             
003430   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003432   f02a                                                                                                               
003434   0e0b     MOVLW     0xb                                                                                             
003436   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003438   f02b                                                                                                               
00343a   0e0c     MOVLW     0xc                                                                                             
00343c   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00343e   f02c                                                                                                               
003440   0e0d     MOVLW     0xd                                                                                             
003442   cfdb     MOVFF     0xfdb,0x2d                                                                                      
003444   f02d                                                                                                               
003446   502a     MOVF      0x2a,0x0,0x0                                                                                    
003448   102b     IORWF     0x2b,0x0,0x0                                                                                    
00344a   102c     IORWF     0x2c,0x0,0x0                                                                                    
00344c   102d     IORWF     0x2d,0x0,0x0                                                                                    
00344e   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               do                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030c4   0e42     MOVLW     0x42                                   cval = s_digits[larg % size];                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030c6   6e2a     MOVWF     0x2a,0x0                                                                                        
0030c8   0e49     MOVLW     0x49                                                                                            
0030ca   6e2b     MOVWF     0x2b,0x0                                                                                        
0030cc   0e00     MOVLW     0x0                                                                                             
0030ce   6e2c     MOVWF     0x2c,0x0                                                                                        
0030d0   0e07     MOVLW     0x7                                                                                             
0030d2   cfdb     MOVFF     0xfdb,0x2d                                                                                      
0030d4   f02d                                                                                                               
0030d6   6a2e     CLRF      0x2e,0x0                                                                                        
0030d8   6a2f     CLRF      0x2f,0x0                                                                                        
0030da   6a30     CLRF      0x30,0x0                                                                                        
0030dc   c02d     MOVFF     0x2d,0x21                                                                                       
0030de   f021                                                                                                               
0030e0   c02e     MOVFF     0x2e,0x22                                                                                       
0030e2   f022                                                                                                               
0030e4   c02f     MOVFF     0x2f,0x23                                                                                       
0030e6   f023                                                                                                               
0030e8   c030     MOVFF     0x30,0x24                                                                                       
0030ea   f024                                                                                                               
0030ec   d9d3     RCALL     0x3494                                                                                          
0030ee   ec1d     CALL      0x483a,0x0                                                                                      
0030f0   f024                                                                                                               
0030f2   502a     MOVF      0x2a,0x0,0x0                                                                                    
0030f4   2418     ADDWF     0x18,0x0,0x0                                                                                    
0030f6   6ef3     MOVWF     0xf3,0x0                                                                                        
0030f8   502b     MOVF      0x2b,0x0,0x0                                                                                    
0030fa   2019     ADDWFC    0x19,0x0,0x0                                                                                    
0030fc   6ef4     MOVWF     0xf4,0x0                                                                                        
0030fe   502c     MOVF      0x2c,0x0,0x0                                                                                    
003100   201a     ADDWFC    0x1a,0x0,0x0                                                                                    
003102   6ef8     MOVWF     0xf8,0x0                                                                                        
003104   cff4     MOVFF     0xff4,0xff7                                                                                     
003106   fff7                                                                                                               
003108   cff3     MOVFF     0xff3,0xff6                                                                                     
00310a   fff6                                                                                                               
00310c   0008     TBLRD                                                                                                     
00310e   0e09     MOVLW     0x9                                                                                             
003110   cff5     MOVFF     0xff5,0xfdb                                                                                     
003112   ffdb                                                                                                               
003114   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003116   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
003118   e10f     BNZ       0x3138                                                                                          
00311a   0e61     MOVLW     0x61                                                                                            
00311c   6ef3     MOVWF     0xf3,0x0                                                                                        
00311e   0e09     MOVLW     0x9                                                                                             
003120   d97b     RCALL     0x3418                                                                                          
003122   e30a     BNC       0x3138                                                                                          
003418   cfdb     MOVFF     0xfdb,0xff4                                                                                     
00341a   fff4                                                                                                               
00341c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00341e   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
003420   0012     RETURN    0x0                                                                                             
003124   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003126   6e2a     MOVWF     0x2a,0x0                                                                                        
003128   0e09     MOVLW     0x9                                                                                             
00312a   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
00312c   ffe7                                                                                                               
00312e   502a     MOVF      0x2a,0x0,0x0                                                                                    
003130   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
003132   0e09     MOVLW     0x9                                                                                             
003134   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003136   ffdb                                                                                                               
003138   0e07     MOVLW     0x7                                    larg /= size;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00313c   f02a                                                                                                               
00313e   6a2b     CLRF      0x2b,0x0                                                                                        
003140   6a2c     CLRF      0x2c,0x0                                                                                        
003142   6a2d     CLRF      0x2d,0x0                                                                                        
003144   da0f     RCALL     0x3564                                                                                          
003146   c02a     MOVFF     0x2a,0x21                                                                                       
003148   f021                                                                                                               
00314a   c02b     MOVFF     0x2b,0x22                                                                                       
00314c   f022                                                                                                               
00314e   c02c     MOVFF     0x2c,0x23                                                                                       
003150   f023                                                                                                               
003152   c02d     MOVFF     0x2d,0x24                                                                                       
003154   f024                                                                                                               
003156   cfee     MOVFF     0xfee,0x1c                                                                                      
003158   f01c                                                                                                               
00315a   cfee     MOVFF     0xfee,0x1d                                                                                      
00315c   f01d                                                                                                               
00315e   cfee     MOVFF     0xfee,0x1e                                                                                      
003160   f01e                                                                                                               
003162   cfef     MOVFF     0xfef,0x1f                                                                                      
003164   f01f                                                                                                               
003166   ec1d     CALL      0x483a,0x0                                                                                      
003168   f024                                                                                                               
00316a   c01f     MOVFF     0x1f,0xfed                                                                                      
00316c   ffed                                                                                                               
00316e   c01e     MOVFF     0x1e,0xfed                                                                                      
003170   ffed                                                                                                               
003172   c01d     MOVFF     0x1d,0xfed                                                                                      
003174   ffed                                                                                                               
003176   c01c     MOVFF     0x1c,0xfef                                                                                      
003178   ffef                                                                                                               
00317a   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00317c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00317e   ffe9                                                                                                               
003180   06db     DECF      0xdb,0x1,0x0                                                                                    
003182   0e3a     MOVLW     0x3a                                                                                            
003184   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003186   ffea                                                                                                               
003188   e201     BC        0x318c                                                                                          
00318a   06db     DECF      0xdb,0x1,0x0                                                                                    
00318c   0e09     MOVLW     0x9                                                                                             
00318e   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003190   ffef                                                                                                               
003192   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003194   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003196   d94b     RCALL     0x342e                             while (larg);                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003198   e195     BNZ       0x30c4                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00319a   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00319c   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
00319e   d01d     BRA       0x31da                                                                                          
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a0   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0031a4   e106     BNZ       0x31b2                                                                                          
                                                                     {                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a6   d9c1     RCALL     0x352a                                     if (precision <= digit_cnt)                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a8   e318     BNC       0x31da                                                                                          
00352a   0e05     MOVLW     0x5                                                                                             
00352c   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00352e   f02a                                                                                                               
003530   0e15     MOVLW     0x15                                                                                            
003532   50db     MOVF      0xdb,0x0,0x0                                                                                    
003534   80d8     BSF       0xd8,0x0,0x0                                                                                    
003536   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003538   0012     RETURN    0x0                                                                                             
0031aa   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031ac   28db     INCF      0xdb,0x0,0x0                                                                                    
0031ae   da5b     RCALL     0x3666                                                                                          
                                                                     }                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b0   d014     BRA       0x31da                                 else if (c == 'x'                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b2   0e78     MOVLW     0x78                                                                                            
0031b4   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b6   e009     BZ        0x31ca                                                                                          
0031b8   0e58     MOVLW     0x58                                                                                            
0031ba   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0031bc   e006     BZ        0x31ca                                                                                          
0031be   0e62     MOVLW     0x62                                                                                            
0031c0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0031c2   e003     BZ        0x31ca                                                                                          
0031c4   0e42     MOVLW     0x42                                                                                            
0031c6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0031c8   e108     BNZ       0x31da                                                                                          
0031ca   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031cc   6ef3     MOVWF     0xf3,0x0                                                                                        
0031ce   0e16     MOVLW     0x16                                                                                            
0031d0   cff3     MOVFF     0xff3,0xfdb                                                                                     
0031d2   ffdb                                                                                                               
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031d4   d002     BRA       0x31da                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031d6   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031d8   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              however. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031da   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031de   0b10     ANDLW     0x10                                                                                            
0031e2   0e04     MOVLW     0x4                                                                                             
0031e4   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0031e6   f02a                                                                                                               
0031e8   0e05     MOVLW     0x5                                                                                             
0031ea   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031ec   80d8     BSF       0xd8,0x0,0x0                                                                                    
0031ee   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0031e0   e00e     BZ        0x31fe                             && !have_precision)                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f0   e206     BC        0x31fe                                                                                          
0031f2   0e06     MOVLW     0x6                                                                                             
0031f4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031f6   e103     BNZ       0x31fe                                                                                          
0031f8   0e04     MOVLW     0x4                              precision = width;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031fa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031fc   da34     RCALL     0x3666                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031fe   d995     RCALL     0x352a                         if (precision > digit_cnt)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003200   e20a     BC        0x3216                                                                                          
003202   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003204   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
003206   ffe7                                                                                                               
003208   0e15     MOVLW     0x15                                                                                            
00320a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00320c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00320e   0e05     MOVLW     0x5                                                                                             
003210   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003212   ffdb                                                                                                               
003214   d002     BRA       0x321a                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003216   0e05     MOVLW     0x5                              precision = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003218   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              zero. */                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00321a   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00321c   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00321e   f02a                                                                                                               
003220   0e16     MOVLW     0x16                                                                                            
003222   d945     RCALL     0x34ae                                                                                          
003224   80d8     BSF       0xd8,0x0,0x0                                                                                    
003226   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003228   e214     BC        0x3252                                                                                          
0034ae   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0034b0   ffe6                                                                                                               
0034b2   0e15     MOVLW     0x15                                                                                            
0034b4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0034b6   ffe6                                                                                                               
0034b8   0e05     MOVLW     0x5                                                                                             
0034ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034bc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034be   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0034c0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034c2   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0034c4   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00322a   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00322c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00322e   ffe6                                                                                                               
003230   0e15     MOVLW     0x15                                                                                            
003232   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003234   ffe6                                                                                                               
003236   0e04     MOVLW     0x4                                                                                             
003238   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00323a   ffe6                                                                                                               
00323c   0e05     MOVLW     0x5                                                                                             
00323e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003240   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003242   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
003244   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003246   80d8     BSF       0xd8,0x0,0x0                                                                                    
003248   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
00324a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00324c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00324e   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
003250   d95f     RCALL     0x3510                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003252   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003254   50db     MOVF      0xdb,0x0,0x0                                                                                    
003256   0b01     ANDLW     0x1                                                                                             
003258   e10b     BNZ       0x3270                                                                                          
00325a   0e08     MOVLW     0x8                                                                                             
00325c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00325e   e008     BZ        0x3270                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003260   d8b2     RCALL     0x33c6                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003262   e001     BZ        0x3266                                                                                          
003264   d08d     BRA       0x3380                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003266   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003268   50db     MOVF      0xdb,0x0,0x0                                                                                    
00326a   d8be     RCALL     0x33e8                                                                                          
00326c   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00326e   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              next */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003270   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003272   50db     MOVF      0xdb,0x0,0x0                                                                                    
003274   e007     BZ        0x3284                                                                                          
003276   d988     RCALL     0x3588                           if (putc (sign_char, handle) == EOF)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003278   0e17     MOVLW     0x17                                                                                            
00327a   d9f1     RCALL     0x365e                                                                                          
00327c   e103     BNZ       0x3284                                                                                          
00327e   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003280   e101     BNZ       0x3284                                                                                          
003282   d07e     BRA       0x3380                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003284   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003286   50db     MOVF      0xdb,0x0,0x0                                                                                    
003288   e016     BZ        0x32b6                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00328a   d97e     RCALL     0x3588                             if (putc ('0', handle) == EOF)                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00328c   0e30     MOVLW     0x30                                                                                            
00328e   6ee6     MOVWF     0xe6,0x0                                                                                        
003290   d89f     RCALL     0x33d0                                                                                          
003292   e102     BNZ       0x3298                                                                                          
003294   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003296   e074     BZ        0x3380                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003298   d977     RCALL     0x3588                             if (putc (c, handle) == EOF)                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00329a   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
00329c   ffe6                                                                                                               
00329e   ec4a     CALL      0x4694,0x0                                                                                      
0032a0   f023                                                                                                               
0032a2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032a4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032a6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032a8   cff4     MOVFF     0xff4,0x2b                                                                                      
0032aa   f02b                                                                                                               
0032ac   0100     MOVLB     0x0                                                                                             
0032ae   1cf3     COMF      0xf3,0x0,0x0                                                                                    
0032b0   e102     BNZ       0x32b6                                                                                          
0032b2   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0032b4   e065     BZ        0x3380                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032b6   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032b8   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0032ba   f02a                                                                                                               
0032bc   0e16     MOVLW     0x16                                                                                            
0032be   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032c0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0032c2   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0032c4   e209     BC        0x32d8                                                                                          
0032c6   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032c8   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0032ca   ffe7                                                                                                               
0032cc   0e16     MOVLW     0x16                                                                                            
0032ce   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032d0   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0032d2   0e05     MOVLW     0x5                                                                                             
0032d4   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0032d6   ffdb                                                                                                               
0032d8   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032da   6ee6     MOVWF     0xe6,0x0                                                                                        
0032dc   0e05     MOVLW     0x5                                                                                             
0032de   d9cb     RCALL     0x3676                                                                                          
0032e0   e14f     BNZ       0x3380                                                                                          
003628   ec3a     CALL      0x2a74,0x0                                                                                      
00362a   f015                                                                                                               
00362c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00362e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003630   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003632   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003634   0900     IORLW     0x0                                                                                             
003636   0012     RETURN    0x0                                                                                             
003676   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003678   ffe6                                                                                                               
00367a   df86     RCALL     0x3588                                                                                          
00367c   ef14     GOTO      0x3628                                                                                          
00367e   f01b                                                                                                               
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032e2   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032e4   2adb     INCF      0xdb,0x1,0x0                                                                                    
0032e6   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0032e8   ffe9                                                                                                               
0032ea   0e3a     MOVLW     0x3a                                                                                            
0032ec   e301     BNC       0x32f0                                                                                          
0032ee   2adb     INCF      0xdb,0x1,0x0                                                                                    
0032f0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0032f2   ffea                                                                                                               
0032f4   0e09     MOVLW     0x9                                                                                             
0032f6   cfef     MOVFF     0xfef,0xfdb                                                                                     
0032f8   ffdb                                                                                                               
0032fa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032fc   e00e     BZ        0x331a                                                                                          
00330a   0e39     MOVLW     0x39                                                                                            
00330c   2adb     INCF      0xdb,0x1,0x0                                                                                    
00330e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003310   ffe9                                                                                                               
003312   0e3a     MOVLW     0x3a                                                                                            
003314   e3ed     BNC       0x32f0                                                                                          
003316   2adb     INCF      0xdb,0x1,0x0                                                                                    
003318   d7eb     BRA       0x32f0                                                                                          
0032fe   d944     RCALL     0x3588                           if (putc (cval, handle) == EOF)                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003300   0e09     MOVLW     0x9                                                                                             
003302   d9ad     RCALL     0x365e                                                                                          
003304   e102     BNZ       0x330a                                                                                          
003306   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003308   e03b     BZ        0x3380                                                                                          
00365e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003660   ffe6                                                                                                               
003662   efe8     GOTO      0x33d0                                                                                          
003664   f019                                                                                                               
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the field */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00331a   d855     RCALL     0x33c6                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00331c   e131     BNZ       0x3380                                                                                          
0033c6   0e20     MOVLW     0x20                                                                                            
0033c8   6ee6     MOVWF     0xe6,0x0                                                                                        
0033ca   0e08     MOVLW     0x8                                                                                             
0033cc   ef3b     GOTO      0x3676                                                                                          
0033ce   f01b                                                                                                               
003588   0efc     MOVLW     0xfc                                                                                            
00358a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00358c   ffe6                                                                                                               
00358e   0efd     MOVLW     0xfd                                                                                            
003590   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003592   ffe6                                                                                                               
003594   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00331e   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003320   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003322   ffe6                                                                                                               
003324   0e08     MOVLW     0x8                                                                                             
003326   d8c3     RCALL     0x34ae                                                                                          
003328   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00332a   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
00332c   d85d     RCALL     0x33e8                                                                                          
0033e8   6e2a     MOVWF     0x2a,0x0                                                                                        
0033ea   6a2b     CLRF      0x2b,0x0                                                                                        
0033ec   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0033ee   0f01     ADDLW     0x1                                                                                             
0033f0   d94d     RCALL     0x368c                                                                                          
0033f2   502a     MOVF      0x2a,0x0,0x0                                                                                    
0033f4   26ee     ADDWF     0xee,0x1,0x0                                                                                    
0033f6   502b     MOVF      0x2b,0x0,0x0                                                                                    
0033f8   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
0033fa   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00332e   d02e     BRA       0x338c                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003330   0e07     MOVLW     0x7                          switch (size)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003332   50db     MOVF      0xdb,0x0,0x0                                                                                    
003334   0a03     XORLW     0x3                                                                                             
003336   e01c     BZ        0x3370                                                                                          
003338   0a01     XORLW     0x1                                                                                             
00333a   e014     BZ        0x3364                                                                                          
00333c   0a03     XORLW     0x3                                                                                             
00333e   e007     BZ        0x334e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00334e   d8f5     RCALL     0x353a                           *(long *) va_arg (ap, long *) = count;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003350   6a2f     CLRF      0x2f,0x0                                                                                        
003352   ae2d     BTFSS     0x2d,0x7,0x0                                                                                    
003354   d002     BRA       0x335a                                                                                          
003356   682e     SETF      0x2e,0x0                                                                                        
003358   682f     SETF      0x2f,0x0                                                                                        
00335a   d82c     RCALL     0x33b4                                                                                          
00335c   d8bc     RCALL     0x34d6                                                                                          
00335e   c02f     MOVFF     0x2f,0xfee                                                                                      
003360   ffee                                                                                                               
0034d6   50ee     MOVF      0xee,0x0,0x0                                                                                    
0034d8   cfef     MOVFF     0xfef,0xfea                                                                                     
0034da   ffea                                                                                                               
0034dc   6ee9     MOVWF     0xe9,0x0                                                                                        
0034de   c02c     MOVFF     0x2c,0xfee                                                                                      
0034e0   ffee                                                                                                               
0034e2   c02d     MOVFF     0x2d,0xfee                                                                                      
0034e4   ffee                                                                                                               
0034e6   c02e     MOVFF     0x2e,0xfee                                                                                      
0034e8   ffee                                                                                                               
0034ea   0012     RETURN    0x0                                                                                             
00353a   0e01     MOVLW     0x1                                                                                             
00353c   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00353e   f02c                                                                                                               
003540   0e02     MOVLW     0x2                                                                                             
003542   cfdb     MOVFF     0xfdb,0x2d                                                                                      
003544   f02d                                                                                                               
003546   6a2e     CLRF      0x2e,0x0                                                                                        
003548   0012     RETURN    0x0                                                                                             
003362   d014     BRA       0x338c                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003364   d8ea     RCALL     0x353a                           *(short long *) va_arg (ap, short long *) = count;             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003366   be2d     BTFSC     0x2d,0x7,0x0                                                                                    
003368   682e     SETF      0x2e,0x0                                                                                        
00336a   d824     RCALL     0x33b4                                                                                          
00336c   d8b4     RCALL     0x34d6                                                                                          
00336e   d00e     BRA       0x338c                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003370   d963     RCALL     0x3638                           *(signed char *) va_arg (ap, signed char *) = count;           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003372   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003374   ffef                                                                                                               
003376   d00a     BRA       0x338c                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           default:                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003340   d97b     RCALL     0x3638                           *(int *) va_arg (ap, int *) = count;                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003342   cfdb     MOVFF     0xfdb,0xfee                                                                                     
003344   ffee                                                                                                               
003346   0e02     MOVLW     0x2                                                                                             
003348   cfdb     MOVFF     0xfdb,0xfed                                                                                     
00334a   ffed                                                                                                               
003638   debd     RCALL     0x33b4                                                                                          
00363a   50ee     MOVF      0xee,0x0,0x0                                                                                    
00363c   cfef     MOVFF     0xfef,0xfea                                                                                     
00363e   ffea                                                                                                               
003640   6ee9     MOVWF     0xe9,0x0                                                                                        
003642   0e01     MOVLW     0x1                                                                                             
003644   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00334c   d01f     BRA       0x338c                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       default:                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                 else                                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003378   d97b     RCALL     0x3670                   if (putc (c, handle) == EOF)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00337a   e105     BNZ       0x3386                                                                                          
00337c   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00337e   e103     BNZ       0x3386                                                                                          
0033d0   ec4a     CALL      0x4694,0x0                                                                                      
0033d2   f023                                                                                                               
0033d4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033d8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033da   cff3     MOVFF     0xff3,0x2a                                                                                      
0033dc   f02a                                                                                                               
0033de   cff4     MOVFF     0xff4,0x2b                                                                                      
0033e0   f02b                                                                                                               
0033e2   0100     MOVLB     0x0                                                                                             
0033e4   1cf3     COMF      0xf3,0x0,0x0                                                                                    
0033e6   0012     RETURN    0x0                                                                                             
003616   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
003618   ffe6                                                                                                               
00361a   efe8     GOTO      0x33d0                                                                                          
00361c   f019                                                                                                               
003670   df8b     RCALL     0x3588                                                                                          
003672   ef0b     GOTO      0x3616                                                                                          
003674   f01b                                                                                                               
003380   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003382   68f4     SETF      0xf4,0x0                                                                                        
003384   d010     BRA       0x33a6                                                                                          
003386   d8fc     RCALL     0x3580                   ++count;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003388   e301     BNC       0x338c                                                                                          
00338a   2adb     INCF      0xdb,0x1,0x0                                                                                    
003580   0e01     MOVLW     0x1                                                                                             
003582   2adb     INCF      0xdb,0x1,0x0                                                                                    
003584   0e02     MOVLW     0x2                                                                                             
003586   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003392   0e01     MOVLW     0x1              return count;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003394   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003396   f02a                                                                                                               
003398   0e02     MOVLW     0x2                                                                                             
00339a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00339c   f02b                                                                                                               
00339e   c02a     MOVFF     0x2a,0xff3                                                                                      
0033a0   fff3                                                                                                               
0033a2   c02b     MOVFF     0x2b,0xff4                                                                                      
0033a4   fff4                                                                                                               
0033a6   0e3b     MOVLW     0x3b           }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0033a8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0033aa   e202     BC        0x33b0                                                                                          
0033ac   6ae1     CLRF      0xe1,0x0                                                                                        
0033ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033b0   6ee1     MOVWF     0xe1,0x0                                                                                        
0033b2   d0cb     BRA       0x354a                                                                                          
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***                                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***/                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               _asm                                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // REM = 0                                                                   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00483a   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00483c   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00483e   6a19     CLRF      0x19,0x0           clrf __REMB2, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004840   6a18     CLRF      0x18,0x0           clrf __REMB3, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004842   0e20     MOVLW     0x20               movlw 32                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004844   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // Clear the carry                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004846   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           loop:                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004848   361c     RLCF      0x1c,0x1,0x0   	rlcf __AARGB3, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00484a   361d     RLCF      0x1d,0x1,0x0   	rlcf __AARGB2, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00484c   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00484e   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004850   3618     RLCF      0x18,0x1,0x0   	rlcf __REMB3, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004852   3619     RLCF      0x19,0x1,0x0   	rlcf __REMB2, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004854   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004856   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004858   5021     MOVF      0x21,0x0,0x0   	movf __BARGB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00485a   5c18     SUBWF     0x18,0x0,0x0   	subwf __REMB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00485c   5022     MOVF      0x22,0x0,0x0   	movf __BARGB2, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00485e   5819     SUBWFB    0x19,0x0,0x0   	subwfb __REMB2, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004860   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004862   581a     SUBWFB    0x1a,0x0,0x0   	subwfb __REMB1, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004864   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004866   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004868   e309     BNC       0x487c         	bnc _false                                                                      C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //{                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00486a   5021     MOVF      0x21,0x0,0x0   	    movf __BARGB3, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00486c   5e18     SUBWF     0x18,0x1,0x0   	    subwf __REMB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00486e   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004870   5a19     SUBWFB    0x19,0x1,0x0   	    subwfb __REMB2, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004872   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004874   5a1a     SUBWFB    0x1a,0x1,0x0   	    subwfb __REMB1, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004876   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004878   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00487a   2a1c     INCF      0x1c,0x1,0x0   	    incf __AARGB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //}                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           _false:                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00487c   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00487e   d7e4     BRA       0x4848             bra loop                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             _endasm                                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004880   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004436   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004438   f029                                                                                                               
00443a   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00443c   f028                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00443e   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004440   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004442   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004444   f01d                                                                                                               
004446   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004448   f01c                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00444a   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00444c   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00444e   cff4     MOVFF     0xff4,0x1f     		MOVFF	PRODH,__AARGB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004450   f01f                                                                                                               
004452   cff3     MOVFF     0xff3,0x1e     		MOVFF	PRODL,__AARGB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004454   f01e                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004456   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004458   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00445a   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00445c   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00445e   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004460   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004462   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004464   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004466   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004468   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446a   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446c   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00446e   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004470   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004472   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004474   ae24     BTFSS     0x24,0x7,0x0   		BTFSS	__BARGB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004476   ef41     GOTO      0x4482         		GOTO	TSIGN1616A                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004478   f022                                                                                                               
00447a   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00447c   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00447e   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004480   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004482   ae29     BTFSS     0x29,0x7,0x0   		BTFSS	__TEMPB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004484   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004486   5023     MOVF      0x23,0x0,0x0   		MOVF	__BARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004488   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448a   5024     MOVF      0x24,0x0,0x0   		MOVF	__BARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448c   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00448e   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * don't.                                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            */                                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB3, __BARGB3;                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB7;                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                             _asm                                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004718   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
00471a   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // result bytes                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
00471c   cff3     MOVFF     0xff3,0x18         movff PRODL, __AARGB7                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
00471e   f018                                                                                                               
004720   cff4     MOVFF     0xff4,0x19         movff PRODH, __AARGB7 + 1                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
004722   f019                                                                                                               
                                               // W still contains AARGB3                                                   C:\MCC18\src\TRADIT~1\math\fxm3232.c
004724   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004726   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004728   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00472a   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00472c   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
00472e   6e1a     MOVWF     0x1a,0x0           movwf __AARGB7 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
004730   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
004732   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004734   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004736   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004738   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00473a   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
00473c   6e1b     MOVWF     0x1b,0x0           movwf __AARGB7 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
00473e   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
004740   0224     MULWF     0x24,0x0           mulwf __BARGB3 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004742   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004744   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004746   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004748   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
00474a   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00474c   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00474e   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004750   221a     ADDWFC    0x1a,0x1,0x0       addwfc __AARGB7 + 2, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
004752   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004754   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004756   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004758   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
00475a   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00475c   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00475e   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004760   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004762   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004764   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004766   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004768   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that term.                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
00476a   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00476c   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
00476e   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004770   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004772   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004774   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004776   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004778   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00477a   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00477c   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // those terms.                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
00477e   501f     MOVF      0x1f,0x0,0x0       movf __AARGB3 + 3, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004780   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
004782   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004784   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               _endasm;                                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004786   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           isdigit                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004816   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004818   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00481a   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00481c   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
00481e   6ee9     MOVWF     0xe9,0x0                                                                                        
004820   0eff     MOVLW     0xff                                                                                            
004822   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
004824   6eea     MOVWF     0xea,0x0                                                                                        
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004826   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004828   d007     BRA       0x4838                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00482a   0e2f     MOVLW     0x2f                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00482c   64ef     CPFSGT    0xef,0x0                                                                                        
00482e   d004     BRA       0x4838                                                                                          
004830   0e3a     MOVLW     0x3a                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004832   60ef     CPFSLT    0xef,0x0                                                                                        
004834   d001     BRA       0x4838                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004836   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004838   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
004694   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\MCC18\src\TRADIT~1\stdclib\putc.c
004696   ffe6                                                                                                               
004698   cfda     MOVFF     0xfda,0xfe6                                                                                     
00469a   ffe6                                                                                                               
00469c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00469e   ffd9                                                                                                               
0046a0   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0046a2   ffda                                                                                                               
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046a4   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046a6   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0046a8   f02a                                                                                                               
0046aa   0efc     MOVLW     0xfc                                                                                            
0046ac   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0046ae   f02b                                                                                                               
0046b0   0100     MOVLB     0x0                                                                                             
0046b2   0e80     MOVLW     0x80                                                                                            
0046b4   142b     ANDWF     0x2b,0x0,0x0                                                                                    
0046b6   e11a     BNZ       0x46ec                                                                                          
0046b8   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046ba   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0046bc   ffe9                                                                                                               
0046be   0efc     MOVLW     0xfc                                                                                            
0046c0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0046c2   ffea                                                                                                               
0046c4   cfee     MOVFF     0xfee,0xff3                                                                                     
0046c6   fff3                                                                                                               
0046c8   cfed     MOVFF     0xfed,0xff4                                                                                     
0046ca   fff4                                                                                                               
0046cc   2aee     INCF      0xee,0x1,0x0                                                                                    
0046ce   0e00     MOVLW     0x0                                                                                             
0046d0   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0046d2   cff3     MOVFF     0xff3,0xfe9                                                                                     
0046d4   ffe9                                                                                                               
0046d6   cff4     MOVFF     0xff4,0xfea                                                                                     
0046d8   ffea                                                                                                               
0046da   0efd     MOVLW     0xfd                                                                                            
0046dc   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0046de   ffef                                                                                                               
0046e0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0046e2   6a2b     CLRF      0x2b,0x0                                                                                        
0046e4   6ef3     MOVWF     0xf3,0x0                                                                                        
0046e6   c02b     MOVFF     0x2b,0xff4                                                                                      
0046e8   fff4                                                                                                               
0046ea   d010     BRA       0x470c                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046ec   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046ee   50db     MOVF      0xdb,0x0,0x0                                                                                    
0046f0   08fe     SUBLW     0xfe                                                                                            
0046f2   e106     BNZ       0x4700                                                                                          
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046f4   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046f6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0046f8   ffe6                                                                                                               
0046fa   ec7c     CALL      0x48f8,0x0                                                                                      
0046fc   f024                                                                                                               
0046fe   d005     BRA       0x470a                                                                                          
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             else                                                                           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. */                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
004700   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\MCC18\src\TRADIT~1\stdclib\putc.c
004702   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004704   ffe6                                                                                                               
004706   ecb8     CALL      0xf70,0x0                                                                                       
004708   f007                                                                                                               
00470a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
00470c   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
00470e   cfe5     MOVFF     0xfe5,0xfda                                                                                     
004710   ffda                                                                                                               
004712   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004714   ffd9                                                                                                               
004716   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F4550.INC
                                                                                                                            C:\MCC18\MPASM\p18F4550.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F4550.INC
                                           ;  MPASM PIC18F4550 processor include                                            C:\MCC18\MPASM\p18F4550.INC
                                           ;                                                                                C:\MCC18\MPASM\p18F4550.INC
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved             C:\MCC18\MPASM\p18F4550.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F4550.INC
                                                                                                                            C:\MCC18\MPASM\p18F4550.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F4550.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1230                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1231                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1330                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1331                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048f8   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048fa   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048fc   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048fe   d004     BRA       0x4908                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004900   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004902   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004904   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004906   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004908   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00490a   d7fe     BRA       0x4908                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00490c   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00490e   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004910   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004912   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           strlen                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             global strlen                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004788   0efe     MOVLW     0xfe                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00478a   cfe3     MOVFF     0xfe3,0xfe9                                                                                     
00478c   ffe9                                                                                                               
00478e   0eff     MOVLW     0xff                                                                                            
004790   cfe3     MOVFF     0xfe3,0xfea                                                                                     
004792   ffea                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004794   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004796   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004798   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00479a   e003     BZ        0x47a2                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00479c   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00479e   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0047a0   d7fb     BRA       0x4798                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0047a2   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.4 2006/02/04 00:06:53 nairnj Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             extern __AARGB2                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047a4   0eff     MOVLW     0xff                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047a6   cfe3     MOVFF     0xfe3,0xff8                                                                                     
0047a8   fff8                                                                                                               
0047aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0047ac   0eff     MOVLW     0xff                                                                                            
0047ae   cfe3     MOVFF     0xfe3,0xff7                                                                                     
0047b0   fff7                                                                                                               
0047b2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0047b4   0eff     MOVLW     0xff                                                                                            
0047b6   cfe3     MOVFF     0xfe3,0xff6                                                                                     
0047b8   fff6                                                                                                               
0047ba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047bc   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047be   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047c0   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047c2   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047c4   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047c6   e009     BZ        0x47da                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047c8   0efd     MOVLW     0xfd                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047ca   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0047cc   e105     BNZ       0x47d8                                                                                          
0047ce   0efe     MOVLW     0xfe                                                                                            
0047d0   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0047d2   e102     BNZ       0x47d8                                                                                          
0047d4   0eff     MOVLW     0xff                                                                                            
0047d6   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0047d8   d7f4     BRA       0x47c2                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047da   0efd     MOVLW     0xfd                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0047dc   cfe3     MOVFF     0xfe3,0x1d                                                                                      
0047de   f01d                                                                                                               
0047e0   0efe     MOVLW     0xfe                                                                                            
0047e2   cfe3     MOVFF     0xfe3,0x1e                                                                                      
0047e4   f01e                                                                                                               
0047e6   0eff     MOVLW     0xff                                                                                            
0047e8   cfe3     MOVFF     0xfe3,0x1f                                                                                      
0047ea   f01f                                                                                                               
0047ec   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
