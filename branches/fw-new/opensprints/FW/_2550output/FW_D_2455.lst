MP2COD 4.16, COFF to COD File Converter
Copyright (c) 2008 Microchip Technology Inc.
Listing File Generated: Tue Apr 01 13:31:47 2008


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /*********************************************************************           O:\main.c
                                            *                                                                               O:\main.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\main.c
                                            *                                                                               O:\main.c
                                            *********************************************************************           O:\main.c
                                            * FileName:        main.c                                                       O:\main.c
                                            * Dependencies:    See INCLUDES section below                                   O:\main.c
                                            * Processor:       PIC18                                                        O:\main.c
                                            * Compiler:        C18 2.30.01+                                                 O:\main.c
                                            * Company:         Microchip Technology, Inc.                                   O:\main.c
                                            *                                                                               O:\main.c
                                            * Software License Agreement                                                    O:\main.c
                                            *                                                                               O:\main.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\main.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\main.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\main.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\main.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\main.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\main.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\main.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\main.c
                                            * civil liability for the breach of the terms and conditions of this            O:\main.c
                                            * license.                                                                      O:\main.c
                                            *                                                                               O:\main.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\main.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\main.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\main.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\main.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\main.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\main.c
                                            *                                                                               O:\main.c
                                            * Author               Date        Comment                                      O:\main.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\main.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    O:\main.c
                                            ********************************************************************/           O:\main.c
                                                                                                                            O:\main.c
                                           /** I N C L U D E S **********************************************************/  O:\main.c
                                           #include <p18cxxx.h>                                                             O:\main.c
                                           #include "system\typedefs.h"                        // Required                  O:\main.c
                                           #include "system\usb\usb.h"                         // Required                  O:\main.c
                                           #include "io_cfg.h"                                 // Required                  O:\main.c
                                                                                                                            O:\main.c
                                           #include "system\usb\usb_compile_time_validation.h" // Optional                  O:\main.c
                                           #include "user\user.h"                              // Modifiable                O:\main.c
                                                                                                                            O:\main.c
                                           /** V A R I A B L E S ********************************************************/  O:\main.c
                                           #pragma udata                                                                    O:\main.c
                                                                                                                            O:\main.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\main.c
                                           static void InitializeSystem(void);                                              O:\main.c
                                           void USBTasks(void);                                                             O:\main.c
                                                                                                                            O:\main.c
                                           #pragma code high_vector_section = 0x000808                                      O:\main.c
                                           void high_vector (void)                                                          O:\main.c
                                           {                                                                                O:\main.c
000808   ef09     GOTO      0xa12              _asm goto high_ISR _endasm                                                   O:\main.c
00080a   f005                                                                                                               
00080c   0012     RETURN    0x0            }                                                                                O:\main.c
                                           #pragma code low_vector_section = 0x000818                                       O:\main.c
                                           void low_vector (void)                                                           O:\main.c
                                           {                                                                                O:\main.c
000818   eff6     GOTO      0x9ec              _asm goto low_ISR _endasm                                                    O:\main.c
00081a   f004                                                                                                               
00081c   0012     RETURN    0x0            }                                                                                O:\main.c
                                           #pragma code                                                                     O:\main.c
                                                                                                                            O:\main.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\main.c
                                           #pragma code                                                                     O:\main.c
                                           /******************************************************************************  O:\main.c
                                            * Function:        void main(void)                                              O:\main.c
                                            *                                                                               O:\main.c
                                            * PreCondition:    None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Input:           None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Output:          None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Side Effects:    None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Overview:        Main program entry point.                                    O:\main.c
                                            *                                                                               O:\main.c
                                            * Note:            None                                                         O:\main.c
                                            *****************************************************************************/  O:\main.c
                                           void main(void)                                                                  O:\main.c
                                           {                                                                                O:\main.c
003620   d805     RCALL     0x362c             InitializeSystem();                                                          O:\main.c
003628   d7fc     BRA       0x3622         	while(1)                                                                        O:\main.c
                                               {                                                                            O:\main.c
003622   d811     RCALL     0x3646                 USBTasks();         // USB Tasks                                         O:\main.c
003624   ec17     CALL      0xc2e,0x0              ProcessIO();        // See user.c and user.h                             O:\main.c
003626   f006                                                                                                               
                                               }//end while                                                                 O:\main.c
00362a   0012     RETURN    0x0            }//end main                                                                      O:\main.c
                                                                                                                            O:\main.c
                                           /******************************************************************************  O:\main.c
                                            * Function:        static void InitializeSystem(void)                           O:\main.c
                                            *                                                                               O:\main.c
                                            * PreCondition:    None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Input:           None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Output:          None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Side Effects:    None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Overview:        InitializeSystem is a centralize initialization routine.     O:\main.c
                                            *                  All required USB initialization routines are called from     O:\main.c
                                            *                  here.                                                        O:\main.c
                                            *                                                                               O:\main.c
                                            *                  User application initialization routine should also be       O:\main.c
                                            *                  called from here.                                            O:\main.c
                                            *                                                                               O:\main.c
                                            * Note:            None                                                         O:\main.c
                                            *****************************************************************************/  O:\main.c
                                           static void InitializeSystem(void)                                               O:\main.c
                                           {                                                                                O:\main.c
00362c   0e0f     MOVLW     0xf                ADCON1 |= 0x0F;                 // Default all pins to digital               O:\main.c
00362e   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                                                                                                            O:\main.c
003630   0e14     MOVLW     0x14               mInitializeUSBDriver();         // See usbdrv.h                              O:\main.c
003632   6e6f     MOVWF     0x6f,0x0                                                                                        
003634   0101     MOVLB     0x1                                                                                             
003636   6bfa     CLRF      0xfa,0x1                                                                                        
003638   0101     MOVLB     0x1                                                                                             
00363a   6bfb     CLRF      0xfb,0x1                                                                                        
00363c   0101     MOVLB     0x1                                                                                             
00363e   6bfc     CLRF      0xfc,0x1                                                                                        
                                                                                                                            O:\main.c
003640   ec92     CALL      0xb24,0x0          UserInit();                     // See user.c & .h                           O:\main.c
003642   f005                                                                                                               
                                                                                                                            O:\main.c
003644   0012     RETURN    0x0            }//end InitializeSystem                                                          O:\main.c
                                                                                                                            O:\main.c
                                           /******************************************************************************  O:\main.c
                                            * Function:        void USBTasks(void)                                          O:\main.c
                                            *                                                                               O:\main.c
                                            * PreCondition:    InitializeSystem has been called.                            O:\main.c
                                            *                                                                               O:\main.c
                                            * Input:           None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Output:          None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Side Effects:    None                                                         O:\main.c
                                            *                                                                               O:\main.c
                                            * Overview:        Service loop for USB tasks.                                  O:\main.c
                                            *                                                                               O:\main.c
                                            * Note:            None                                                         O:\main.c
                                            *****************************************************************************/  O:\main.c
                                           void USBTasks(void)                                                              O:\main.c
                                           {                                                                                O:\main.c
                                               /*                                                                           O:\main.c
                                                * Servicing Hardware                                                        O:\main.c
                                                */                                                                          O:\main.c
003646   ec01     CALL      0x2e02,0x0         USBCheckBusStatus();                    // Must use polling method           O:\main.c
003648   f017                                                                                                               
00364a   be6f     BTFSC     0x6f,0x7,0x0       if(UCFGbits.UTEYE!=1)                                                        O:\main.c
00364c   d002     BRA       0x3652                                                                                          
00364e   ec21     CALL      0x2e42,0x0             USBDriverService();                 // Interrupt or polling method       O:\main.c
003650   f017                                                                                                               
                                                                                                                            O:\main.c
                                               #if defined(USB_USE_CDC)                                                     O:\main.c
003652   ec4b     CALL      0x2696,0x0         CDCTxService();                                                              O:\main.c
003654   f013                                                                                                               
                                               #endif                                                                       O:\main.c
                                                                                                                            O:\main.c
003656   0012     RETURN    0x0            }// end USBTasks                                                                 O:\main.c
                                                                                                                            O:\main.c
                                           /** EOF main.c ***************************************************************/  O:\main.c
                                           /*********************************************************************           O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *********************************************************************           O:\system\usb\usbmmap.c
                                            * FileName:        usbmmap.c                                                    O:\system\usb\usbmmap.c
                                            * Dependencies:    See INCLUDES section below                                   O:\system\usb\usbmmap.c
                                            * Processor:       PIC18                                                        O:\system\usb\usbmmap.c
                                            * Compiler:        C18 2.30.01+                                                 O:\system\usb\usbmmap.c
                                            * Company:         Microchip Technology, Inc.                                   O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Software License Agreement                                                    O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\system\usb\usbmmap.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\system\usb\usbmmap.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\system\usb\usbmmap.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\system\usb\usbmmap.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\system\usb\usbmmap.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\system\usb\usbmmap.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\system\usb\usbmmap.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\system\usb\usbmmap.c
                                            * civil liability for the breach of the terms and conditions of this            O:\system\usb\usbmmap.c
                                            * license.                                                                      O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\system\usb\usbmmap.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\system\usb\usbmmap.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\system\usb\usbmmap.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\system\usb\usbmmap.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\system\usb\usbmmap.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Author               Date        Comment                                      O:\system\usb\usbmmap.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\system\usb\usbmmap.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    O:\system\usb\usbmmap.c
                                            ********************************************************************/           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /******************************************************************************  O:\system\usb\usbmmap.c
                                            * -usbmmap.c-                                                                   O:\system\usb\usbmmap.c
                                            * USB Memory Map                                                                O:\system\usb\usbmmap.c
                                            * This file is the USB memory manager; it serves as a compile-time memory       O:\system\usb\usbmmap.c
                                            * allocator for the USB endpoints. It uses the compile time options passed      O:\system\usb\usbmmap.c
                                            * from usbcfg.h to instantiate endpoints and endpoint buffer.                   O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Each endpoint requires to have a set of Buffer Descriptor registers(BDT).     O:\system\usb\usbmmap.c
                                            * A BDT is 4-byte long and has a specific RAM location for each endpoint.       O:\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 out is located at address 0x400 to 0x403.              O:\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 in is located at address 0x404 to 0x407.               O:\system\usb\usbmmap.c
                                            * The BDT for endpoint 1 out is located at address 0x408 to 0x40B.              O:\system\usb\usbmmap.c
                                            * and so on... The above allocation assumes the Ping-Pong Buffer Mode 0 is      O:\system\usb\usbmmap.c
                                            * used. These locations are already hard-wired in the silicon. The point        O:\system\usb\usbmmap.c
                                            * of doing instantiation, i.e. volatile far BDT ep0Bo;, is to provide the       O:\system\usb\usbmmap.c
                                            * C compiler a way to address each variable directly. This is very important    O:\system\usb\usbmmap.c
                                            * because when a register can be accessed directly, it saves execution time     O:\system\usb\usbmmap.c
                                            * and reduces program size.                                                     O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Endpoints are defined using the endpoint number and the direction             O:\system\usb\usbmmap.c
                                            * of transfer. For simplicity, usbmmap.c only uses the endpoint number          O:\system\usb\usbmmap.c
                                            * in the BDT register allocation scheme. This means if the usbcfg.h states      O:\system\usb\usbmmap.c
                                            * that the MAX_EP_NUMBER is number 1, then four BDTs will be                    O:\system\usb\usbmmap.c
                                            * instantiated: one each for endpoint0 in and endpoint0 out, which must         O:\system\usb\usbmmap.c
                                            * always be instantiated for control transfer by default, and one each sets     O:\system\usb\usbmmap.c
                                            * for endpoint1 in and endpoint1 out. The naming convention for instantiating   O:\system\usb\usbmmap.c
                                            * BDT is                                                                        O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * ep<#>B<d>                                                                     O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * where # is the endpoint number, and d is the direction of                     O:\system\usb\usbmmap.c
                                            * transfer, which could be either <i> or <o>.                                   O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The USB memory manager uses MAX_EP_NUMBER, as defined in usbcfg.h, to define  O:\system\usb\usbmmap.c
                                            * the endpoints to be instantiated. This represents the highest endpoint        O:\system\usb\usbmmap.c
                                            * number to be allocated, not how many endpoints are used. Since the BDTs for   O:\system\usb\usbmmap.c
                                            * endpoints have hardware-assigned addresses in Bank 4, setting this value too  O:\system\usb\usbmmap.c
                                            * high may lead to inefficient use of data RAM. For example, if an application  O:\system\usb\usbmmap.c
                                            * uses only endpoints EP0 and EP4, then the MAX_EP_NUMBER is 4, and not 2.      O:\system\usb\usbmmap.c
                                            * The in-between endpoint BDTs in this example (EP1, EP2, and EP3) go unused,   O:\system\usb\usbmmap.c
                                            * and the 24 bytes of memory associated with them are wasted. It does not make  O:\system\usb\usbmmap.c
                                            * much sense to skip endpoints, but the final decision lies with the user.      O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The next step is to assign the instantiated BDTs to different                 O:\system\usb\usbmmap.c
                                            * USB functions. The firmware framework fundamentally assumes that every USB    O:\system\usb\usbmmap.c
                                            * function should know which endpoint it is using, i.e., the default control    O:\system\usb\usbmmap.c
                                            * transfer should know that it is using endpoint 0 in and endpoint 0 out.       O:\system\usb\usbmmap.c
                                            * A HID class can choose which endpoint it wants to use, but once chosen, it    O:\system\usb\usbmmap.c
                                            * should always know the number of the endpoint.                                O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The assignment of endpoints to USB functions is managed centrally             O:\system\usb\usbmmap.c
                                            * in usbcfg.h. This helps prevent the mistake of having more                    O:\system\usb\usbmmap.c
                                            * than one USB function using the same endpoint. The "Endpoint Allocation"      O:\system\usb\usbmmap.c
                                            * section in usbcfg.h provides examples for how to map USB endpoints to USB     O:\system\usb\usbmmap.c
                                            * functions.                                                                    O:\system\usb\usbmmap.c
                                            * Quite a few things can be mapped in that section. There is no                 O:\system\usb\usbmmap.c
                                            * one correct way to do the mapping and the user has the choice to              O:\system\usb\usbmmap.c
                                            * choose a method that is most suitable to the application.                     O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Typically, however, a user will want to map the following for a given         O:\system\usb\usbmmap.c
                                            * USB interface function:                                                       O:\system\usb\usbmmap.c
                                            * 1. The USB interface ID                                                       O:\system\usb\usbmmap.c
                                            * 2. The endpoint control registers (UEPn)                                      O:\system\usb\usbmmap.c
                                            * 3. The BDT registers (ep<#>B<d>)                                              O:\system\usb\usbmmap.c
                                            * 4. The endpoint size                                                          O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Example: Assume a USB device class "foo", which uses one out endpoint         O:\system\usb\usbmmap.c
                                            *          of size 64-byte and one in endpoint of size 64-byte, then:           O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * #define FOO_INTF_ID          0x00                                             O:\system\usb\usbmmap.c
                                            * #define FOO_UEP              UEP1                                             O:\system\usb\usbmmap.c
                                            * #define FOO_BD_OUT           ep1Bo                                            O:\system\usb\usbmmap.c
                                            * #define FOO_BD_IN            ep1Bi                                            O:\system\usb\usbmmap.c
                                            * #define FOO_EP_SIZE          64                                               O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The mapping above has chosen class "foo" to use endpoint 1.                   O:\system\usb\usbmmap.c
                                            * The names are arbitrary and can be anything other than FOO_??????.            O:\system\usb\usbmmap.c
                                            * For abstraction, the code for class "foo" should use the abstract             O:\system\usb\usbmmap.c
                                            * definitions of FOO_BD_OUT,FOO_BD_IN, and not ep1Bo or ep1Bi.                  O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Note that the endpoint size defined in the usbcfg.h file is again             O:\system\usb\usbmmap.c
                                            * used in the usbmmap.c file. This shows that the relationship between          O:\system\usb\usbmmap.c
                                            * the two files are tightly related.                                            O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The endpoint buffer for each USB function must be located in the              O:\system\usb\usbmmap.c
                                            * dual-port RAM area and has to come after all the BDTs have been               O:\system\usb\usbmmap.c
                                            * instantiated. An example declaration is:                                      O:\system\usb\usbmmap.c
                                            * volatile far unsigned char[FOO_EP_SIZE] data;                                 O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * The 'volatile' keyword tells the compiler not to perform any code             O:\system\usb\usbmmap.c
                                            * optimization on this variable because its content could be modified           O:\system\usb\usbmmap.c
                                            * by the hardware. The 'far' keyword tells the compiler that this variable      O:\system\usb\usbmmap.c
                                            * is not located in the Access RAM area (0x000 - 0x05F).                        O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * For the variable to be globally accessible by other files, it should be       O:\system\usb\usbmmap.c
                                            * declared in the header file usbmmap.h as an extern definition, such as        O:\system\usb\usbmmap.c
                                            * extern volatile far unsigned char[FOO_EP_SIZE] data;                          O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Conclusion:                                                                   O:\system\usb\usbmmap.c
                                            * In a short summary, the dependencies between usbcfg and usbmmap can           O:\system\usb\usbmmap.c
                                            * be shown as:                                                                  O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * usbcfg[MAX_EP_NUMBER] -> usbmmap                                              O:\system\usb\usbmmap.c
                                            * usbmmap[ep<#>B<d>] -> usbcfg                                                  O:\system\usb\usbmmap.c
                                            * usbcfg[EP size] -> usbmmap                                                    O:\system\usb\usbmmap.c
                                            * usbcfg[abstract ep definitions] -> usb9/hid/cdc/etc class code                O:\system\usb\usbmmap.c
                                            * usbmmap[endpoint buffer variable] -> usb9/hid/cdc/etc class code              O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * Data mapping provides a means for direct addressing of BDT and endpoint       O:\system\usb\usbmmap.c
                                            * buffer. This means less usage of pointers, which equates to a faster and      O:\system\usb\usbmmap.c
                                            * smaller program code.                                                         O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *****************************************************************************/  O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /** I N C L U D E S **********************************************************/  O:\system\usb\usbmmap.c
                                           #include "system\typedefs.h"                                                     O:\system\usb\usbmmap.c
                                           #include "system\usb\usb.h"                                                      O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /** U S B  G L O B A L  V A R I A B L E S ************************************/  O:\system\usb\usbmmap.c
                                           #pragma udata                                                                    O:\system\usb\usbmmap.c
                                           byte usb_device_state;          // Device States: DETACHED, ATTACHED, ...        O:\system\usb\usbmmap.c
                                           USB_DEVICE_STATUS usb_stat;     // Global USB flags                              O:\system\usb\usbmmap.c
                                           byte usb_active_cfg;            // Value of current configuration                O:\system\usb\usbmmap.c
                                           byte usb_alt_intf[MAX_NUM_INT]; // Array to keep track of the current alternate  O:\system\usb\usbmmap.c
                                                                           // setting for each interface ID                 O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /** U S B  F I X E D  L O C A T I O N  V A R I A B L E S *********************/  O:\system\usb\usbmmap.c
                                           #pragma udata usbram4=0x400     //See Linker Script,usb4:0x400-0x4FF(256-byte)   O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /******************************************************************************  O:\system\usb\usbmmap.c
                                            * Section A: Buffer Descriptor Table                                            O:\system\usb\usbmmap.c
                                            * - 0x400 - 0x4FF(max)                                                          O:\system\usb\usbmmap.c
                                            * - MAX_EP_NUMBER is defined in autofiles\usbcfg.h                              O:\system\usb\usbmmap.c
                                            * - BDT data type is defined in system\usb\usbmmap.h                            O:\system\usb\usbmmap.c
                                            *****************************************************************************/  O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(0 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep0Bo;         //Endpoint #0 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep0Bi;         //Endpoint #0 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(1 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep1Bo;         //Endpoint #1 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep1Bi;         //Endpoint #1 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(2 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep2Bo;         //Endpoint #2 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep2Bi;         //Endpoint #2 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(3 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep3Bo;         //Endpoint #3 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep3Bi;         //Endpoint #3 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(4 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep4Bo;         //Endpoint #4 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep4Bi;         //Endpoint #4 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(5 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep5Bo;         //Endpoint #5 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep5Bi;         //Endpoint #5 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(6 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep6Bo;         //Endpoint #6 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep6Bi;         //Endpoint #6 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(7 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep7Bo;         //Endpoint #7 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep7Bi;         //Endpoint #7 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(8 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep8Bo;         //Endpoint #8 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep8Bi;         //Endpoint #8 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(9 <= MAX_EP_NUMBER)                                                          O:\system\usb\usbmmap.c
                                           volatile far BDT ep9Bo;         //Endpoint #9 BD Out                             O:\system\usb\usbmmap.c
                                           volatile far BDT ep9Bi;         //Endpoint #9 BD In                              O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(10 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep10Bo;        //Endpoint #10 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep10Bi;        //Endpoint #10 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(11 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep11Bo;        //Endpoint #11 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep11Bi;        //Endpoint #11 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(12 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep12Bo;        //Endpoint #12 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep12Bi;        //Endpoint #12 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(13 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep13Bo;        //Endpoint #13 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep13Bi;        //Endpoint #13 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(14 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep14Bo;        //Endpoint #14 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep14Bi;        //Endpoint #14 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           #if(15 <= MAX_EP_NUMBER)                                                         O:\system\usb\usbmmap.c
                                           volatile far BDT ep15Bo;        //Endpoint #15 BD Out                            O:\system\usb\usbmmap.c
                                           volatile far BDT ep15Bi;        //Endpoint #15 BD In                             O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /******************************************************************************  O:\system\usb\usbmmap.c
                                            * Section B: EP0 Buffer Space                                                   O:\system\usb\usbmmap.c
                                            ******************************************************************************  O:\system\usb\usbmmap.c
                                            * - Two buffer areas are defined:                                               O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *   A. CTRL_TRF_SETUP                                                           O:\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  O:\system\usb\usbmmap.c
                                            *      - Detailed data structure allows direct adddressing of bits and bytes.   O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *   B. CTRL_TRF_DATA                                                            O:\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  O:\system\usb\usbmmap.c
                                            *      - Data structure allows direct adddressing of the first 8 bytes.         O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            * - Both data types are defined in system\usb\usbdefs\usbdefs_ep0_buff.h        O:\system\usb\usbmmap.c
                                            *****************************************************************************/  O:\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_SETUP SetupPkt;                                            O:\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_DATA CtrlTrfData;                                          O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /******************************************************************************  O:\system\usb\usbmmap.c
                                            * Section C: CDC Buffer                                                         O:\system\usb\usbmmap.c
                                            ******************************************************************************  O:\system\usb\usbmmap.c
                                            *                                                                               O:\system\usb\usbmmap.c
                                            *****************************************************************************/  O:\system\usb\usbmmap.c
                                           #pragma udata usbram5a=0x500    //See Linker Script,usb5:0x500-...               O:\system\usb\usbmmap.c
                                           #if defined(USB_USE_CDC)                                                         O:\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_notice[CDC_INT_EP_SIZE];                          O:\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_rx[CDC_BULK_OUT_EP_SIZE];                    O:\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_tx[CDC_BULK_IN_EP_SIZE];                     O:\system\usb\usbmmap.c
                                           #endif                                                                           O:\system\usb\usbmmap.c
                                           #pragma udata                                                                    O:\system\usb\usbmmap.c
                                                                                                                            O:\system\usb\usbmmap.c
                                           /** EOF usbmmap.c ************************************************************/  O:\system\usb\usbmmap.c
                                           /*********************************************************************           O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            *********************************************************************           O:\system\usb\usbdrv\usbdrv.c
                                            * FileName:        usbdrv.c                                                     O:\system\usb\usbdrv\usbdrv.c
                                            * Dependencies:    See INCLUDES section below                                   O:\system\usb\usbdrv\usbdrv.c
                                            * Processor:       PIC18                                                        O:\system\usb\usbdrv\usbdrv.c
                                            * Compiler:        C18 2.30.01+                                                 O:\system\usb\usbdrv\usbdrv.c
                                            * Company:         Microchip Technology, Inc.                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Software License Agreement                                                    O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\system\usb\usbdrv\usbdrv.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\system\usb\usbdrv\usbdrv.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\system\usb\usbdrv\usbdrv.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\system\usb\usbdrv\usbdrv.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\system\usb\usbdrv\usbdrv.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\system\usb\usbdrv\usbdrv.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\system\usb\usbdrv\usbdrv.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\system\usb\usbdrv\usbdrv.c
                                            * civil liability for the breach of the terms and conditions of this            O:\system\usb\usbdrv\usbdrv.c
                                            * license.                                                                      O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\system\usb\usbdrv\usbdrv.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\system\usb\usbdrv\usbdrv.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\system\usb\usbdrv\usbdrv.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\system\usb\usbdrv\usbdrv.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\system\usb\usbdrv\usbdrv.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Author               Date        Comment                                      O:\system\usb\usbdrv\usbdrv.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\system\usb\usbdrv\usbdrv.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    O:\system\usb\usbdrv\usbdrv.c
                                            ********************************************************************/           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /** I N C L U D E S **********************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           #include <p18cxxx.h>                                                             O:\system\usb\usbdrv\usbdrv.c
                                           #include "system\typedefs.h"                                                     O:\system\usb\usbdrv\usbdrv.c
                                           #include "system\usb\usb.h"                                                      O:\system\usb\usbdrv\usbdrv.c
                                           #include "io_cfg.h"             // Required for USBCheckBusStatus()              O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /** V A R I A B L E S ********************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           #pragma udata                                                                    O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void);                                                      O:\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void);                                                     O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void);                                                           O:\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void);                                                   O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void);                                              O:\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void);                                                      O:\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void);                                                      O:\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void);                                                      O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           #pragma code                                                                     O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBCheckBusStatus(void)                                 O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables/disables the USB module by monitoring   O:\system\usb\usbdrv\usbdrv.c
                                            *                  the USB power signal.                                        O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBCheckBusStatus(void)                                                     O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /**************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                                * Bus Attachment & Detachment Detection                                     O:\system\usb\usbdrv\usbdrv.c
                                                * usb_bus_sense is an i/o pin defined in io_cfg.h                           O:\system\usb\usbdrv\usbdrv.c
                                                *************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_ATTACHED    1                                                O:\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_DETACHED    0                                                O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               if(usb_bus_sense == USB_BUS_ATTACHED)       // Is USB bus attached?          O:\system\usb\usbdrv\usbdrv.c
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
002e02   a66d     BTFSS     0x6d,0x3,0x0           if(UCONbits.USBEN == 0)                 // Is the module off?            O:\system\usb\usbdrv\usbdrv.c
002e04   d810     RCALL     0x2e26                     USBModuleEnable();                  // Is off, enable it             O:\system\usb\usbdrv\usbdrv.c
                                               }                                                                            O:\system\usb\usbdrv\usbdrv.c
002e06   d002     BRA       0x2e0c             else                                                                         O:\system\usb\usbdrv\usbdrv.c
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
002e08   b66d     BTFSC     0x6d,0x3,0x0           if(UCONbits.USBEN == 1)                 // Is the module on?             O:\system\usb\usbdrv\usbdrv.c
002e0a   d814     RCALL     0x2e34                     USBModuleDisable();                 // Is on, disable it             O:\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_bus_sense...)                                                  O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * After enabling the USB module, it takes some time for the voltage         O:\system\usb\usbdrv\usbdrv.c
                                                * on the D+ or D- line to rise high enough to get out of the SE0 condition. O:\system\usb\usbdrv\usbdrv.c
                                                * The USB Reset interrupt should not be unmasked until the SE0 condition is O:\system\usb\usbdrv\usbdrv.c
                                                * cleared. This helps preventing the firmware from misinterpreting this     O:\system\usb\usbdrv\usbdrv.c
                                                * unique event as a USB bus reset from the USB host.                        O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002e0c   0101     MOVLB     0x1                if(usb_device_state == ATTACHED_STATE)                                       O:\system\usb\usbdrv\usbdrv.c
002e0e   05fa     DECF      0xfa,0x0,0x1                                                                                    
002e10   e109     BNZ       0x2e24                                                                                          
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
002e12   ba6d     BTFSC     0x6d,0x5,0x0           if(!UCONbits.SE0)                                                        O:\system\usb\usbdrv\usbdrv.c
002e14   d007     BRA       0x2e24                                                                                          
                                                   {                                                                        O:\system\usb\usbdrv\usbdrv.c
002e16   6a68     CLRF      0x68,0x0                   UIR = 0;                        // Clear all USB interrupts          O:\system\usb\usbdrv\usbdrv.c
002e18   6a69     CLRF      0x69,0x0                   UIE = 0;                        // Mask all USB interrupts           O:\system\usb\usbdrv\usbdrv.c
002e1a   8069     BSF       0x69,0x0,0x0               UIEbits.URSTIE = 1;             // Unmask RESET interrupt            O:\system\usb\usbdrv\usbdrv.c
002e1c   8869     BSF       0x69,0x4,0x0               UIEbits.IDLEIE = 1;             // Unmask IDLE interrupt             O:\system\usb\usbdrv\usbdrv.c
002e1e   0101     MOVLB     0x1                        usb_device_state = POWERED_STATE;                                    O:\system\usb\usbdrv\usbdrv.c
002e20   0e02     MOVLW     0x2                                                                                             
002e22   6ffa     MOVWF     0xfa,0x1                                                                                        
                                                   }//end if                           // else wait until SE0 is cleared    O:\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_device_state == ATTACHED_STATE)                                O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002e24   0012     RETURN    0x0            }//end USBCheckBusStatus                                                         O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleEnable(void)                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables the USB module.                         O:\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       O:\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            O:\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void)                                                       O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002e26   6a6d     CLRF      0x6d,0x0           UCON = 0;                                                                    O:\system\usb\usbdrv\usbdrv.c
002e28   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           O:\system\usb\usbdrv\usbdrv.c
002e2a   866d     BSF       0x6d,0x3,0x0       UCONbits.USBEN = 1;                     // Enable module & attach to bus     O:\system\usb\usbdrv\usbdrv.c
002e2c   0101     MOVLB     0x1                usb_device_state = ATTACHED_STATE;      // Defined in usbmmap.c & .h         O:\system\usb\usbdrv\usbdrv.c
002e2e   0e01     MOVLW     0x1                                                                                             
002e30   6ffa     MOVWF     0xfa,0x1                                                                                        
002e32   0012     RETURN    0x0            }//end USBModuleEnable                                                           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleDisable(void)                                  O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine disables the USB module.                        O:\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       O:\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            O:\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void)                                                      O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002e34   6a6d     CLRF      0x6d,0x0           UCON = 0;                               // Disable module & detach from bus  O:\system\usb\usbdrv\usbdrv.c
002e36   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           O:\system\usb\usbdrv\usbdrv.c
002e38   0101     MOVLB     0x1                usb_device_state = DETACHED_STATE;      // Defined in usbmmap.c & .h         O:\system\usb\usbdrv\usbdrv.c
002e3a   6bfa     CLRF      0xfa,0x1                                                                                        
002e3c   0012     RETURN    0x0            }//end USBModuleDisable                                                          O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSoftDetach(void)                                     O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    The device will have to be re-enumerated to function again.  O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        USBSoftDetach electrically disconnects the device from       O:\system\usb\usbdrv\usbdrv.c
                                            *                  the bus. This is done by stop supplying Vusb voltage to      O:\system\usb\usbdrv\usbdrv.c
                                            *                  pull-up resistor. The pull-down resistors on the host        O:\system\usb\usbdrv\usbdrv.c
                                            *                  side will pull both differential signal lines low and        O:\system\usb\usbdrv\usbdrv.c
                                            *                  the host registers the event as a disconnect.                O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            *                  Since the USB cable is not physically disconnected, the      O:\system\usb\usbdrv\usbdrv.c
                                            *                  power supply through the cable can still be sensed by        O:\system\usb\usbdrv\usbdrv.c
                                            *                  the device. The next time USBCheckBusStatus() function       O:\system\usb\usbdrv\usbdrv.c
                                            *                  is called, it will reconnect the device back to the bus.     O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBSoftDetach(void)                                                         O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002e3e   dffa     RCALL     0x2e34             USBModuleDisable();                                                          O:\system\usb\usbdrv\usbdrv.c
002e40   0012     RETURN    0x0            }//end USBSoftDetach                                                             O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBDriverService(void)                                  O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine is the heart of this firmware. It manages       O:\system\usb\usbdrv\usbdrv.c
                                            *                  all USB interrupts.                                          O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            Device state transitions through the following stages:       O:\system\usb\usbdrv\usbdrv.c
                                            *                  DETACHED -> ATTACHED -> POWERED -> DEFAULT ->                O:\system\usb\usbdrv\usbdrv.c
                                            *                  ADDRESS_PENDING -> ADDRESSED -> CONFIGURED -> READY          O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBDriverService(void)                                                      O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if USB cable is not even attached.        O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002e42   0101     MOVLB     0x1                if(usb_device_state == DETACHED_STATE) return;                               O:\system\usb\usbdrv\usbdrv.c
002e44   51fa     MOVF      0xfa,0x0,0x1                                                                                    
002e46   e101     BNZ       0x2e4a                                                                                          
002e48   d03a     BRA       0x2ebe                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Task A: Service USB Activity Interrupt                                    O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002e4a   5068     MOVF      0x68,0x0,0x0       if(UIRbits.ACTVIF && UIEbits.ACTVIE)    USBWakeFromSuspend();                O:\system\usb\usbdrv\usbdrv.c
002e4c   0b04     ANDLW     0x4                                                                                             
002e4e   e004     BZ        0x2e58                                                                                          
002e50   5069     MOVF      0x69,0x0,0x0                                                                                    
002e52   0b04     ANDLW     0x4                                                                                             
002e54   e001     BZ        0x2e58                                                                                          
002e56   d83c     RCALL     0x2ed0                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the device is in suspend mode.         O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002e58   b26d     BTFSC     0x6d,0x1,0x0       if(UCONbits.SUSPND==1) return;                                               O:\system\usb\usbdrv\usbdrv.c
002e5a   d031     BRA       0x2ebe                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Task B: Service USB Bus Reset Interrupt.                                  O:\system\usb\usbdrv\usbdrv.c
                                                * When bus reset is received during suspend, ACTVIF will be set first,      O:\system\usb\usbdrv\usbdrv.c
                                                * once the UCONbits.SUSPND is clear, then the URSTIF bit will be asserted.  O:\system\usb\usbdrv\usbdrv.c
                                                * This is why URSTIF is checked after ACTVIF.                               O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002e5c   5068     MOVF      0x68,0x0,0x0       if(UIRbits.URSTIF && UIEbits.URSTIE)    USBProtocolResetHandler();           O:\system\usb\usbdrv\usbdrv.c
002e5e   0b01     ANDLW     0x1                                                                                             
002e60   e004     BZ        0x2e6a                                                                                          
002e62   5069     MOVF      0x69,0x0,0x0                                                                                    
002e64   0b01     ANDLW     0x1                                                                                             
002e66   e001     BZ        0x2e6a                                                                                          
002e68   d856     RCALL     0x2f16                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Task C: Service other USB interrupts                                      O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002e6a   5068     MOVF      0x68,0x0,0x0       if(UIRbits.IDLEIF && UIEbits.IDLEIE)    USBSuspend();                        O:\system\usb\usbdrv\usbdrv.c
002e6c   0b10     ANDLW     0x10                                                                                            
002e6e   e004     BZ        0x2e78                                                                                          
002e70   5069     MOVF      0x69,0x0,0x0                                                                                    
002e72   0b10     ANDLW     0x10                                                                                            
002e74   e001     BZ        0x2e78                                                                                          
002e76   d824     RCALL     0x2ec0                                                                                          
002e78   5068     MOVF      0x68,0x0,0x0       if(UIRbits.SOFIF && UIEbits.SOFIE)      USB_SOF_Handler();                   O:\system\usb\usbdrv\usbdrv.c
002e7a   0b40     ANDLW     0x40                                                                                            
002e7c   e004     BZ        0x2e86                                                                                          
002e7e   5069     MOVF      0x69,0x0,0x0                                                                                    
002e80   0b40     ANDLW     0x40                                                                                            
002e82   e001     BZ        0x2e86                                                                                          
002e84   d83d     RCALL     0x2f00                                                                                          
002e86   5068     MOVF      0x68,0x0,0x0       if(UIRbits.STALLIF && UIEbits.STALLIE)  USBStallHandler();                   O:\system\usb\usbdrv\usbdrv.c
002e88   0b20     ANDLW     0x20                                                                                            
002e8a   e004     BZ        0x2e94                                                                                          
002e8c   5069     MOVF      0x69,0x0,0x0                                                                                    
002e8e   0b20     ANDLW     0x20                                                                                            
002e90   e001     BZ        0x2e94                                                                                          
002e92   d838     RCALL     0x2f04                                                                                          
002e94   5068     MOVF      0x68,0x0,0x0       if(UIRbits.UERRIF && UIEbits.UERRIE)    USBErrorHandler();                   O:\system\usb\usbdrv\usbdrv.c
002e96   0b02     ANDLW     0x2                                                                                             
002e98   e004     BZ        0x2ea2                                                                                          
002e9a   5069     MOVF      0x69,0x0,0x0                                                                                    
002e9c   0b02     ANDLW     0x2                                                                                             
002e9e   e001     BZ        0x2ea2                                                                                          
002ea0   d838     RCALL     0x2f12                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the host has not sent a bus reset.     O:\system\usb\usbdrv\usbdrv.c
                                                * Once bus reset is received, the device transitions into the DEFAULT       O:\system\usb\usbdrv\usbdrv.c
                                                * state and is ready for communication.                                     O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002ea2   0e03     MOVLW     0x3                if(usb_device_state < DEFAULT_STATE) return;                                 O:\system\usb\usbdrv\usbdrv.c
002ea4   0101     MOVLB     0x1                                                                                             
002ea6   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
002ea8   e201     BC        0x2eac                                                                                          
002eaa   d009     BRA       0x2ebe                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Task D: Servicing USB Transaction Complete Interrupt                      O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002eac   5068     MOVF      0x68,0x0,0x0       if(UIRbits.TRNIF && UIEbits.TRNIE)                                           O:\system\usb\usbdrv\usbdrv.c
002eae   0b08     ANDLW     0x8                                                                                             
002eb0   e006     BZ        0x2ebe                                                                                          
002eb2   5069     MOVF      0x69,0x0,0x0                                                                                    
002eb4   0b08     ANDLW     0x8                                                                                             
002eb6   e003     BZ        0x2ebe                                                                                          
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       O:\system\usb\usbdrv\usbdrv.c
                                                    * USBCtrlEPService only services transactions over EP0.                 O:\system\usb\usbdrv\usbdrv.c
                                                    * It ignores all other EP transactions.                                 O:\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      O:\system\usb\usbdrv\usbdrv.c
002eb8   ecd5     CALL      0x27aa,0x0             USBCtrlEPService();                                                      O:\system\usb\usbdrv\usbdrv.c
002eba   f013                                                                                                               
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       O:\system\usb\usbdrv\usbdrv.c
                                                    * Other EP can be serviced later by responsible device class firmware.  O:\system\usb\usbdrv\usbdrv.c
                                                    * Each device driver knows when an OUT or IN transaction is ready by    O:\system\usb\usbdrv\usbdrv.c
                                                    * checking the buffer ownership bit.                                    O:\system\usb\usbdrv\usbdrv.c
                                                    * An OUT EP should always be owned by SIE until the data is ready.      O:\system\usb\usbdrv\usbdrv.c
                                                    * An IN EP should always be owned by CPU until the data is ready.       O:\system\usb\usbdrv\usbdrv.c
                                                    *                                                                       O:\system\usb\usbdrv\usbdrv.c
                                                    * Because of this logic, it is not necessary to save the USTAT value    O:\system\usb\usbdrv\usbdrv.c
                                                    * of non-EP0 transactions.                                              O:\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      O:\system\usb\usbdrv\usbdrv.c
002ebc   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       O:\system\usb\usbdrv\usbdrv.c
                                               }//end if(UIRbits.TRNIF && UIEbits.TRNIE)                                    O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002ebe   0012     RETURN    0x0            }//end USBDriverService                                                          O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSuspend(void)                                        O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void)                                                            O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * NOTE: Do not clear UIRbits.ACTVIF here!                                   O:\system\usb\usbdrv\usbdrv.c
                                                * Reason:                                                                   O:\system\usb\usbdrv\usbdrv.c
                                                * ACTVIF is only generated once an IDLEIF has been generated.               O:\system\usb\usbdrv\usbdrv.c
                                                * This is a 1:1 ratio interrupt generation.                                 O:\system\usb\usbdrv\usbdrv.c
                                                * For every IDLEIF, there will be only one ACTVIF regardless of             O:\system\usb\usbdrv\usbdrv.c
                                                * the number of subsequent bus transitions.                                 O:\system\usb\usbdrv\usbdrv.c
                                                *                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * If the ACTIF is cleared here, a problem could occur when:                 O:\system\usb\usbdrv\usbdrv.c
                                                * [       IDLE       ][bus activity ->                                      O:\system\usb\usbdrv\usbdrv.c
                                                * <--- 3 ms ----->     ^                                                    O:\system\usb\usbdrv\usbdrv.c
                                                *                ^     ACTVIF=1                                             O:\system\usb\usbdrv\usbdrv.c
                                                *                IDLEIF=1                                                   O:\system\usb\usbdrv\usbdrv.c
                                                *  #           #           #           #   (#=Program polling flags)        O:\system\usb\usbdrv\usbdrv.c
                                                *                          ^                                                O:\system\usb\usbdrv\usbdrv.c
                                                *                          This polling loop will see both                  O:\system\usb\usbdrv\usbdrv.c
                                                *                          IDLEIF=1 and ACTVIF=1.                           O:\system\usb\usbdrv\usbdrv.c
                                                *                          However, the program services IDLEIF first       O:\system\usb\usbdrv\usbdrv.c
                                                *                          because ACTIVIE=0.                               O:\system\usb\usbdrv\usbdrv.c
                                                *                          If this routine clears the only ACTIVIF,         O:\system\usb\usbdrv\usbdrv.c
                                                *                          then it can never get out of the suspend         O:\system\usb\usbdrv\usbdrv.c
                                                *                          mode.                                            O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002ec0   8469     BSF       0x69,0x2,0x0       UIEbits.ACTVIE = 1;                     // Enable bus activity interrupt     O:\system\usb\usbdrv\usbdrv.c
002ec2   9868     BCF       0x68,0x4,0x0       UIRbits.IDLEIF = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
002ec4   826d     BSF       0x6d,0x1,0x0       UCONbits.SUSPND = 1;                    // Put USB module in power conserve  O:\system\usb\usbdrv\usbdrv.c
                                                                                       // mode, SIE clock inactive          O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * At this point the PIC can go into sleep,idle, or                          O:\system\usb\usbdrv\usbdrv.c
                                                * switch to a slower clock, etc.                                            O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                               /* Modifiable Section */                                                     O:\system\usb\usbdrv\usbdrv.c
002ec6   9aa1     BCF       0xa1,0x5,0x0       PIR2bits.USBIF = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
002ec8   8aa0     BSF       0xa0,0x5,0x0       PIE2bits.USBIE = 1;                     // Set USB wakeup source             O:\system\usb\usbdrv\usbdrv.c
002eca   0003     SLEEP                        Sleep();                                // Goto sleep                        O:\system\usb\usbdrv\usbdrv.c
002ecc   9aa0     BCF       0xa0,0x5,0x0       PIE2bits.USBIE = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
                                               /* End Modifiable Section */                                                 O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002ece   0012     RETURN    0x0            }//end USBSuspend                                                                O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBWakeFromSuspend(void)                                O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void)                                                    O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * If using clock switching, this is the place to restore the                O:\system\usb\usbdrv\usbdrv.c
                                                * original clock frequency.                                                 O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002ed0   926d     BCF       0x6d,0x1,0x0       UCONbits.SUSPND = 0;                                                         O:\system\usb\usbdrv\usbdrv.c
002ed2   9469     BCF       0x69,0x2,0x0       UIEbits.ACTVIE = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
002ed4   9468     BCF       0x68,0x2,0x0       UIRbits.ACTVIF = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
002ed6   0012     RETURN    0x0            }//end USBWakeFromSuspend                                                        O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBRemoteWakeup(void)                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This function should be called by user when the device       O:\system\usb\usbdrv\usbdrv.c
                                            *                  is waken up by an external stimulus other than ACTIVIF.      O:\system\usb\usbdrv\usbdrv.c
                                            *                  Please read the note below to understand the limitations.    O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            The modifiable section in this routine should be changed     O:\system\usb\usbdrv\usbdrv.c
                                            *                  to meet the application needs. Current implementation        O:\system\usb\usbdrv\usbdrv.c
                                            *                  temporary blocks other functions from executing for a        O:\system\usb\usbdrv\usbdrv.c
                                            *                  period of 1-13 ms depending on the core frequency.           O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            *                  According to USB 2.0 specification section 7.1.7.7,          O:\system\usb\usbdrv\usbdrv.c
                                            *                  "The remote wakeup device must hold the resume signaling     O:\system\usb\usbdrv\usbdrv.c
                                            *                  for at lest 1 ms but for no more than 15 ms."                O:\system\usb\usbdrv\usbdrv.c
                                            *                  The idea here is to use a delay counter loop, using a        O:\system\usb\usbdrv\usbdrv.c
                                            *                  common value that would work over a wide range of core       O:\system\usb\usbdrv\usbdrv.c
                                            *                  frequencies.                                                 O:\system\usb\usbdrv\usbdrv.c
                                            *                  That value selected is 1800. See table below:                O:\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   O:\system\usb\usbdrv\usbdrv.c
                                            *                  Core Freq(MHz)      MIP         RESUME Signal Period (ms)    O:\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   O:\system\usb\usbdrv\usbdrv.c
                                            *                      48              12          1.05                         O:\system\usb\usbdrv\usbdrv.c
                                            *                       4              1           12.6                         O:\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   O:\system\usb\usbdrv\usbdrv.c
                                            *                  * These timing could be incorrect when using code            O:\system\usb\usbdrv\usbdrv.c
                                            *                    optimization or extended instruction mode,                 O:\system\usb\usbdrv\usbdrv.c
                                            *                    or when having other interrupts enabled.                   O:\system\usb\usbdrv\usbdrv.c
                                            *                    Make sure to verify using the MPLAB SIM's Stopwatch        O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBRemoteWakeup(void)                                                       O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               static word delay_count;                                                     O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002ed8   0101     MOVLB     0x1                if(usb_stat.RemoteWakeup == 1)          // Check if RemoteWakeup function    O:\system\usb\usbdrv\usbdrv.c
002eda   a1fb     BTFSS     0xfb,0x0,0x1                                                                                    
002edc   d010     BRA       0x2efe                                                                                          
                                               {                                       // has been enabled by the host.     O:\system\usb\usbdrv\usbdrv.c
002ede   dff8     RCALL     0x2ed0                 USBWakeFromSuspend();               // Unsuspend USB modue               O:\system\usb\usbdrv\usbdrv.c
002ee0   846d     BSF       0x6d,0x2,0x0           UCONbits.RESUME = 1;                // Start RESUME signaling            O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                   /* Modifiable Section */                                                 O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002ee2   0101     MOVLB     0x1                    delay_count = 1800U;                // Set RESUME line for 1-13 ms       O:\system\usb\usbdrv\usbdrv.c
002ee4   0e08     MOVLW     0x8                                                                                             
002ee6   6ffe     MOVWF     0xfe,0x1                                                                                        
002ee8   0e07     MOVLW     0x7                                                                                             
002eea   6fff     MOVWF     0xff,0x1                                                                                        
                                                   do                                                                       O:\system\usb\usbdrv\usbdrv.c
                                                   {                                                                        O:\system\usb\usbdrv\usbdrv.c
002eec   0101     MOVLB     0x1                        delay_count--;                                                       O:\system\usb\usbdrv\usbdrv.c
002eee   07fe     DECF      0xfe,0x1,0x1                                                                                    
002ef0   0e00     MOVLW     0x0                                                                                             
002ef2   5bff     SUBWFB    0xff,0x1,0x1                                                                                    
002ef4   0101     MOVLB     0x1                    }while(delay_count);                                                     O:\system\usb\usbdrv\usbdrv.c
002ef6   51fe     MOVF      0xfe,0x0,0x1                                                                                    
002ef8   11ff     IORWF     0xff,0x0,0x1                                                                                    
002efa   e1f8     BNZ       0x2eec                                                                                          
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                   /* End Modifiable Section */                                             O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002efc   946d     BCF       0x6d,0x2,0x0           UCONbits.RESUME = 0;                                                     O:\system\usb\usbdrv\usbdrv.c
                                               }//endif                                                                     O:\system\usb\usbdrv\usbdrv.c
002efe   0012     RETURN    0x0            }//end USBRemoteWakeup                                                           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USB_SOF_Handler(void)                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The USB host sends out a SOF packet to full-speed devices    O:\system\usb\usbdrv\usbdrv.c
                                            *                  every 1 ms. This interrupt may be useful for isochronous     O:\system\usb\usbdrv\usbdrv.c
                                            *                  pipes. End designers should implement callback routine       O:\system\usb\usbdrv\usbdrv.c
                                            *                  as necessary.                                                O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void)                                                       O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /* Callback routine here */                                                  O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002f00   9c68     BCF       0x68,0x6,0x0       UIRbits.SOFIF = 0;                                                           O:\system\usb\usbdrv\usbdrv.c
002f02   0012     RETURN    0x0            }//end USB_SOF_Handler                                                           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBStallHandler(void)                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A STALL packet is sent to the host by the SIE.               O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The STALLIF is set anytime the SIE sends out a STALL         O:\system\usb\usbdrv\usbdrv.c
                                            *                  packet regardless of which endpoint causes it.               O:\system\usb\usbdrv\usbdrv.c
                                            *                  A Setup transaction overrides the STALL function. A stalled  O:\system\usb\usbdrv\usbdrv.c
                                            *                  endpoint stops stalling once it receives a setup packet.     O:\system\usb\usbdrv\usbdrv.c
                                            *                  In this case, the SIE will accepts the Setup packet and      O:\system\usb\usbdrv\usbdrv.c
                                            *                  set the TRNIF flag to notify the firmware. STALL function    O:\system\usb\usbdrv\usbdrv.c
                                            *                  for that particular endpoint pipe will be automatically      O:\system\usb\usbdrv\usbdrv.c
                                            *                  disabled (direction specific).                               O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            *                  There are a few reasons for an endpoint to be stalled.       O:\system\usb\usbdrv\usbdrv.c
                                            *                  1. When a non-supported USB request is received.             O:\system\usb\usbdrv\usbdrv.c
                                            *                     Example: GET_DESCRIPTOR(DEVICE_QUALIFIER)                 O:\system\usb\usbdrv\usbdrv.c
                                            *                  2. When an endpoint is currently halted.                     O:\system\usb\usbdrv\usbdrv.c
                                            *                  3. When the device class specifies that an endpoint must     O:\system\usb\usbdrv\usbdrv.c
                                            *                     stall in response to a specific event.                    O:\system\usb\usbdrv\usbdrv.c
                                            *                     Example: Mass Storage Device Class                        O:\system\usb\usbdrv\usbdrv.c
                                            *                              If the CBW is not valid, the device shall        O:\system\usb\usbdrv\usbdrv.c
                                            *                              STALL the Bulk-In pipe.                          O:\system\usb\usbdrv\usbdrv.c
                                            *                              See USB Mass Storage Class Bulk-only Transport   O:\system\usb\usbdrv\usbdrv.c
                                            *                              Specification for more details.                  O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            UEPn.EPSTALL can be scanned to see which endpoint causes     O:\system\usb\usbdrv\usbdrv.c
                                            *                  the stall event.                                             O:\system\usb\usbdrv\usbdrv.c
                                            *                  If                                                           O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void)                                                       O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           O:\system\usb\usbdrv\usbdrv.c
                                                * Does not really have to do anything here,                                 O:\system\usb\usbdrv\usbdrv.c
                                                * even for the control endpoint.                                            O:\system\usb\usbdrv\usbdrv.c
                                                * All BDs of Endpoint 0 are owned by SIE right now,                         O:\system\usb\usbdrv\usbdrv.c
                                                * but once a Setup Transaction is received, the ownership                   O:\system\usb\usbdrv\usbdrv.c
                                                * for EP0_OUT will be returned to CPU.                                      O:\system\usb\usbdrv\usbdrv.c
                                                * When the Setup Transaction is serviced, the ownership                     O:\system\usb\usbdrv\usbdrv.c
                                                * for EP0_IN will then be forced back to CPU by firmware.                   O:\system\usb\usbdrv\usbdrv.c
                                                */                                                                          O:\system\usb\usbdrv\usbdrv.c
002f04   a070     BTFSS     0x70,0x0,0x0       if(UEP0bits.EPSTALL == 1)                                                    O:\system\usb\usbdrv\usbdrv.c
002f06   d003     BRA       0x2f0e                                                                                          
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
002f08   ec62     CALL      0x2ac4,0x0             USBPrepareForNextSetupTrf();        // Firmware work-around              O:\system\usb\usbdrv\usbdrv.c
002f0a   f015                                                                                                               
002f0c   9070     BCF       0x70,0x0,0x0           UEP0bits.EPSTALL = 0;                                                    O:\system\usb\usbdrv\usbdrv.c
                                               }                                                                            O:\system\usb\usbdrv\usbdrv.c
002f0e   9a68     BCF       0x68,0x5,0x0       UIRbits.STALLIF = 0;                                                         O:\system\usb\usbdrv\usbdrv.c
002f10   0012     RETURN    0x0            }//end USBStallHandler                                                           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBErrorHandler(void)                                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The purpose of this interrupt is mainly for debugging        O:\system\usb\usbdrv\usbdrv.c
                                            *                  during development. Check UEIR to see which error causes     O:\system\usb\usbdrv\usbdrv.c
                                            *                  the interrupt.                                               O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void)                                                       O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002f12   9268     BCF       0x68,0x1,0x0       UIRbits.UERRIF = 0;                                                          O:\system\usb\usbdrv\usbdrv.c
002f14   0012     RETURN    0x0            }//end USBErrorHandler                                                           O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  O:\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBProtocolResetHandler(void)                           O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A USB bus reset is received from the host.                   O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    Currently, this routine flushes any pending USB              O:\system\usb\usbdrv\usbdrv.c
                                            *                  transactions. It empties out the USTAT FIFO. This action     O:\system\usb\usbdrv\usbdrv.c
                                            *                  might not be desirable in some applications.                 O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Overview:        Once a USB bus reset is received from the host, this         O:\system\usb\usbdrv\usbdrv.c
                                            *                  routine should be called. It resets the device address to    O:\system\usb\usbdrv\usbdrv.c
                                            *                  zero, disables all non-EP0 endpoints, initializes EP0 to     O:\system\usb\usbdrv\usbdrv.c
                                            *                  be ready for default communication, clears all USB           O:\system\usb\usbdrv\usbdrv.c
                                            *                  interrupt flags, unmasks applicable USB interrupts, and      O:\system\usb\usbdrv\usbdrv.c
                                            *                  reinitializes internal state-machine variables.              O:\system\usb\usbdrv\usbdrv.c
                                            *                                                                               O:\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         O:\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void)                                               O:\system\usb\usbdrv\usbdrv.c
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002f16   6a6a     CLRF      0x6a,0x0           UEIR = 0;                       // Clear all USB error flags                 O:\system\usb\usbdrv\usbdrv.c
002f18   6a68     CLRF      0x68,0x0           UIR = 0;                        // Clears all USB interrupts                 O:\system\usb\usbdrv\usbdrv.c
002f1a   0e9f     MOVLW     0x9f               UEIE = 0b10011111;              // Unmask all USB error interrupts           O:\system\usb\usbdrv\usbdrv.c
002f1c   6e6b     MOVWF     0x6b,0x0                                                                                        
002f1e   0e7b     MOVLW     0x7b               UIE = 0b01111011;               // Enable all interrupts except ACTVIE       O:\system\usb\usbdrv\usbdrv.c
002f20   6e69     MOVWF     0x69,0x0                                                                                        
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002f22   6a6e     CLRF      0x6e,0x0           UADDR = 0x00;                   // Reset to default address                  O:\system\usb\usbdrv\usbdrv.c
002f24   0e0f     MOVLW     0xf                mDisableEP1to15();              // Reset all non-EP0 UEPn registers          O:\system\usb\usbdrv\usbdrv.c
002f26   6ee6     MOVWF     0xe6,0x0                                                                                        
002f28   0e71     MOVLW     0x71                                                                                            
002f2a   6ee6     MOVWF     0xe6,0x0                                                                                        
002f2c   0e0f     MOVLW     0xf                                                                                             
002f2e   6ee6     MOVWF     0xe6,0x0                                                                                        
002f30   d814     RCALL     0x2f5a                                                                                          
002f32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002f34   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002f36   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002f38   0e16     MOVLW     0x16               UEP0 = EP_CTRL|HSHK_EN;         // Init EP0 as a Ctrl EP, see usbdrv.h       O:\system\usb\usbdrv\usbdrv.c
002f3a   6e70     MOVWF     0x70,0x0                                                                                        
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002f3c   a668     BTFSS     0x68,0x3,0x0       while(UIRbits.TRNIF == 1)       // Flush any pending transactions            O:\system\usb\usbdrv\usbdrv.c
002f3e   d002     BRA       0x2f44                                                                                          
002f42   d7fc     BRA       0x2f3c                                                                                          
002f40   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002f44   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;            // Make sure packet processing is enabled    O:\system\usb\usbdrv\usbdrv.c
002f46   ec62     CALL      0x2ac4,0x0         USBPrepareForNextSetupTrf();    // Declared in usbctrltrf.c                  O:\system\usb\usbdrv\usbdrv.c
002f48   f015                                                                                                               
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
002f4a   0101     MOVLB     0x1                usb_stat.RemoteWakeup = 0;      // Default status flag to disable            O:\system\usb\usbdrv\usbdrv.c
002f4c   91fb     BCF       0xfb,0x0,0x1                                                                                    
002f4e   0101     MOVLB     0x1                usb_active_cfg = 0;             // Clear active configuration                O:\system\usb\usbdrv\usbdrv.c
002f50   6bfc     CLRF      0xfc,0x1                                                                                        
002f52   0101     MOVLB     0x1                usb_device_state = DEFAULT_STATE;                                            O:\system\usb\usbdrv\usbdrv.c
002f54   0e03     MOVLW     0x3                                                                                             
002f56   6ffa     MOVWF     0xfa,0x1                                                                                        
002f58   0012     RETURN    0x0            }//end USBProtocolResetHandler                                                   O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /* Auxiliary Function */                                                         O:\system\usb\usbdrv\usbdrv.c
002f5a   cfd9     MOVFF     0xfd9,0xfe6    void ClearArray(byte* startAdr,byte count)                                       O:\system\usb\usbdrv\usbdrv.c
002f5c   ffe6                                                                                                               
002f5e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002f60   ffd9                                                                                                               
                                           {                                                                                O:\system\usb\usbdrv\usbdrv.c
002f62   0efd     MOVLW     0xfd               *startAdr;                                                                   O:\system\usb\usbdrv\usbdrv.c
002f64   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002f66   ffe9                                                                                                               
002f68   0efe     MOVLW     0xfe                                                                                            
002f6a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002f6c   ffea                                                                                                               
002f6e   0efc     MOVLW     0xfc               while(count)                                                                 O:\system\usb\usbdrv\usbdrv.c
002f70   50db     MOVF      0xdb,0x0,0x0                                                                                    
002f72   e004     BZ        0x2f7c                                                                                          
002f7a   d7f9     BRA       0x2f6e                                                                                          
                                               {                                                                            O:\system\usb\usbdrv\usbdrv.c
                                                   _asm                                                                     O:\system\usb\usbdrv\usbdrv.c
002f74   6aee     CLRF      0xee,0x0               clrf POSTINC0,0                                                          O:\system\usb\usbdrv\usbdrv.c
                                                   _endasm                                                                  O:\system\usb\usbdrv\usbdrv.c
002f76   0efc     MOVLW     0xfc                   count--;                                                                 O:\system\usb\usbdrv\usbdrv.c
002f78   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while                                                                 O:\system\usb\usbdrv\usbdrv.c
002f7c   52e5     MOVF      0xe5,0x1,0x0   }//end ClearArray                                                                O:\system\usb\usbdrv\usbdrv.c
002f7e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002f80   ffd9                                                                                                               
002f82   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\usbdrv\usbdrv.c
                                           /** EOF usbdrv.c *************************************************************/  O:\system\usb\usbdrv\usbdrv.c
                                           /*********************************************************************           O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            *********************************************************************           O:\system\usb\usb9\usb9.c
                                            * FileName:        usb9.c                                                       O:\system\usb\usb9\usb9.c
                                            * Dependencies:    See INCLUDES section below                                   O:\system\usb\usb9\usb9.c
                                            * Processor:       PIC18                                                        O:\system\usb\usb9\usb9.c
                                            * Compiler:        C18 2.30.01+                                                 O:\system\usb\usb9\usb9.c
                                            * Company:         Microchip Technology, Inc.                                   O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Software License Agreement                                                    O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\system\usb\usb9\usb9.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\system\usb\usb9\usb9.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\system\usb\usb9\usb9.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\system\usb\usb9\usb9.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\system\usb\usb9\usb9.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\system\usb\usb9\usb9.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\system\usb\usb9\usb9.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\system\usb\usb9\usb9.c
                                            * civil liability for the breach of the terms and conditions of this            O:\system\usb\usb9\usb9.c
                                            * license.                                                                      O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\system\usb\usb9\usb9.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\system\usb\usb9\usb9.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\system\usb\usb9\usb9.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\system\usb\usb9\usb9.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\system\usb\usb9\usb9.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Author               Date        Comment                                      O:\system\usb\usb9\usb9.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\system\usb\usb9\usb9.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    O:\system\usb\usb9\usb9.c
                                            ********************************************************************/           O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /** I N C L U D E S **********************************************************/  O:\system\usb\usb9\usb9.c
                                           #include <p18cxxx.h>                                                             O:\system\usb\usb9\usb9.c
                                           #include "system\typedefs.h"                                                     O:\system\usb\usb9\usb9.c
                                           #include "system\usb\usb.h"                                                      O:\system\usb\usb9\usb9.c
                                           #include "io_cfg.h"                     // Required for self_power status        O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /** V A R I A B L E S ********************************************************/  O:\system\usb\usb9\usb9.c
                                           #pragma udata                                                                    O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void);                                                  O:\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void);                                                  O:\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void);                                               O:\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void);                                              O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\system\usb\usb9\usb9.c
                                           #pragma code                                                                     O:\system\usb\usb9\usb9.c
                                           /******************************************************************************  O:\system\usb\usb9\usb9.c
                                            * Function:        void USBCheckStdRequest(void)                                O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Input:           None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Output:          None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Overview:        This routine checks the setup data packet to see if it       O:\system\usb\usb9\usb9.c
                                            *                  knows how to handle it                                       O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Note:            None                                                         O:\system\usb\usb9\usb9.c
                                            *****************************************************************************/  O:\system\usb\usb9\usb9.c
                                           void USBCheckStdRequest(void)                                                    O:\system\usb\usb9\usb9.c
                                           {                                                                                O:\system\usb\usb9\usb9.c
002ae4   0104     MOVLB     0x4                if(SetupPkt.RequestType != STANDARD) return;                                 O:\system\usb\usb9\usb9.c
002ae6   5120     MOVF      0x20,0x0,0x1                                                                                    
002ae8   0b60     ANDLW     0x60                                                                                            
002aea   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
002aec   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
002aee   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
002af0   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
002af2   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
002af4   0900     IORLW     0x0                                                                                             
002af6   e001     BZ        0x2afa                                                                                          
002af8   d058     BRA       0x2baa                                                                                          
                                                                                                                            O:\system\usb\usb9\usb9.c
002afa   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    O:\system\usb\usb9\usb9.c
002afc   5121     MOVF      0x21,0x0,0x1                                                                                    
002afe   0a07     XORLW     0x7                                                                                             
002b00   e053     BZ        0x2ba8                                                                                          
002b02   0a0b     XORLW     0xb                                                                                             
002b04   e051     BZ        0x2ba8                                                                                          
002b06   0a07     XORLW     0x7                                                                                             
002b08   e042     BZ        0x2b8e                                                                                          
002b0a   0a01     XORLW     0x1                                                                                             
002b0c   e02c     BZ        0x2b66                                                                                          
002b0e   0a0b     XORLW     0xb                                                                                             
002b10   e028     BZ        0x2b62                                                                                          
002b12   0a02     XORLW     0x2                                                                                             
002b14   e026     BZ        0x2b62                                                                                          
002b16   0a03     XORLW     0x3                                                                                             
002b18   e022     BZ        0x2b5e                                                                                          
002b1a   0a08     XORLW     0x8                                                                                             
002b1c   e012     BZ        0x2b42                                                                                          
002b1e   0a01     XORLW     0x1                                                                                             
002b20   e00e     BZ        0x2b3e                                                                                          
002b22   0a0f     XORLW     0xf                                                                                             
002b24   e00a     BZ        0x2b3a                                                                                          
002b26   0a03     XORLW     0x3                                                                                             
002b28   e001     BZ        0x2b2c                                                                                          
002b2a   d03e     BRA       0x2ba8                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
                                                   case SET_ADR:                                                            O:\system\usb\usb9\usb9.c
002b2c   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002b2e   0e01     MOVLW     0x1                                                                                             
002b30   6f6b     MOVWF     0x6b,0x1                                                                                        
002b32   0101     MOVLB     0x1                        usb_device_state = ADR_PENDING_STATE;       // Update state only     O:\system\usb\usb9\usb9.c
002b34   0e04     MOVLW     0x4                                                                                             
002b36   6ffa     MOVWF     0xfa,0x1                                                                                        
                                                       /* See USBCtrlTrfInHandler() in usbctrltrf.c for the next step */    O:\system\usb\usb9\usb9.c
002b38   d038     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case GET_DSC:                                                            O:\system\usb\usb9\usb9.c
002b3a   d838     RCALL     0x2bac                     USBStdGetDscHandler();                                               O:\system\usb\usb9\usb9.c
002b3c   d036     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case SET_CFG:                                                            O:\system\usb\usb9\usb9.c
002b3e   d893     RCALL     0x2c66                     USBStdSetCfgHandler();                                               O:\system\usb\usb9\usb9.c
002b40   d034     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case GET_CFG:                                                            O:\system\usb\usb9\usb9.c
002b42   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002b44   0e01     MOVLW     0x1                                                                                             
002b46   6f6b     MOVWF     0x6b,0x1                                                                                        
002b48   0100     MOVLB     0x0                        pSrc.bRam = (byte*)&usb_active_cfg;         // Set Source            O:\system\usb\usb9\usb9.c
002b4a   0efc     MOVLW     0xfc                                                                                            
002b4c   6f6c     MOVWF     0x6c,0x1                                                                                        
002b4e   0e01     MOVLW     0x1                                                                                             
002b50   6f6d     MOVWF     0x6d,0x1                                                                                        
002b52   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       O:\system\usb\usb9\usb9.c
002b54   93fb     BCF       0xfb,0x1,0x1                                                                                    
002b56   0100     MOVLB     0x0                        LSB(wCount) = 1;                            // Set data count        O:\system\usb\usb9\usb9.c
002b58   0e01     MOVLW     0x1                                                                                             
002b5a   6f70     MOVWF     0x70,0x1                                                                                        
002b5c   d026     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case GET_STATUS:                                                         O:\system\usb\usb9\usb9.c
002b5e   d8ab     RCALL     0x2cb6                     USBStdGetStatusHandler();                                            O:\system\usb\usb9\usb9.c
002b60   d024     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case CLR_FEATURE:                                                        O:\system\usb\usb9\usb9.c
                                                   case SET_FEATURE:                                                        O:\system\usb\usb9\usb9.c
002b62   d8f9     RCALL     0x2d56                     USBStdFeatureReqHandler();                                           O:\system\usb\usb9\usb9.c
002b64   d022     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case GET_INTF:                                                           O:\system\usb\usb9\usb9.c
002b66   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002b68   0e01     MOVLW     0x1                                                                                             
002b6a   6f6b     MOVWF     0x6b,0x1                                                                                        
002b6c   0104     MOVLB     0x4                        pSrc.bRam = (byte*)&usb_alt_intf+SetupPkt.bIntfID;  // Set source    O:\system\usb\usb9\usb9.c
002b6e   5124     MOVF      0x24,0x0,0x1                                                                                    
002b70   0100     MOVLB     0x0                                                                                             
002b72   6f6c     MOVWF     0x6c,0x1                                                                                        
002b74   6b6d     CLRF      0x6d,0x1                                                                                        
002b76   0efd     MOVLW     0xfd                                                                                            
002b78   0100     MOVLB     0x0                                                                                             
002b7a   276c     ADDWF     0x6c,0x1,0x1                                                                                    
002b7c   0e01     MOVLW     0x1                                                                                             
002b7e   0100     MOVLB     0x0                                                                                             
002b80   236d     ADDWFC    0x6d,0x1,0x1                                                                                    
002b82   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       O:\system\usb\usb9\usb9.c
002b84   93fb     BCF       0xfb,0x1,0x1                                                                                    
002b86   0100     MOVLB     0x0                        LSB(wCount) = 1;                            // Set data count        O:\system\usb\usb9\usb9.c
002b88   0e01     MOVLW     0x1                                                                                             
002b8a   6f70     MOVWF     0x70,0x1                                                                                        
002b8c   d00e     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case SET_INTF:                                                           O:\system\usb\usb9\usb9.c
002b8e   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002b90   0e01     MOVLW     0x1                                                                                             
002b92   6f6b     MOVWF     0x6b,0x1                                                                                        
002b94   0104     MOVLB     0x4                        usb_alt_intf[SetupPkt.bIntfID] = SetupPkt.bAltID;                    O:\system\usb\usb9\usb9.c
002b96   5124     MOVF      0x24,0x0,0x1                                                                                    
002b98   6aea     CLRF      0xea,0x0                                                                                        
002b9a   0ffd     ADDLW     0xfd                                                                                            
002b9c   6ee9     MOVWF     0xe9,0x0                                                                                        
002b9e   0e01     MOVLW     0x1                                                                                             
002ba0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002ba2   c422     MOVFF     0x422,0xfef                                                                                     
002ba4   ffef                                                                                                               
002ba6   d001     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case SET_DSC:                                                            O:\system\usb\usb9\usb9.c
                                                   case SYNCH_FRAME:                                                        O:\system\usb\usb9\usb9.c
                                                   default:                                                                 O:\system\usb\usb9\usb9.c
002ba8   d000     BRA       0x2baa                     break;                                                               O:\system\usb\usb9\usb9.c
                                               }//end switch                                                                O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
002baa   0012     RETURN    0x0            }//end USBCheckStdRequest                                                        O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /******************************************************************************  O:\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetDscHandler(void)                               O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Input:           None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Output:          None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_DESCRIPTOR request.    O:\system\usb\usb9\usb9.c
                                            *                  It utilizes tables dynamically looks up descriptor size.     O:\system\usb\usb9\usb9.c
                                            *                  This routine should never have to be modified if the tables  O:\system\usb\usb9\usb9.c
                                            *                  in usbdsc.c are declared correctly.                          O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Note:            None                                                         O:\system\usb\usb9\usb9.c
                                            *****************************************************************************/  O:\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void)                                                   O:\system\usb\usb9\usb9.c
                                           {                                                                                O:\system\usb\usb9\usb9.c
002bac   0e80     MOVLW     0x80               if(SetupPkt.bmRequestType == 0x80)                                           O:\system\usb\usb9\usb9.c
002bae   0104     MOVLB     0x4                                                                                             
002bb0   5d20     SUBWF     0x20,0x0,0x1                                                                                    
002bb2   e158     BNZ       0x2c64                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
002bb4   0104     MOVLB     0x4                    switch(SetupPkt.bDscType)                                                O:\system\usb\usb9\usb9.c
002bb6   5123     MOVF      0x23,0x0,0x1                                                                                    
002bb8   0a03     XORLW     0x3                                                                                             
002bba   e034     BZ        0x2c24                                                                                          
002bbc   0a01     XORLW     0x1                                                                                             
002bbe   e010     BZ        0x2be0                                                                                          
002bc0   0a03     XORLW     0x3                                                                                             
002bc2   e001     BZ        0x2bc6                                                                                          
002bc4   d04d     BRA       0x2c60                                                                                          
                                                   {                                                                        O:\system\usb\usb9\usb9.c
                                                       case DSC_DEV:                                                        O:\system\usb\usb9\usb9.c
002bc6   0100     MOVLB     0x0                            ctrl_trf_session_owner = MUID_USB9;                              O:\system\usb\usb9\usb9.c
002bc8   0e01     MOVLW     0x1                                                                                             
002bca   6f6b     MOVWF     0x6b,0x1                                                                                        
002bcc   0100     MOVLB     0x0                            pSrc.bRom = (rom byte*)&device_dsc;                              O:\system\usb\usb9\usb9.c
002bce   0eb6     MOVLW     0xb6                                                                                            
002bd0   6f6c     MOVWF     0x6c,0x1                                                                                        
002bd2   0e31     MOVLW     0x31                                                                                            
002bd4   6f6d     MOVWF     0x6d,0x1                                                                                        
002bd6   0e12     MOVLW     0x12                           wCount._word = sizeof(device_dsc);          // Set data count    O:\system\usb\usb9\usb9.c
002bd8   0100     MOVLB     0x0                                                                                             
002bda   6f70     MOVWF     0x70,0x1                                                                                        
002bdc   6b71     CLRF      0x71,0x1                                                                                        
002bde   d040     BRA       0x2c60                         break;                                                           O:\system\usb\usb9\usb9.c
                                                       case DSC_CFG:                                                        O:\system\usb\usb9\usb9.c
002be0   0100     MOVLB     0x0                            ctrl_trf_session_owner = MUID_USB9;                              O:\system\usb\usb9\usb9.c
002be2   0e01     MOVLW     0x1                                                                                             
002be4   6f6b     MOVWF     0x6b,0x1                                                                                        
002be6   0104     MOVLB     0x4                            pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);                    O:\system\usb\usb9\usb9.c
002be8   5122     MOVF      0x22,0x0,0x1                                                                                    
002bea   6ef6     MOVWF     0xf6,0x0                                                                                        
002bec   6af7     CLRF      0xf7,0x0                                                                                        
002bee   90d8     BCF       0xd8,0x0,0x0                                                                                    
002bf0   36f6     RLCF      0xf6,0x1,0x0                                                                                    
002bf2   36f7     RLCF      0xf7,0x1,0x0                                                                                    
002bf4   0e77     MOVLW     0x77                                                                                            
002bf6   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
002bf8   0e32     MOVLW     0x32                                                                                            
002bfa   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
002bfc   0009     TBLRDPOSTINC                                                                                              
002bfe   cff5     MOVFF     0xff5,0x6c                                                                                      
002c00   f06c                                                                                                               
002c02   000a     TBLRDPOSTDEC                                                                                              
002c04   cff5     MOVFF     0xff5,0x6d                                                                                      
002c06   f06d                                                                                                               
002c08   0e02     MOVLW     0x2                            wCount._word = *(pSrc.wRom+1);              // Set data count    O:\system\usb\usb9\usb9.c
002c0a   0100     MOVLB     0x0                                                                                             
002c0c   6af7     CLRF      0xf7,0x0                                                                                        
002c0e   256c     ADDWF     0x6c,0x0,0x1                                                                                    
002c10   6ef6     MOVWF     0xf6,0x0                                                                                        
002c12   516d     MOVF      0x6d,0x0,0x1                                                                                    
002c14   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
002c16   0009     TBLRDPOSTINC                                                                                              
002c18   cff5     MOVFF     0xff5,0x70                                                                                      
002c1a   f070                                                                                                               
002c1c   000a     TBLRDPOSTDEC                                                                                              
002c1e   cff5     MOVFF     0xff5,0x71                                                                                      
002c20   f071                                                                                                               
002c22   d01e     BRA       0x2c60                         break;                                                           O:\system\usb\usb9\usb9.c
                                                       case DSC_STR:                                                        O:\system\usb\usb9\usb9.c
002c24   0100     MOVLB     0x0                            ctrl_trf_session_owner = MUID_USB9;                              O:\system\usb\usb9\usb9.c
002c26   0e01     MOVLW     0x1                                                                                             
002c28   6f6b     MOVWF     0x6b,0x1                                                                                        
002c2a   0104     MOVLB     0x4                            pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);                    O:\system\usb\usb9\usb9.c
002c2c   5122     MOVF      0x22,0x0,0x1                                                                                    
002c2e   6ef6     MOVWF     0xf6,0x0                                                                                        
002c30   6af7     CLRF      0xf7,0x0                                                                                        
002c32   90d8     BCF       0xd8,0x0,0x0                                                                                    
002c34   36f6     RLCF      0xf6,0x1,0x0                                                                                    
002c36   36f7     RLCF      0xf7,0x1,0x0                                                                                    
002c38   0e7b     MOVLW     0x7b                                                                                            
002c3a   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
002c3c   0e32     MOVLW     0x32                                                                                            
002c3e   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
002c40   0009     TBLRDPOSTINC                                                                                              
002c42   cff5     MOVFF     0xff5,0x6c                                                                                      
002c44   f06c                                                                                                               
002c46   000a     TBLRDPOSTDEC                                                                                              
002c48   cff5     MOVFF     0xff5,0x6d                                                                                      
002c4a   f06d                                                                                                               
002c4c   c06c     MOVFF     0x6c,0xff6                     wCount._word = *pSrc.bRom;                  // Set data count    O:\system\usb\usb9\usb9.c
002c4e   fff6                                                                                                               
002c50   c06d     MOVFF     0x6d,0xff7                                                                                      
002c52   fff7                                                                                                               
002c54   0008     TBLRD                                                                                                     
002c56   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002c58   0100     MOVLB     0x0                                                                                             
002c5a   6f70     MOVWF     0x70,0x1                                                                                        
002c5c   6b71     CLRF      0x71,0x1                                                                                        
002c5e   d000     BRA       0x2c60                         break;                                                           O:\system\usb\usb9\usb9.c
                                                   }//end switch                                                            O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
002c60   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _ROM;                       // Set memory type   O:\system\usb\usb9\usb9.c
002c62   83fb     BSF       0xfb,0x1,0x1                                                                                    
                                               }//end if                                                                    O:\system\usb\usb9\usb9.c
002c64   0012     RETURN    0x0            }//end USBStdGetDscHandler                                                       O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /******************************************************************************  O:\system\usb\usb9\usb9.c
                                            * Function:        void USBStdSetCfgHandler(void)                               O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Input:           None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Output:          None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Overview:        This routine first disables all endpoints by clearing        O:\system\usb\usb9\usb9.c
                                            *                  UEP registers. It then configures (initializes) endpoints    O:\system\usb\usb9\usb9.c
                                            *                  specified in the modifiable section.                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Note:            None                                                         O:\system\usb\usb9\usb9.c
                                            *****************************************************************************/  O:\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void)                                                   O:\system\usb\usb9\usb9.c
                                           {                                                                                O:\system\usb\usb9\usb9.c
002c66   0100     MOVLB     0x0                ctrl_trf_session_owner = MUID_USB9;                                          O:\system\usb\usb9\usb9.c
002c68   0e01     MOVLW     0x1                                                                                             
002c6a   6f6b     MOVWF     0x6b,0x1                                                                                        
002c6c   0e0f     MOVLW     0xf                mDisableEP1to15();                          // See usbdrv.h                  O:\system\usb\usb9\usb9.c
002c6e   6ee6     MOVWF     0xe6,0x0                                                                                        
002c70   0e71     MOVLW     0x71                                                                                            
002c72   6ee6     MOVWF     0xe6,0x0                                                                                        
002c74   0e0f     MOVLW     0xf                                                                                             
002c76   6ee6     MOVWF     0xe6,0x0                                                                                        
002c78   ecad     CALL      0x2f5a,0x0                                                                                      
002c7a   f017                                                                                                               
002c7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c7e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c80   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c82   0e01     MOVLW     0x1                ClearArray((byte*)&usb_alt_intf,MAX_NUM_INT);                                O:\system\usb\usb9\usb9.c
002c84   6ee6     MOVWF     0xe6,0x0                                                                                        
002c86   0efd     MOVLW     0xfd                                                                                            
002c88   6ee6     MOVWF     0xe6,0x0                                                                                        
002c8a   0e01     MOVLW     0x1                                                                                             
002c8c   6ee6     MOVWF     0xe6,0x0                                                                                        
002c8e   ecad     CALL      0x2f5a,0x0                                                                                      
002c90   f017                                                                                                               
002c92   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c94   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c96   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c98   c422     MOVFF     0x422,0x1fc        usb_active_cfg = SetupPkt.bCfgValue;                                         O:\system\usb\usb9\usb9.c
002c9a   f1fc                                                                                                               
002c9c   0104     MOVLB     0x4                if(SetupPkt.bCfgValue == 0)                                                  O:\system\usb\usb9\usb9.c
002c9e   5122     MOVF      0x22,0x0,0x1                                                                                    
002ca0   e104     BNZ       0x2caa                                                                                          
002ca2   0101     MOVLB     0x1                    usb_device_state = ADDRESS_STATE;                                        O:\system\usb\usb9\usb9.c
002ca4   0e05     MOVLW     0x5                                                                                             
002ca6   6ffa     MOVWF     0xfa,0x1                                                                                        
002ca8   d005     BRA       0x2cb4             else                                                                         O:\system\usb\usb9\usb9.c
                                               {                                                                            O:\system\usb\usb9\usb9.c
002caa   0101     MOVLB     0x1                    usb_device_state = CONFIGURED_STATE;                                     O:\system\usb\usb9\usb9.c
002cac   0e06     MOVLW     0x6                                                                                             
002cae   6ffa     MOVWF     0xfa,0x1                                                                                        
                                                                                                                            O:\system\usb\usb9\usb9.c
                                                   /* Modifiable Section */                                                 O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                                   #if defined(USB_USE_CDC)                // See autofiles\usbcfg.h        O:\system\usb\usb9\usb9.c
002cb0   ec50     CALL      0x24a0,0x0             CDCInitEP();                                                             O:\system\usb\usb9\usb9.c
002cb2   f012                                                                                                               
                                                   #endif                                                                   O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                                   /* End modifiable section */                                             O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                               }//end if(SetupPkt.bcfgValue == 0)                                           O:\system\usb\usb9\usb9.c
002cb4   0012     RETURN    0x0            }//end USBStdSetCfgHandler                                                       O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /******************************************************************************  O:\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetStatusHandler(void)                            O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Input:           None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Output:          None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_STATUS request         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Note:            None                                                         O:\system\usb\usb9\usb9.c
                                            *****************************************************************************/  O:\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void)                                                O:\system\usb\usb9\usb9.c
                                           {                                                                                O:\system\usb\usb9\usb9.c
002cb6   0104     MOVLB     0x4                CtrlTrfData._byte0 = 0;                         // Initialize content        O:\system\usb\usb9\usb9.c
002cb8   6b28     CLRF      0x28,0x1                                                                                        
002cba   0104     MOVLB     0x4                CtrlTrfData._byte1 = 0;                                                      O:\system\usb\usb9\usb9.c
002cbc   6b29     CLRF      0x29,0x1                                                                                        
                                                                                                                            O:\system\usb\usb9\usb9.c
002cbe   0104     MOVLB     0x4                switch(SetupPkt.Recipient)                                                   O:\system\usb\usb9\usb9.c
002cc0   5120     MOVF      0x20,0x0,0x1                                                                                    
002cc2   0b1f     ANDLW     0x1f                                                                                            
002cc4   0a02     XORLW     0x2                                                                                             
002cc6   e014     BZ        0x2cf0                                                                                          
002cc8   0a03     XORLW     0x3                                                                                             
002cca   e00e     BZ        0x2ce8                                                                                          
002ccc   0a01     XORLW     0x1                                                                                             
002cce   e001     BZ        0x2cd2                                                                                          
002cd0   d034     BRA       0x2d3a                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
                                                   case RCPT_DEV:                                                           O:\system\usb\usb9\usb9.c
002cd2   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002cd4   0e01     MOVLW     0x1                                                                                             
002cd6   6f6b     MOVWF     0x6b,0x1                                                                                        
                                                       /*                                                                   O:\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Self-Powered Status [0] Bus-Powered [1] Self-Powered O:\system\usb\usb9\usb9.c
                                                        *         bit1: RemoteWakeup        [0] Disabled    [1] Enabled     O:\system\usb\usb9\usb9.c
                                                        */                                                                  O:\system\usb\usb9\usb9.c
                                                       if(self_power == 1)                     // self_power defined in io_cfg.h O:\system\usb\usb9\usb9.c
002cd8   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b000000001;    // Set bit0                  O:\system\usb\usb9\usb9.c
002cda   8128     BSF       0x28,0x0,0x1                                                                                    
                                                                                                                            O:\system\usb\usb9\usb9.c
002cdc   0101     MOVLB     0x1                        if(usb_stat.RemoteWakeup == 1)          // usb_stat defined in usbmmap.c O:\system\usb\usb9\usb9.c
002cde   a1fb     BTFSS     0xfb,0x0,0x1                                                                                    
002ce0   d002     BRA       0x2ce6                                                                                          
002ce2   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b00000010;     // Set bit1                  O:\system\usb\usb9\usb9.c
002ce4   8328     BSF       0x28,0x1,0x1                                                                                    
002ce6   d029     BRA       0x2d3a                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case RCPT_INTF:                                                          O:\system\usb\usb9\usb9.c
002ce8   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;     // No data to update         O:\system\usb\usb9\usb9.c
002cea   0e01     MOVLW     0x1                                                                                             
002cec   6f6b     MOVWF     0x6b,0x1                                                                                        
002cee   d025     BRA       0x2d3a                     break;                                                               O:\system\usb\usb9\usb9.c
                                                   case RCPT_EP:                                                            O:\system\usb\usb9\usb9.c
002cf0   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_USB9;                                  O:\system\usb\usb9\usb9.c
002cf2   0e01     MOVLW     0x1                                                                                             
002cf4   6f6b     MOVWF     0x6b,0x1                                                                                        
                                                       /*                                                                   O:\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Halt Status [0] Not Halted [1] Halted               O:\system\usb\usb9\usb9.c
                                                        */                                                                  O:\system\usb\usb9\usb9.c
002cf6   0104     MOVLB     0x4                        pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);     O:\system\usb\usb9\usb9.c
002cf8   5124     MOVF      0x24,0x0,0x1                                                                                    
002cfa   0b0f     ANDLW     0xf                                                                                             
002cfc   0d08     MULLW     0x8                                                                                             
002cfe   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002d00   6a2b     CLRF      0x2b,0x0                                                                                        
002d02   0f00     ADDLW     0x0                                                                                             
002d04   6e2a     MOVWF     0x2a,0x0                                                                                        
002d06   0e04     MOVLW     0x4                                                                                             
002d08   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
002d0a   0104     MOVLB     0x4                                                                                             
002d0c   5124     MOVF      0x24,0x0,0x1                                                                                    
002d0e   0b80     ANDLW     0x80                                                                                            
002d10   e001     BZ        0x2d14                                                                                          
002d12   0e01     MOVLW     0x1                                                                                             
002d14   0d04     MULLW     0x4                                                                                             
002d16   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002d18   0100     MOVLB     0x0                                                                                             
002d1a   242a     ADDWF     0x2a,0x0,0x0                                                                                    
002d1c   6f6e     MOVWF     0x6e,0x1                                                                                        
002d1e   0e00     MOVLW     0x0                                                                                             
002d20   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
002d22   6f6f     MOVWF     0x6f,0x1                                                                                        
002d24   c06e     MOVFF     0x6e,0xfe9                 if(*pDst.bRam & _BSTALL)    // Use _BSTALL as a bit mask             O:\system\usb\usb9\usb9.c
002d26   ffe9                                                                                                               
002d28   c06f     MOVFF     0x6f,0xfea                                                                                      
002d2a   ffea                                                                                                               
002d2c   50ef     MOVF      0xef,0x0,0x0                                                                                    
002d2e   0b04     ANDLW     0x4                                                                                             
002d30   e003     BZ        0x2d38                                                                                          
002d32   0104     MOVLB     0x4                            CtrlTrfData._byte0=0x01;// Set bit0                              O:\system\usb\usb9\usb9.c
002d34   0e01     MOVLW     0x1                                                                                             
002d36   6f28     MOVWF     0x28,0x1                                                                                        
002d38   d000     BRA       0x2d3a                     break;                                                               O:\system\usb\usb9\usb9.c
                                               }//end switch                                                                O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
002d3a   0100     MOVLB     0x0                if(ctrl_trf_session_owner == MUID_USB9)                                      O:\system\usb\usb9\usb9.c
002d3c   056b     DECF      0x6b,0x0,0x1                                                                                    
002d3e   e10a     BNZ       0x2d54                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
002d40   0100     MOVLB     0x0                    pSrc.bRam = (byte*)&CtrlTrfData;            // Set Source                O:\system\usb\usb9\usb9.c
002d42   0e28     MOVLW     0x28                                                                                            
002d44   6f6c     MOVWF     0x6c,0x1                                                                                        
002d46   0e04     MOVLW     0x4                                                                                             
002d48   6f6d     MOVWF     0x6d,0x1                                                                                        
002d4a   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _RAM;               // Set memory type           O:\system\usb\usb9\usb9.c
002d4c   93fb     BCF       0xfb,0x1,0x1                                                                                    
002d4e   0100     MOVLB     0x0                    LSB(wCount) = 2;                            // Set data count            O:\system\usb\usb9\usb9.c
002d50   0e02     MOVLW     0x2                                                                                             
002d52   6f70     MOVWF     0x70,0x1                                                                                        
                                               }//end if(...)                                                               O:\system\usb\usb9\usb9.c
002d54   0012     RETURN    0x0            }//end USBStdGetStatusHandler                                                    O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /******************************************************************************  O:\system\usb\usb9\usb9.c
                                            * Function:        void USBStdFeatureReqHandler(void)                           O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Input:           None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Output:          None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard SET & CLEAR FEATURES       O:\system\usb\usb9\usb9.c
                                            *                  requests                                                     O:\system\usb\usb9\usb9.c
                                            *                                                                               O:\system\usb\usb9\usb9.c
                                            * Note:            None                                                         O:\system\usb\usb9\usb9.c
                                            *****************************************************************************/  O:\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void)                                               O:\system\usb\usb9\usb9.c
                                           {                                                                                O:\system\usb\usb9\usb9.c
002d56   0104     MOVLB     0x4                if((SetupPkt.bFeature == DEVICE_REMOTE_WAKEUP)&&                             O:\system\usb\usb9\usb9.c
002d58   0522     DECF      0x22,0x0,0x1                                                                                    
002d5a   e111     BNZ       0x2d7e                (SetupPkt.Recipient == RCPT_DEV))                                         O:\system\usb\usb9\usb9.c
002d5c   0104     MOVLB     0x4                                                                                             
002d5e   5120     MOVF      0x20,0x0,0x1                                                                                    
002d60   0b1f     ANDLW     0x1f                                                                                            
002d62   0900     IORLW     0x0                                                                                             
002d64   e10c     BNZ       0x2d7e                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
002d66   0100     MOVLB     0x0                    ctrl_trf_session_owner = MUID_USB9;                                      O:\system\usb\usb9\usb9.c
002d68   0e01     MOVLW     0x1                                                                                             
002d6a   6f6b     MOVWF     0x6b,0x1                                                                                        
002d6c   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     O:\system\usb\usb9\usb9.c
002d6e   0104     MOVLB     0x4                                                                                             
002d70   5d21     SUBWF     0x21,0x0,0x1                                                                                    
002d72   e103     BNZ       0x2d7a                                                                                          
002d74   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 1;                                           O:\system\usb\usb9\usb9.c
002d76   81fb     BSF       0xfb,0x0,0x1                                                                                    
002d78   d002     BRA       0x2d7e                 else                                                                     O:\system\usb\usb9\usb9.c
002d7a   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 0;                                           O:\system\usb\usb9\usb9.c
002d7c   91fb     BCF       0xfb,0x0,0x1                                                                                    
                                               }//end if                                                                    O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
002d7e   0104     MOVLB     0x4                if((SetupPkt.bFeature == ENDPOINT_HALT)&&                                    O:\system\usb\usb9\usb9.c
002d80   5122     MOVF      0x22,0x0,0x1                                                                                    
002d82   e13e     BNZ       0x2e00                (SetupPkt.Recipient == RCPT_EP)&&                                         O:\system\usb\usb9\usb9.c
002d84   0104     MOVLB     0x4                                                                                             
002d86   5120     MOVF      0x20,0x0,0x1                                                                                    
002d88   0b1f     ANDLW     0x1f                                                                                            
002d8a   0802     SUBLW     0x2                                                                                             
002d8c   e139     BNZ       0x2e00                                                                                          
002d8e   0104     MOVLB     0x4                   (SetupPkt.EPNum != 0))                                                    O:\system\usb\usb9\usb9.c
002d90   5124     MOVF      0x24,0x0,0x1                                                                                    
002d92   0b0f     ANDLW     0xf                                                                                             
002d94   0900     IORLW     0x0                                                                                             
002d96   e034     BZ        0x2e00                                                                                          
                                               {                                                                            O:\system\usb\usb9\usb9.c
002d98   0100     MOVLB     0x0                    ctrl_trf_session_owner = MUID_USB9;                                      O:\system\usb\usb9\usb9.c
002d9a   0e01     MOVLW     0x1                                                                                             
002d9c   6f6b     MOVWF     0x6b,0x1                                                                                        
                                                   /* Must do address calculation here */                                   O:\system\usb\usb9\usb9.c
002d9e   0104     MOVLB     0x4                    pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);         O:\system\usb\usb9\usb9.c
002da0   5124     MOVF      0x24,0x0,0x1                                                                                    
002da2   0b0f     ANDLW     0xf                                                                                             
002da4   0d08     MULLW     0x8                                                                                             
002da6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002da8   6a2b     CLRF      0x2b,0x0                                                                                        
002daa   0f00     ADDLW     0x0                                                                                             
002dac   6e2a     MOVWF     0x2a,0x0                                                                                        
002dae   0e04     MOVLW     0x4                                                                                             
002db0   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
002db2   0104     MOVLB     0x4                                                                                             
002db4   5124     MOVF      0x24,0x0,0x1                                                                                    
002db6   0b80     ANDLW     0x80                                                                                            
002db8   e001     BZ        0x2dbc                                                                                          
002dba   0e01     MOVLW     0x1                                                                                             
002dbc   0d04     MULLW     0x4                                                                                             
002dbe   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002dc0   0100     MOVLB     0x0                                                                                             
002dc2   242a     ADDWF     0x2a,0x0,0x0                                                                                    
002dc4   6f6e     MOVWF     0x6e,0x1                                                                                        
002dc6   0e00     MOVLW     0x0                                                                                             
002dc8   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
002dca   6f6f     MOVWF     0x6f,0x1                                                                                        
                                                                                                                            O:\system\usb\usb9\usb9.c
002dcc   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     O:\system\usb\usb9\usb9.c
002dce   0104     MOVLB     0x4                                                                                             
002dd0   5d21     SUBWF     0x21,0x0,0x1                                                                                    
002dd2   e107     BNZ       0x2de2                                                                                          
002dd4   0e84     MOVLW     0x84                       *pDst.bRam = _USIE|_BSTALL;                                          O:\system\usb\usb9\usb9.c
002dd6   c06e     MOVFF     0x6e,0xfe9                                                                                      
002dd8   ffe9                                                                                                               
002dda   c06f     MOVFF     0x6f,0xfea                                                                                      
002ddc   ffea                                                                                                               
002dde   6eef     MOVWF     0xef,0x0                                                                                        
002de0   d00f     BRA       0x2e00                 else                                                                     O:\system\usb\usb9\usb9.c
                                                   {                                                                        O:\system\usb\usb9\usb9.c
002de2   0104     MOVLB     0x4                        if(SetupPkt.EPDir == 1) // IN                                        O:\system\usb\usb9\usb9.c
002de4   af24     BTFSS     0x24,0x7,0x1                                                                                    
002de6   d006     BRA       0x2df4                                                                                          
002de8   c06e     MOVFF     0x6e,0xfe9                     *pDst.bRam = _UCPU;                                              O:\system\usb\usb9\usb9.c
002dea   ffe9                                                                                                               
002dec   c06f     MOVFF     0x6f,0xfea                                                                                      
002dee   ffea                                                                                                               
002df0   6aef     CLRF      0xef,0x0                                                                                        
002df2   d006     BRA       0x2e00                     else                                                                 O:\system\usb\usb9\usb9.c
002df4   0e88     MOVLW     0x88                           *pDst.bRam = _USIE|_DAT0|_DTSEN;                                 O:\system\usb\usb9\usb9.c
002df6   c06e     MOVFF     0x6e,0xfe9                                                                                      
002df8   ffe9                                                                                                               
002dfa   c06f     MOVFF     0x6f,0xfea                                                                                      
002dfc   ffea                                                                                                               
002dfe   6eef     MOVWF     0xef,0x0                                                                                        
                                                   }//end if                                                                O:\system\usb\usb9\usb9.c
                                               }//end if                                                                    O:\system\usb\usb9\usb9.c
002e00   0012     RETURN    0x0            }//end USBStdFeatureReqHandler                                                   O:\system\usb\usb9\usb9.c
                                                                                                                            O:\system\usb\usb9\usb9.c
                                           /** EOF usb9.c ***************************************************************/  O:\system\usb\usb9\usb9.c
                                           /*********************************************************************           O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            *********************************************************************           O:\autofiles\usbdsc.c
                                            * FileName:        usbdsc.c                                                     O:\autofiles\usbdsc.c
                                            * Dependencies:    See INCLUDES section below                                   O:\autofiles\usbdsc.c
                                            * Processor:       PIC18                                                        O:\autofiles\usbdsc.c
                                            * Compiler:        C18 2.30.01+                                                 O:\autofiles\usbdsc.c
                                            * Company:         Microchip Technology, Inc.                                   O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * Software License Agreement                                                    O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\autofiles\usbdsc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\autofiles\usbdsc.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\autofiles\usbdsc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\autofiles\usbdsc.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\autofiles\usbdsc.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\autofiles\usbdsc.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\autofiles\usbdsc.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\autofiles\usbdsc.c
                                            * civil liability for the breach of the terms and conditions of this            O:\autofiles\usbdsc.c
                                            * license.                                                                      O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\autofiles\usbdsc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\autofiles\usbdsc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\autofiles\usbdsc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\autofiles\usbdsc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\autofiles\usbdsc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            ********************************************************************/           O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /*********************************************************************           O:\autofiles\usbdsc.c
                                            * -usbdsc.c-                                                                    O:\autofiles\usbdsc.c
                                            * This file contains the USB descriptor information. It is used                 O:\autofiles\usbdsc.c
                                            * in conjunction with the usbdsc.h file. When a descriptor is added             O:\autofiles\usbdsc.c
                                            * or removed from the main configuration descriptor, i.e. CFG01,                O:\autofiles\usbdsc.c
                                            * the user must also change the descriptor structure defined in                 O:\autofiles\usbdsc.c
                                            * the usbdsc.h file. The structure is used to calculate the                     O:\autofiles\usbdsc.c
                                            * descriptor size, i.e. sizeof(CFG01).                                          O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * A typical configuration descriptor consists of:                               O:\autofiles\usbdsc.c
                                            * At least one configuration descriptor (USB_CFG_DSC)                           O:\autofiles\usbdsc.c
                                            * One or more interface descriptors (USB_INTF_DSC)                              O:\autofiles\usbdsc.c
                                            * One or more endpoint descriptors (USB_EP_DSC)                                 O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * Naming Convention:                                                            O:\autofiles\usbdsc.c
                                            * To resolve ambiguity, the naming convention are as followed:                  O:\autofiles\usbdsc.c
                                            * - USB_CFG_DSC type should be named cdxx, where xx is the                      O:\autofiles\usbdsc.c
                                            *   configuration number. This number should match the actual                   O:\autofiles\usbdsc.c
                                            *   index value of this configuration.                                          O:\autofiles\usbdsc.c
                                            * - USB_INTF_DSC type should be named i<yy>a<zz>, where yy is the               O:\autofiles\usbdsc.c
                                            *   interface number and zz is the alternate interface number.                  O:\autofiles\usbdsc.c
                                            * - USB_EP_DSC type should be named ep<##><d>_i<yy>a<zz>, where                 O:\autofiles\usbdsc.c
                                            *   ## is the endpoint number and d is the direction of transfer.               O:\autofiles\usbdsc.c
                                            *   The interface name should also be listed as a suffix to identify            O:\autofiles\usbdsc.c
                                            *   which interface does the endpoint belong to.                                O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * Example:                                                                      O:\autofiles\usbdsc.c
                                            * If a device has one configuration, two interfaces; interface 0                O:\autofiles\usbdsc.c
                                            * has two endpoints (in and out), and interface 1 has one endpoint(in).         O:\autofiles\usbdsc.c
                                            * Then the CFG01 structure in the usbdsc.h should be:                           O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * #define CFG01 rom struct                            \                         O:\autofiles\usbdsc.c
                                            * {   USB_CFG_DSC             cd01;                   \                         O:\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i00a00;                 \                         O:\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01o_i00a00;           \                         O:\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01i_i00a00;           \                         O:\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i01a00;                 \                         O:\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep02i_i01a00;           \                         O:\autofiles\usbdsc.c
                                            * } cfg01                                                                       O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * Note the hierarchy of the descriptors above, it follows the USB               O:\autofiles\usbdsc.c
                                            * specification requirement. All endpoints belonging to an interface            O:\autofiles\usbdsc.c
                                            * should be listed immediately after that interface.                            O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           O:\autofiles\usbdsc.c
                                            * Filling in the descriptor values in the usbdsc.c file:                        O:\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           O:\autofiles\usbdsc.c
                                            * Most items should be self-explanatory, however, a few will be                 O:\autofiles\usbdsc.c
                                            * explained for clarification.                                                  O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * [Configuration Descriptor(USB_CFG_DSC)]                                       O:\autofiles\usbdsc.c
                                            * The configuration attribute must always have the _DEFAULT                     O:\autofiles\usbdsc.c
                                            * definition at the minimum. Additional options can be ORed                     O:\autofiles\usbdsc.c
                                            * to the _DEFAULT attribute. Available options are _SELF and _RWU.              O:\autofiles\usbdsc.c
                                            * These definitions are defined in the usbdefs_std_dsc.h file. The              O:\autofiles\usbdsc.c
                                            * _SELF tells the USB host that this device is self-powered. The                O:\autofiles\usbdsc.c
                                            * _RWU tells the USB host that this device supports Remote Wakeup.              O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * [Endpoint Descriptor(USB_EP_DSC)]                                             O:\autofiles\usbdsc.c
                                            * Assume the following example:                                                 O:\autofiles\usbdsc.c
                                            * sizeof(USB_EP_DSC),DSC_EP,_EP01_OUT,_BULK,64,0x00                             O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * The first two parameters are self-explanatory. They specify the               O:\autofiles\usbdsc.c
                                            * length of this endpoint descriptor (7) and the descriptor type.               O:\autofiles\usbdsc.c
                                            * The next parameter identifies the endpoint, the definitions are               O:\autofiles\usbdsc.c
                                            * defined in usbdefs_std_dsc.h and has the following naming                     O:\autofiles\usbdsc.c
                                            * convention:                                                                   O:\autofiles\usbdsc.c
                                            * _EP<##>_<dir>                                                                 O:\autofiles\usbdsc.c
                                            * where ## is the endpoint number and dir is the direction of                   O:\autofiles\usbdsc.c
                                            * transfer. The dir has the value of either 'OUT' or 'IN'.                      O:\autofiles\usbdsc.c
                                            * The next parameter identifies the type of the endpoint. Available             O:\autofiles\usbdsc.c
                                            * options are _BULK, _INT, _ISO, and _CTRL. The _CTRL is not                    O:\autofiles\usbdsc.c
                                            * typically used because the default control transfer endpoint is               O:\autofiles\usbdsc.c
                                            * not defined in the USB descriptors. When _ISO option is used,                 O:\autofiles\usbdsc.c
                                            * addition options can be ORed to _ISO. Example:                                O:\autofiles\usbdsc.c
                                            * _ISO|_AD|_FE                                                                  O:\autofiles\usbdsc.c
                                            * This describes the endpoint as an isochronous pipe with adaptive              O:\autofiles\usbdsc.c
                                            * and feedback attributes. See usbdefs_std_dsc.h and the USB                    O:\autofiles\usbdsc.c
                                            * specification for details. The next parameter defines the size of             O:\autofiles\usbdsc.c
                                            * the endpoint. The last parameter in the polling interval.                     O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           O:\autofiles\usbdsc.c
                                            * Adding a USB String                                                           O:\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           O:\autofiles\usbdsc.c
                                            * A string descriptor array should have the following format:                   O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[size];}sdxxx={              O:\autofiles\usbdsc.c
                                            * sizeof(sdxxx),DSC_STR,<text>};                                                O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * The above structure provides a means for the C compiler to                    O:\autofiles\usbdsc.c
                                            * calculate the length of string descriptor sdxxx, where xxx is the             O:\autofiles\usbdsc.c
                                            * index number. The first two bytes of the descriptor are descriptor            O:\autofiles\usbdsc.c
                                            * length and type. The rest <text> are string texts which must be               O:\autofiles\usbdsc.c
                                            * in the unicode format. The unicode format is achieved by declaring            O:\autofiles\usbdsc.c
                                            * each character as a word type. The whole text string is declared              O:\autofiles\usbdsc.c
                                            * as a word array with the number of characters equals to <size>.               O:\autofiles\usbdsc.c
                                            * <size> has to be manually counted and entered into the array                  O:\autofiles\usbdsc.c
                                            * declaration. Let's study this through an example:                             O:\autofiles\usbdsc.c
                                            * if the string is "USB" , then the string descriptor should be:                O:\autofiles\usbdsc.c
                                            * (Using index 02)                                                              O:\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[3];}sd002={                 O:\autofiles\usbdsc.c
                                            * sizeof(sd002),DSC_STR,'U','S','B'};                                           O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * A USB project may have multiple strings and the firmware supports             O:\autofiles\usbdsc.c
                                            * the management of multiple strings through a look-up table.                   O:\autofiles\usbdsc.c
                                            * The look-up table is defined as:                                              O:\autofiles\usbdsc.c
                                            * rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};             O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * The above declaration has 3 strings, sd000, sd001, and sd002.                 O:\autofiles\usbdsc.c
                                            * Strings can be removed or added. sd000 is a specialized string                O:\autofiles\usbdsc.c
                                            * descriptor. It defines the language code, usually this is                     O:\autofiles\usbdsc.c
                                            * US English (0x0409). The index of the string must match the index             O:\autofiles\usbdsc.c
                                            * position of the USB_SD_Ptr array, &sd000 must be in position                  O:\autofiles\usbdsc.c
                                            * USB_SD_Ptr[0], &sd001 must be in position USB_SD_Ptr[1] and so on.            O:\autofiles\usbdsc.c
                                            * The look-up table USB_SD_Ptr is used by the get string handler                O:\autofiles\usbdsc.c
                                            * function in usb9.c.                                                           O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * The look-up table scheme also applies to the configuration                    O:\autofiles\usbdsc.c
                                            * descriptor. A USB device may have multiple configuration                      O:\autofiles\usbdsc.c
                                            * descriptors, i.e. CFG01, CFG02, etc. To add a configuration                   O:\autofiles\usbdsc.c
                                            * descriptor, user must implement a structure similar to CFG01.                 O:\autofiles\usbdsc.c
                                            * The next step is to add the configuration descriptor name, i.e.               O:\autofiles\usbdsc.c
                                            * cfg01, cfg02,.., to the look-up table USB_CD_Ptr. USB_CD_Ptr[0]               O:\autofiles\usbdsc.c
                                            * is a dummy place holder since configuration 0 is the un-configured            O:\autofiles\usbdsc.c
                                            * state according to the definition in the USB specification.                   O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            ********************************************************************/           O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /*********************************************************************           O:\autofiles\usbdsc.c
                                            * Descriptor specific type definitions are defined in:                          O:\autofiles\usbdsc.c
                                            * system\usb\usbdefs\usbdefs_std_dsc.h                                          O:\autofiles\usbdsc.c
                                            *                                                                               O:\autofiles\usbdsc.c
                                            * Configuration information is defined in:                                      O:\autofiles\usbdsc.c
                                            * autofiles\usbcfg.h                                                            O:\autofiles\usbdsc.c
                                            ********************************************************************/           O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /** I N C L U D E S *************************************************/           O:\autofiles\usbdsc.c
                                           #include "system\typedefs.h"                                                     O:\autofiles\usbdsc.c
                                           #include "system\usb\usb.h"                                                      O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /** C O N S T A N T S ************************************************/          O:\autofiles\usbdsc.c
                                           #pragma romdata                                                                  O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /* Device Descriptor */                                                          O:\autofiles\usbdsc.c
                                           rom USB_DEV_DSC device_dsc=                                                      O:\autofiles\usbdsc.c
                                           {                                                                                O:\autofiles\usbdsc.c
                                               sizeof(USB_DEV_DSC),    // Size of this descriptor in bytes                  O:\autofiles\usbdsc.c
                                               DSC_DEV,                // DEVICE descriptor type                            O:\autofiles\usbdsc.c
                                               0x0200,                 // USB Spec Release Number in BCD format             O:\autofiles\usbdsc.c
                                               CDC_DEVICE,             // Class Code                                        O:\autofiles\usbdsc.c
                                               0x00,                   // Subclass code                                     O:\autofiles\usbdsc.c
                                               0x00,                   // Protocol code                                     O:\autofiles\usbdsc.c
                                               EP0_BUFF_SIZE,          // Max packet size for EP0, see usbcfg.h             O:\autofiles\usbdsc.c
                                               0x04D8,                 // Vendor ID                                         O:\autofiles\usbdsc.c
                                               0x000A,                 // Product ID: CDC RS-232 Emulation Demo             O:\autofiles\usbdsc.c
                                               0x0000,                 // Device release number in BCD format               O:\autofiles\usbdsc.c
                                               0x01,                   // Manufacturer string index                         O:\autofiles\usbdsc.c
                                               0x02,                   // Product string index                              O:\autofiles\usbdsc.c
                                               0x00,                   // Device serial number string index                 O:\autofiles\usbdsc.c
                                               0x01                    // Number of possible configurations                 O:\autofiles\usbdsc.c
                                           };                                                                               O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /* Configuration 1 Descriptor */                                                 O:\autofiles\usbdsc.c
                                           CFG01=                                                                           O:\autofiles\usbdsc.c
                                           {                                                                                O:\autofiles\usbdsc.c
                                               /* Configuration Descriptor */                                               O:\autofiles\usbdsc.c
                                               sizeof(USB_CFG_DSC),    // Size of this descriptor in bytes                  O:\autofiles\usbdsc.c
                                               DSC_CFG,                // CONFIGURATION descriptor type                     O:\autofiles\usbdsc.c
                                               sizeof(cfg01),          // Total length of data for this cfg                 O:\autofiles\usbdsc.c
                                               2,                      // Number of interfaces in this cfg                  O:\autofiles\usbdsc.c
                                               1,                      // Index value of this configuration                 O:\autofiles\usbdsc.c
                                               0,                      // Configuration string index                        O:\autofiles\usbdsc.c
                                               _DEFAULT,               // Attributes, see usbdefs_std_dsc.h                 O:\autofiles\usbdsc.c
                                               50,                     // Max power consumption (2X mA)                     O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   O:\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  O:\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         O:\autofiles\usbdsc.c
                                               0,                      // Interface Number                                  O:\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          O:\autofiles\usbdsc.c
                                               1,                      // Number of endpoints in this intf                  O:\autofiles\usbdsc.c
                                               COMM_INTF,              // Class code                                        O:\autofiles\usbdsc.c
                                               ABSTRACT_CONTROL_MODEL, // Subclass code                                     O:\autofiles\usbdsc.c
                                               V25TER,                 // Protocol code                                     O:\autofiles\usbdsc.c
                                               0,                      // Interface string index                            O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                               /* CDC Class-Specific Descriptors */                                         O:\autofiles\usbdsc.c
                                               sizeof(USB_CDC_HEADER_FN_DSC),CS_INTERFACE,DSC_FN_HEADER,0x0110,             O:\autofiles\usbdsc.c
                                               sizeof(USB_CDC_ACM_FN_DSC),CS_INTERFACE,DSC_FN_ACM,0x02,                     O:\autofiles\usbdsc.c
                                               sizeof(USB_CDC_UNION_FN_DSC),CS_INTERFACE,DSC_FN_UNION,CDC_COMM_INTF_ID,CDC_DATA_INTF_ID, O:\autofiles\usbdsc.c
                                               sizeof(USB_CDC_CALL_MGT_FN_DSC),CS_INTERFACE,DSC_FN_CALL_MGT,0x00,CDC_DATA_INTF_ID, O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                               /* Endpoint Descriptor */                                                    O:\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP02_IN,_INT,CDC_INT_EP_SIZE,0x02,                O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   O:\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  O:\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         O:\autofiles\usbdsc.c
                                               1,                      // Interface Number                                  O:\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          O:\autofiles\usbdsc.c
                                               2,                      // Number of endpoints in this intf                  O:\autofiles\usbdsc.c
                                               DATA_INTF,              // Class code                                        O:\autofiles\usbdsc.c
                                               0,                      // Subclass code                                     O:\autofiles\usbdsc.c
                                               NO_PROTOCOL,            // Protocol code                                     O:\autofiles\usbdsc.c
                                               0,                      // Interface string index                            O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                               /* Endpoint Descriptors */                                                   O:\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_OUT,_BULK,CDC_BULK_OUT_EP_SIZE,0x00,         O:\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_IN,_BULK,CDC_BULK_IN_EP_SIZE,0x00            O:\autofiles\usbdsc.c
                                           };                                                                               O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[1];}sd000={                    O:\autofiles\usbdsc.c
                                           sizeof(sd000),DSC_STR,0x0409};                                                   O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd001={                   O:\autofiles\usbdsc.c
                                           sizeof(sd001),DSC_STR,                                                           O:\autofiles\usbdsc.c
                                           'M','i','c','r','o','c','h','i','p',' ',                                         O:\autofiles\usbdsc.c
                                           'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};                    O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd002={                   O:\autofiles\usbdsc.c
                                           sizeof(sd002),DSC_STR,                                                           O:\autofiles\usbdsc.c
                                           'C','D','C',' ','R','S','-','2','3','2',' ',                                     O:\autofiles\usbdsc.c
                                           'E','m','u','l','a','t','i','o','n',' ','D','e','m','o'};                        O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_CD_Ptr[]={&cfg01,&cfg01};                       O:\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};                O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           rom pFunc ClassReqHandler[1]=                                                    O:\autofiles\usbdsc.c
                                           {                                                                                O:\autofiles\usbdsc.c
                                               &USBCheckCDCRequest                                                          O:\autofiles\usbdsc.c
                                           };                                                                               O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           #pragma code                                                                     O:\autofiles\usbdsc.c
                                                                                                                            O:\autofiles\usbdsc.c
                                           /** EOF usbdsc.c ****************************************************/           O:\autofiles\usbdsc.c
                                           /*********************************************************************           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *********************************************************************           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * FileName:        usbctrltrf.c                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Dependencies:    See INCLUDES section below                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Processor:       PIC18                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Compiler:        C18 2.30.01+                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Company:         Microchip Technology, Inc.                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Software License Agreement                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * civil liability for the breach of the terms and conditions of this            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * license.                                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Author               Date        Comment                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            ********************************************************************/           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /** I N C L U D E S **********************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           #include <p18cxxx.h>                                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\typedefs.h"                                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\usb\usb.h"                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /** V A R I A B L E S ********************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma udata                                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_state;                // Control Transfer State                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_session_owner;        // Current transfer session owner            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pSrc;                       // Data source pointer                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pDst;                       // Data destination pointer                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           WORD wCount;                        // Data counter                              O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfSetupHandler(void);                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void);                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void);                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma code                                                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPService(void)                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    USTAT is loaded with a valid endpoint address.               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        USBCtrlEPService checks for three transaction types that     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it knows how to service and services them:                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. EP0 SETUP                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. EP0 OUT                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. EP0 IN                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  It ignores all other types (i.e. EP1, EP2, etc.)             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPService(void)                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
0027aa   506c     MOVF      0x6c,0x0,0x0       if(USTAT == EP00_OUT)                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
0027ac   e002     BZ        0x27b2                                                                                          
0027ae   0e00     MOVLW     0x0                                                                                             
0027b0   d001     BRA       0x27b4                                                                                          
0027b2   0e01     MOVLW     0x1                                                                                             
0027b4   0900     IORLW     0x0                                                                                             
0027b6   e00b     BZ        0x27ce                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027b8   0104     MOVLB     0x4                    if(ep0Bo.Stat.PID == SETUP_TOKEN)           // EP0 SETUP                 O:\system\usb\usbctrltrf\usbctrltrf.c
0027ba   5100     MOVF      0x0,0x0,0x1                                                                                     
0027bc   0b3c     ANDLW     0x3c                                                                                            
0027be   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0027c0   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0027c2   080d     SUBLW     0xd                                                                                             
0027c4   e102     BNZ       0x27ca                                                                                          
0027c6   d80c     RCALL     0x27e0                     USBCtrlTrfSetupHandler();                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027c8   d001     BRA       0x27cc                 else                                        // EP0 OUT                   O:\system\usb\usbctrltrf\usbctrltrf.c
0027ca   d842     RCALL     0x2850                     USBCtrlTrfOutHandler();                                              O:\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027cc   d008     BRA       0x27de             else if(USTAT == EP00_IN)                       // EP0 IN                    O:\system\usb\usbctrltrf\usbctrltrf.c
0027ce   506c     MOVF      0x6c,0x0,0x0                                                                                    
0027d0   e002     BZ        0x27d6                                                                                          
0027d2   0e00     MOVLW     0x0                                                                                             
0027d4   d001     BRA       0x27d8                                                                                          
0027d6   0e01     MOVLW     0x1                                                                                             
0027d8   0904     IORLW     0x4                                                                                             
0027da   e001     BZ        0x27de                                                                                          
0027dc   d84b     RCALL     0x2874                 USBCtrlTrfInHandler();                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027de   0012     RETURN    0x0            }//end USBCtrlEPService                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfSetupHandler(void)                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    SetupPkt buffer is loaded with valid USB Setup Data          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine is a task dispatcher and has 3 stages.          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. It initializes the control transfer state machine.        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. It calls on each of the module that may know how to       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     service the Setup Request from the host.                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Module Example: USB9, HID, CDC, MSD, ...                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     As new classes are added, ClassReqHandler table in        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     usbdsc.c should be updated to call all available          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     class handlers.                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. Once each of the modules has had a chance to check if     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     it is responsible for servicing the request, stage 3      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     then checks direction of the transfer to determine how    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     to prepare EP0 for the control transfer.                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Refer to USBCtrlEPServiceComplete() for more details.     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Microchip USB Firmware has three different states for        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  the control transfer state machine:                          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. WAIT_SETUP                                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. CTRL_TRF_TX                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. CTRL_TRF_RX                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Refer to firmware manual to find out how one state           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  is transitioned to another.                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  A Control Transfer is composed of many USB transactions.     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  When transferring data over multiple transactions,           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it is important to keep track of data source, data           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  destination, and data count. These three parameters are      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  stored in pSrc,pDst, and wCount. A flag is used to           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  note if the data source is from ROM or RAM.                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
0027e0   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfSetupHandler(void)                                                O:\system\usb\usbctrltrf\usbctrltrf.c
0027e2   ffe6                                                                                                               
0027e4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0027e6   ffd9                                                                                                               
0027e8   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                               byte i;                                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 1 */                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
0027ea   0100     MOVLB     0x0                ctrl_trf_state = WAIT_SETUP;                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
0027ec   6b6a     CLRF      0x6a,0x1                                                                                        
0027ee   0100     MOVLB     0x0                ctrl_trf_session_owner = MUID_NULL;     // Set owner to NULL                 O:\system\usb\usbctrltrf\usbctrltrf.c
0027f0   6b6b     CLRF      0x6b,0x1                                                                                        
0027f2   0100     MOVLB     0x0                wCount._word = 0;                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027f4   6b70     CLRF      0x70,0x1                                                                                        
0027f6   6b71     CLRF      0x71,0x1                                                                                        
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 2 */                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
0027f8   ec72     CALL      0x2ae4,0x0         USBCheckStdRequest();                   // See system\usb9\usb9.c            O:\system\usb\usbctrltrf\usbctrltrf.c
0027fa   f015                                                                                                               
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0027fc   6adf     CLRF      0xdf,0x0           for(i=0;i < (sizeof(ClassReqHandler)/sizeof(pFunc));i++)                     O:\system\usb\usbctrltrf\usbctrltrf.c
0027fe   50df     MOVF      0xdf,0x0,0x0                                                                                    
002800   6e2a     MOVWF     0x2a,0x0                                                                                        
002802   6a2b     CLRF      0x2b,0x0                                                                                        
002804   0e01     MOVLW     0x1                                                                                             
002806   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002808   0e00     MOVLW     0x0                                                                                             
00280a   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
00280c   e21b     BC        0x2844                                                                                          
002840   2adf     INCF      0xdf,0x1,0x0                                                                                    
002842   d7dd     BRA       0x27fe                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00280e   0100     MOVLB     0x0                    if(ctrl_trf_session_owner != MUID_NULL)break;                            O:\system\usb\usbctrltrf\usbctrltrf.c
002810   516b     MOVF      0x6b,0x0,0x1                                                                                    
002812   e001     BZ        0x2816                                                                                          
002814   d017     BRA       0x2844                                                                                          
002816   6af7     CLRF      0xf7,0x0               ClassReqHandler[i]();               // See autofiles\usbdsc.c            O:\system\usb\usbctrltrf\usbctrltrf.c
002818   34df     RLCF      0xdf,0x0,0x0                                                                                    
00281a   0bfe     ANDLW     0xfe                                                                                            
00281c   36f7     RLCF      0xf7,0x1,0x0                                                                                    
00281e   6ef6     MOVWF     0xf6,0x0                                                                                        
002820   0e81     MOVLW     0x81                                                                                            
002822   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
002824   0e32     MOVLW     0x32                                                                                            
002826   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
002828   0009     TBLRDPOSTINC                                                                                              
00282a   cff5     MOVFF     0xff5,0x2a                                                                                      
00282c   f02a                                                                                                               
00282e   0008     TBLRD                                                                                                     
002830   cff5     MOVFF     0xff5,0x2b                                                                                      
002832   f02b                                                                                                               
002834   d004     BRA       0x283e                                                                                          
002836   c02b     MOVFF     0x2b,0xffa                                                                                      
002838   fffa                                                                                                               
00283a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00283c   6ef9     MOVWF     0xf9,0x0                                                                                        
00283e   dffb     RCALL     0x2836                                                                                          
                                               }//end while                                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 3 */                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002844   d8f0     RCALL     0x2a26             USBCtrlEPServiceComplete();                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002846   52e5     MOVF      0xe5,0x1,0x0   }//end USBCtrlTrfSetupHandler                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
002848   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00284a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00284c   ffd9                                                                                                               
00284e   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfOutHandler(void)                              O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an OUT transaction according to         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Note that if the the control transfer was from               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  host to device, the session owner should be notified         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  at the end of each OUT transaction to service the            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  received data.                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void)                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002850   0e02     MOVLW     0x2                if(ctrl_trf_state == CTRL_TRF_RX)                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002852   0100     MOVLB     0x0                                                                                             
002854   5d6a     SUBWF     0x6a,0x0,0x1                                                                                    
002856   e10c     BNZ       0x2870                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002858   d8a4     RCALL     0x29a2                 USBCtrlTrfRxService();                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Don't have to worry about overwriting _KEEP bit                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    * because if _KEEP was set, TRNIF would not have been                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    * generated in the first place.                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
00285a   0104     MOVLB     0x4                    if(ep0Bo.Stat.DTS == 0)                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
00285c   bd00     BTFSC     0x0,0x6,0x1                                                                                     
00285e   d004     BRA       0x2868                                                                                          
002860   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
002862   0ec8     MOVLW     0xc8                                                                                            
002864   6f00     MOVWF     0x0,0x1                                                                                         
002866   d003     BRA       0x286e                 else                                                                     O:\system\usb\usbctrltrf\usbctrltrf.c
002868   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
00286a   0e88     MOVLW     0x88                                                                                            
00286c   6f00     MOVWF     0x0,0x1                                                                                         
                                               }                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00286e   d001     BRA       0x2872             else    // CTRL_TRF_TX                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
002870   d929     RCALL     0x2ac4                 USBPrepareForNextSetupTrf();                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002872   0012     RETURN    0x0            }//end USBCtrlTrfOutHandler                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfInHandler(void)                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an IN transaction according to          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            A Set Address Request must not change the acutal address     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  of the device until the completion of the control            O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer. The end of the control transfer for Set Address    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Request is an IN transaction. Therefore it is necessary      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  to service this unique situation when the condition is       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  right. Macro mUSBCheckAdrPendingState is defined in          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb9.h and its function is to specifically service this      O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  event.                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void)                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002874   0e04     MOVLW     0x4                mUSBCheckAdrPendingState();         // Must check if in ADR_PENDING_STATE    O:\system\usb\usbctrltrf\usbctrltrf.c
002876   0101     MOVLB     0x1                                                                                             
002878   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
00287a   e10c     BNZ       0x2894                                                                                          
00287c   c422     MOVFF     0x422,0xf6e                                                                                     
00287e   ff6e                                                                                                               
002880   506e     MOVF      0x6e,0x0,0x0                                                                                    
002882   0800     SUBLW     0x0                                                                                             
002884   e204     BC        0x288e                                                                                          
002886   0101     MOVLB     0x1                                                                                             
002888   0e05     MOVLW     0x5                                                                                             
00288a   6ffa     MOVWF     0xfa,0x1                                                                                        
00288c   d003     BRA       0x2894                                                                                          
00288e   0101     MOVLB     0x1                                                                                             
002890   0e03     MOVLW     0x3                                                                                             
002892   6ffa     MOVWF     0xfa,0x1                                                                                        
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002894   0100     MOVLB     0x0                if(ctrl_trf_state == CTRL_TRF_TX)                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002896   056a     DECF      0x6a,0x0,0x1                                                                                    
002898   e10c     BNZ       0x28b2                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00289a   d80d     RCALL     0x28b6                 USBCtrlTrfTxService();                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00289c   0104     MOVLB     0x4                    if(ep0Bi.Stat.DTS == 0)                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
00289e   bd04     BTFSC     0x4,0x6,0x1                                                                                     
0028a0   d004     BRA       0x28aa                                                                                          
0028a2   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
0028a4   0ec8     MOVLW     0xc8                                                                                            
0028a6   6f04     MOVWF     0x4,0x1                                                                                         
0028a8   d003     BRA       0x28b0                 else                                                                     O:\system\usb\usbctrltrf\usbctrltrf.c
0028aa   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT0|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
0028ac   0e88     MOVLW     0x88                                                                                            
0028ae   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0028b0   d001     BRA       0x28b4             else // CTRL_TRF_RX                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028b2   d908     RCALL     0x2ac4                 USBPrepareForNextSetupTrf();                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0028b4   0012     RETURN    0x0            }//end USBCtrlTrfInHandler                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfTxService(void)                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pSrc, wCount, and usb_stat.ctrl_trf_mem are setup properly.  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine should be called from only two places.          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  One from USBCtrlEPServiceComplete() and one from             O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  USBCtrlTrfInHandler(). It takes care of managing a           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer over multiple USB transactions.                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            This routine works with isochronous endpoint larger than     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  256 bytes and is shown here as an example of how to deal     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  with BC9 and BC8. In reality, a control endpoint can never   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  be larger than 64 bytes.                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
0028b6   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfTxService(void)                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
0028b8   ffe6                                                                                                               
0028ba   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0028bc   ffd9                                                                                                               
0028be   0e02     MOVLW     0x2                                                                                             
0028c0   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_send;                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * First, have to figure out how many byte of data to send.                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028c2   0100     MOVLB     0x0                if(wCount._word < EP0_BUFF_SIZE)                                             O:\system\usb\usbctrltrf\usbctrltrf.c
0028c4   0e08     MOVLW     0x8                                                                                             
0028c6   5d70     SUBWF     0x70,0x0,0x1                                                                                    
0028c8   0e00     MOVLW     0x0                                                                                             
0028ca   5971     SUBWFB    0x71,0x0,0x1                                                                                    
0028cc   e205     BC        0x28d8                                                                                          
0028ce   c070     MOVFF     0x70,0xfde             byte_to_send._word = wCount._word;                                       O:\system\usb\usbctrltrf\usbctrltrf.c
0028d0   ffde                                                                                                               
0028d2   c071     MOVFF     0x71,0xfdd                                                                                      
0028d4   ffdd                                                                                                               
0028d6   d003     BRA       0x28de             else                                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
0028d8   0e08     MOVLW     0x8                    byte_to_send._word = EP0_BUFF_SIZE;                                      O:\system\usb\usbctrltrf\usbctrltrf.c
0028da   6ede     MOVWF     0xde,0x0                                                                                        
0028dc   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * Next, load the number of bytes to send to BC9..0 in buffer descriptor     O:\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028de   0104     MOVLB     0x4                ep0Bi.Stat.BC9 = 0;                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028e0   9304     BCF       0x4,0x1,0x1                                                                                     
0028e2   0104     MOVLB     0x4                ep0Bi.Stat.BC8 = 0;                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028e4   9104     BCF       0x4,0x0,0x1                                                                                     
0028e6   0e01     MOVLW     0x1                ep0Bi.Stat._byte |= MSB(byte_to_send);                                       O:\system\usb\usbctrltrf\usbctrltrf.c
0028e8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0028ea   0104     MOVLB     0x4                                                                                             
0028ec   1304     IORWF     0x4,0x1,0x1                                                                                     
0028ee   cfdf     MOVFF     0xfdf,0x405        ep0Bi.Cnt = LSB(byte_to_send);                                               O:\system\usb\usbctrltrf\usbctrltrf.c
0028f0   f405                                                                                                               
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * Subtract the number of bytes just about to be sent from the total.        O:\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0028f2   0e00     MOVLW     0x0                wCount._word = wCount._word - byte_to_send._word;                            O:\system\usb\usbctrltrf\usbctrltrf.c
0028f4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0028f6   0100     MOVLB     0x0                                                                                             
0028f8   5f70     SUBWF     0x70,0x1,0x1                                                                                    
0028fa   0e01     MOVLW     0x1                                                                                             
0028fc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0028fe   0100     MOVLB     0x0                                                                                             
002900   5b71     SUBWFB    0x71,0x1,0x1                                                                                    
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002902   0100     MOVLB     0x0                pDst.bRam = (byte*)&CtrlTrfData;        // Set destination pointer           O:\system\usb\usbctrltrf\usbctrltrf.c
002904   0e28     MOVLW     0x28                                                                                            
002906   6f6e     MOVWF     0x6e,0x1                                                                                        
002908   0e04     MOVLW     0x4                                                                                             
00290a   6f6f     MOVWF     0x6f,0x1                                                                                        
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00290c   0101     MOVLB     0x1                if(usb_stat.ctrl_trf_mem == _ROM)       // Determine type of memory source   O:\system\usb\usbctrltrf\usbctrltrf.c
00290e   a3fb     BTFSS     0xfb,0x1,0x1                                                                                    
002910   d020     BRA       0x2952                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002912   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002914   ffe9                                                                                                               
002916   cfda     MOVFF     0xfda,0xfea                                                                                     
002918   ffea                                                                                                               
00291a   50ee     MOVF      0xee,0x0,0x0                                                                                    
00291c   10ed     IORWF     0xed,0x0,0x0                                                                                    
00291e   e018     BZ        0x2950                                                                                          
00294e   d7e1     BRA       0x2912                                                                                          
                                                   {                                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002920   c06c     MOVFF     0x6c,0xff6                 *pDst.bRam = *pSrc.bRom;                                             O:\system\usb\usbctrltrf\usbctrltrf.c
002922   fff6                                                                                                               
002924   c06d     MOVFF     0x6d,0xff7                                                                                      
002926   fff7                                                                                                               
002928   0008     TBLRD                                                                                                     
00292a   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00292c   c06e     MOVFF     0x6e,0xfe9                                                                                      
00292e   ffe9                                                                                                               
002930   c06f     MOVFF     0x6f,0xfea                                                                                      
002932   ffea                                                                                                               
002934   6eef     MOVWF     0xef,0x0                                                                                        
002936   0100     MOVLB     0x0                        pDst.bRam++;                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
002938   2b6e     INCF      0x6e,0x1,0x1                                                                                    
00293a   0e00     MOVLW     0x0                                                                                             
00293c   236f     ADDWFC    0x6f,0x1,0x1                                                                                    
00293e   0100     MOVLB     0x0                        pSrc.bRom++;                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
002940   2b6c     INCF      0x6c,0x1,0x1                                                                                    
002942   0e00     MOVLW     0x0                                                                                             
002944   236d     ADDWFC    0x6d,0x1,0x1                                                                                    
002946   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002948   0e01     MOVLW     0x1                                                                                             
00294a   e201     BC        0x294e                                                                                          
00294c   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002950   d01e     BRA       0x298e             else // RAM                                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002952   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002954   ffe9                                                                                                               
002956   cfda     MOVFF     0xfda,0xfea                                                                                     
002958   ffea                                                                                                               
00295a   50ee     MOVF      0xee,0x0,0x0                                                                                    
00295c   10ed     IORWF     0xed,0x0,0x0                                                                                    
00295e   e017     BZ        0x298e                                                                                          
00298c   d7e2     BRA       0x2952                                                                                          
                                                   {                                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002960   c06c     MOVFF     0x6c,0xfe9                 *pDst.bRam = *pSrc.bRam;                                             O:\system\usb\usbctrltrf\usbctrltrf.c
002962   ffe9                                                                                                               
002964   c06d     MOVFF     0x6d,0xfea                                                                                      
002966   ffea                                                                                                               
002968   50ef     MOVF      0xef,0x0,0x0                                                                                    
00296a   c06e     MOVFF     0x6e,0xfe9                                                                                      
00296c   ffe9                                                                                                               
00296e   c06f     MOVFF     0x6f,0xfea                                                                                      
002970   ffea                                                                                                               
002972   6eef     MOVWF     0xef,0x0                                                                                        
002974   0100     MOVLB     0x0                        pDst.bRam++;                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
002976   2b6e     INCF      0x6e,0x1,0x1                                                                                    
002978   0e00     MOVLW     0x0                                                                                             
00297a   236f     ADDWFC    0x6f,0x1,0x1                                                                                    
00297c   0100     MOVLB     0x0                        pSrc.bRam++;                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
00297e   2b6c     INCF      0x6c,0x1,0x1                                                                                    
002980   0e00     MOVLW     0x0                                                                                             
002982   236d     ADDWFC    0x6d,0x1,0x1                                                                                    
002984   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002986   0e01     MOVLW     0x1                                                                                             
002988   e201     BC        0x298c                                                                                          
00298a   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(usb_stat.ctrl_trf_mem == _ROM)                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
00298e   0e02     MOVLW     0x2            }//end USBCtrlTrfTxService                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
002990   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002992   e202     BC        0x2998                                                                                          
002994   6ae1     CLRF      0xe1,0x0                                                                                        
002996   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002998   6ee1     MOVWF     0xe1,0x0                                                                                        
00299a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00299c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00299e   ffd9                                                                                                               
0029a0   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfRxService(void)                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pDst and wCount are setup properly.                          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  pSrc is always &CtrlTrfData                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb_stat.ctrl_trf_mem is always _RAM.                        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  wCount should be set to 0 at the start of each control       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer.                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        *** This routine is only partially complete. Check for       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  new version of the firmware.                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
0029a2   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfRxService(void)                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
0029a4   ffe6                                                                                                               
0029a6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0029a8   ffd9                                                                                                               
0029aa   0e02     MOVLW     0x2                                                                                             
0029ac   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_read;                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0029ae   0e03     MOVLW     0x3                MSB(byte_to_read) = 0x03 & ep0Bo.Stat._byte;    // Filter out last 2 bits    O:\system\usb\usbctrltrf\usbctrltrf.c
0029b0   0104     MOVLB     0x4                                                                                             
0029b2   1500     ANDWF     0x0,0x0,0x1                                                                                     
0029b4   6ee7     MOVWF     0xe7,0x0                                                                                        
0029b6   0e01     MOVLW     0x1                                                                                             
0029b8   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0029ba   ffdb                                                                                                               
0029bc   c401     MOVFF     0x401,0xfdf        LSB(byte_to_read) = ep0Bo.Cnt;                                               O:\system\usb\usbctrltrf\usbctrltrf.c
0029be   ffdf                                                                                                               
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * Accumulate total number of bytes read                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
0029c0   50de     MOVF      0xde,0x0,0x0       wCount._word = wCount._word + byte_to_read._word;                            O:\system\usb\usbctrltrf\usbctrltrf.c
0029c2   0100     MOVLB     0x0                                                                                             
0029c4   2770     ADDWF     0x70,0x1,0x1                                                                                    
0029c6   50dd     MOVF      0xdd,0x0,0x0                                                                                    
0029c8   0100     MOVLB     0x0                                                                                             
0029ca   2371     ADDWFC    0x71,0x1,0x1                                                                                    
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0029cc   0100     MOVLB     0x0                pSrc.bRam = (byte*)&CtrlTrfData;                                             O:\system\usb\usbctrltrf\usbctrltrf.c
0029ce   0e28     MOVLW     0x28                                                                                            
0029d0   6f6c     MOVWF     0x6c,0x1                                                                                        
0029d2   0e04     MOVLW     0x4                                                                                             
0029d4   6f6d     MOVWF     0x6d,0x1                                                                                        
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0029d6   cfd9     MOVFF     0xfd9,0xfe9        while(byte_to_read._word)                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
0029d8   ffe9                                                                                                               
0029da   cfda     MOVFF     0xfda,0xfea                                                                                     
0029dc   ffea                                                                                                               
0029de   50ee     MOVF      0xee,0x0,0x0                                                                                    
0029e0   10ed     IORWF     0xed,0x0,0x0                                                                                    
0029e2   e017     BZ        0x2a12                                                                                          
002a10   d7e2     BRA       0x29d6                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
0029e4   c06c     MOVFF     0x6c,0xfe9             *pDst.bRam = *pSrc.bRam;                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
0029e6   ffe9                                                                                                               
0029e8   c06d     MOVFF     0x6d,0xfea                                                                                      
0029ea   ffea                                                                                                               
0029ec   50ef     MOVF      0xef,0x0,0x0                                                                                    
0029ee   c06e     MOVFF     0x6e,0xfe9                                                                                      
0029f0   ffe9                                                                                                               
0029f2   c06f     MOVFF     0x6f,0xfea                                                                                      
0029f4   ffea                                                                                                               
0029f6   6eef     MOVWF     0xef,0x0                                                                                        
0029f8   0100     MOVLB     0x0                    pDst.bRam++;                                                             O:\system\usb\usbctrltrf\usbctrltrf.c
0029fa   2b6e     INCF      0x6e,0x1,0x1                                                                                    
0029fc   0e00     MOVLW     0x0                                                                                             
0029fe   236f     ADDWFC    0x6f,0x1,0x1                                                                                    
002a00   0100     MOVLB     0x0                    pSrc.bRam++;                                                             O:\system\usb\usbctrltrf\usbctrltrf.c
002a02   2b6c     INCF      0x6c,0x1,0x1                                                                                    
002a04   0e00     MOVLW     0x0                                                                                             
002a06   236d     ADDWFC    0x6d,0x1,0x1                                                                                    
002a08   06df     DECF      0xdf,0x1,0x0           byte_to_read._word--;                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
002a0a   0e01     MOVLW     0x1                                                                                             
002a0c   e201     BC        0x2a10                                                                                          
002a0e   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while(byte_to_read._word)                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a12   0e02     MOVLW     0x2            }//end USBCtrlTrfRxService                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
002a14   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002a16   e202     BC        0x2a1c                                                                                          
002a18   6ae1     CLRF      0xe1,0x0                                                                                        
002a1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a1c   6ee1     MOVWF     0xe1,0x0                                                                                        
002a1e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a20   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002a22   ffd9                                                                                                               
002a24   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPServiceComplete(void)                          O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine wrap up the ramaining tasks in servicing        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a Setup Request. Its main task is to set the endpoint        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  controls appropriately for a given situation. See code       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  below.                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  There are three main scenarios:                              O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a) There was no handler for the Request, in this case        O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a STALL should be sent out.                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  b) The host has requested a read control transfer,           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     endpoints are required to be setup in a specific way.     O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  c) The host has requested a write control transfer, or       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a control data stage is not required, endpoints are       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     required to be setup in a specific way.                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Packet processing is resumed by clearing PKTDIS bit.         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPServiceComplete(void)                                              O:\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * PKTDIS bit is set when a Setup Transaction is received.                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                * Clear to resume packet processing.                                        O:\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          O:\system\usb\usbctrltrf\usbctrltrf.c
002a26   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a28   0100     MOVLB     0x0                if(ctrl_trf_session_owner == MUID_NULL)                                      O:\system\usb\usbctrltrf\usbctrltrf.c
002a2a   516b     MOVF      0x6b,0x0,0x1                                                                                    
002a2c   e10f     BNZ       0x2a4c                                                                                          
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    * If no one knows how to service this request then stall.               O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Must also prepare EP0 to receive the next SETUP transaction.          O:\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      O:\system\usb\usbctrltrf\usbctrltrf.c
002a2e   0104     MOVLB     0x4                    ep0Bo.Cnt = EP0_BUFF_SIZE;                                               O:\system\usb\usbctrltrf\usbctrltrf.c
002a30   0e08     MOVLW     0x8                                                                                             
002a32   6f01     MOVWF     0x1,0x1                                                                                         
002a34   0104     MOVLB     0x4                    ep0Bo.ADR = (byte*)&SetupPkt;                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a36   0e20     MOVLW     0x20                                                                                            
002a38   6f02     MOVWF     0x2,0x1                                                                                         
002a3a   0e04     MOVLW     0x4                                                                                             
002a3c   6f03     MOVWF     0x3,0x1                                                                                         
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a3e   0104     MOVLB     0x4                    ep0Bo.Stat._byte = _USIE|_BSTALL;                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a40   0e84     MOVLW     0x84                                                                                            
002a42   6f00     MOVWF     0x0,0x1                                                                                         
002a44   0104     MOVLB     0x4                    ep0Bi.Stat._byte = _USIE|_BSTALL;                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a46   0e84     MOVLW     0x84                                                                                            
002a48   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a4a   d03b     BRA       0x2ac2             else    // A module has claimed ownership of the control transfer session.   O:\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
002a4c   0104     MOVLB     0x4                    if(SetupPkt.DataDir == DEV_TO_HOST)                                      O:\system\usb\usbctrltrf\usbctrltrf.c
002a4e   af20     BTFSS     0x20,0x7,0x1                                                                                    
002a50   d025     BRA       0x2a9c                                                                                          
                                                   {                                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a52   0100     MOVLB     0x0                        if(SetupPkt.wLength < wCount._word)                                  O:\system\usb\usbctrltrf\usbctrltrf.c
002a54   5170     MOVF      0x70,0x0,0x1                                                                                    
002a56   0104     MOVLB     0x4                                                                                             
002a58   5d26     SUBWF     0x26,0x0,0x1                                                                                    
002a5a   0100     MOVLB     0x0                                                                                             
002a5c   5171     MOVF      0x71,0x0,0x1                                                                                    
002a5e   0104     MOVLB     0x4                                                                                             
002a60   5927     SUBWFB    0x27,0x0,0x1                                                                                    
002a62   e204     BC        0x2a6c                                                                                          
002a64   c426     MOVFF     0x426,0x70                     wCount._word = SetupPkt.wLength;                                 O:\system\usb\usbctrltrf\usbctrltrf.c
002a66   f070                                                                                                               
002a68   c427     MOVFF     0x427,0x71                                                                                      
002a6a   f071                                                                                                               
002a6c   df24     RCALL     0x28b6                     USBCtrlTrfTxService();                                               O:\system\usb\usbctrltrf\usbctrltrf.c
002a6e   0100     MOVLB     0x0                        ctrl_trf_state = CTRL_TRF_TX;                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a70   0e01     MOVLW     0x1                                                                                             
002a72   6f6a     MOVWF     0x6a,0x1                                                                                        
                                                       /*                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Read:                                                     O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><IN[1]><IN[0]>...<OUT[1]> | <SETUP[0]>                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare OUT EP to respond to early termination                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * NOTE:                                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * If something went wrong during the control transfer,              O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the last status stage may not be sent by the host.                O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * When this happens, two different things could happen              O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * depending on the host.                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * a) The host could send out a RESET.                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * b) The host could send out a new SETUP transaction                O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    without sending a RESET first.                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * To properly handle case (b), the OUT EP must be setup             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * to receive either a zero length OUT transaction, or a             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * new SETUP transaction.                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Since the SETUP transaction requires the DTS bit to be            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * DAT0 while the zero length OUT status requires the DTS            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * bit to be DAT1, the DTS bit check by the hardware should          O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * be disabled. This way the SIE could accept either of              O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the two transactions.                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Furthermore, the Cnt byte should be set to prepare for            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the SETUP data (8-byte or more), and the buffer address           O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * should be pointed to SetupPkt.                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
002a74   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           O:\system\usb\usbctrltrf\usbctrltrf.c
002a76   0e08     MOVLW     0x8                                                                                             
002a78   6f01     MOVWF     0x1,0x1                                                                                         
002a7a   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&SetupPkt;                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a7c   0e20     MOVLW     0x20                                                                                            
002a7e   6f02     MOVWF     0x2,0x1                                                                                         
002a80   0e04     MOVLW     0x4                                                                                             
002a82   6f03     MOVWF     0x3,0x1                                                                                         
002a84   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE;           // Note: DTSEN is 0!             O:\system\usb\usbctrltrf\usbctrltrf.c
002a86   0e80     MOVLW     0x80                                                                                            
002a88   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare IN EP to transfer data, Cnt should have                O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    been initialized by responsible request owner.                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
002a8a   0104     MOVLB     0x4                        ep0Bi.ADR = (byte*)&CtrlTrfData;                                     O:\system\usb\usbctrltrf\usbctrltrf.c
002a8c   0e28     MOVLW     0x28                                                                                            
002a8e   6f06     MOVWF     0x6,0x1                                                                                         
002a90   0e04     MOVLW     0x4                                                                                             
002a92   6f07     MOVWF     0x7,0x1                                                                                         
002a94   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
002a96   0ec8     MOVLW     0xc8                                                                                            
002a98   6f04     MOVWF     0x4,0x1                                                                                         
                                                   }                                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a9a   d013     BRA       0x2ac2                 else    // (SetupPkt.DataDir == HOST_TO_DEV)                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                                   {                                                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a9c   0100     MOVLB     0x0                        ctrl_trf_state = CTRL_TRF_RX;                                        O:\system\usb\usbctrltrf\usbctrltrf.c
002a9e   0e02     MOVLW     0x2                                                                                             
002aa0   6f6a     MOVWF     0x6a,0x1                                                                                        
                                                       /*                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Write:                                                    O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><OUT[1]><OUT[0]>...<IN[1]> | <SETUP[0]>                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare IN EP to respond to early termination                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    This is the same as a Zero Length Packet Response              O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    for control transfer without a data stage                      O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
002aa2   0104     MOVLB     0x4                        ep0Bi.Cnt = 0;                                                       O:\system\usb\usbctrltrf\usbctrltrf.c
002aa4   6b05     CLRF      0x5,0x1                                                                                         
002aa6   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
002aa8   0ec8     MOVLW     0xc8                                                                                            
002aaa   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare OUT EP to receive data.                                O:\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
002aac   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           O:\system\usb\usbctrltrf\usbctrltrf.c
002aae   0e08     MOVLW     0x8                                                                                             
002ab0   6f01     MOVWF     0x1,0x1                                                                                         
002ab2   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&CtrlTrfData;                                     O:\system\usb\usbctrltrf\usbctrltrf.c
002ab4   0e28     MOVLW     0x28                                                                                            
002ab6   6f02     MOVWF     0x2,0x1                                                                                         
002ab8   0e04     MOVLW     0x4                                                                                             
002aba   6f03     MOVWF     0x3,0x1                                                                                         
002abc   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               O:\system\usb\usbctrltrf\usbctrltrf.c
002abe   0ec8     MOVLW     0xc8                                                                                            
002ac0   6f00     MOVWF     0x0,0x1                                                                                         
                                                   }//end if(SetupPkt.DataDir == DEV_TO_HOST)                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(ctrl_trf_session_owner == MUID_NULL)                               O:\system\usb\usbctrltrf\usbctrltrf.c
002ac2   0012     RETURN    0x0            }//end USBCtrlEPServiceComplete                                                  O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBPrepareForNextSetupTrf(void)                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        The routine forces EP0 OUT to be ready for a new Setup       O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transaction, and forces EP0 IN to be owned by CPU.           O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               O:\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         O:\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBPrepareForNextSetupTrf(void)                                             O:\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002ac4   0100     MOVLB     0x0                ctrl_trf_state = WAIT_SETUP;            // See usbctrltrf.h                  O:\system\usb\usbctrltrf\usbctrltrf.c
002ac6   6b6a     CLRF      0x6a,0x1                                                                                        
002ac8   0104     MOVLB     0x4                ep0Bo.Cnt = EP0_BUFF_SIZE;              // Defined in usbcfg.h               O:\system\usb\usbctrltrf\usbctrltrf.c
002aca   0e08     MOVLW     0x8                                                                                             
002acc   6f01     MOVWF     0x1,0x1                                                                                         
002ace   0104     MOVLB     0x4                ep0Bo.ADR = (byte*)&SetupPkt;                                                O:\system\usb\usbctrltrf\usbctrltrf.c
002ad0   0e20     MOVLW     0x20                                                                                            
002ad2   6f02     MOVWF     0x2,0x1                                                                                         
002ad4   0e04     MOVLW     0x4                                                                                             
002ad6   6f03     MOVWF     0x3,0x1                                                                                         
002ad8   0104     MOVLB     0x4                ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;  // EP0 buff dsc init, see usbmmap.h  O:\system\usb\usbctrltrf\usbctrltrf.c
002ada   0e88     MOVLW     0x88                                                                                            
002adc   6f00     MOVWF     0x0,0x1                                                                                         
002ade   0104     MOVLB     0x4                ep0Bi.Stat._byte = _UCPU;               // EP0 IN buffer initialization      O:\system\usb\usbctrltrf\usbctrltrf.c
002ae0   6b04     CLRF      0x4,0x1                                                                                         
002ae2   0012     RETURN    0x0            }//end USBPrepareForNextSetupTrf                                                 O:\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /** EOF usbctrltrf.c *********************************************************/  O:\system\usb\usbctrltrf\usbctrltrf.c
                                           /*********************************************************************           O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            *                Microchip USB C18 Firmware Version 1.0                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            *********************************************************************           O:\user\user.c
                                            * FileName:        user.c                                                       O:\user\user.c
                                            * Dependencies:    See INCLUDES section below                                   O:\user\user.c
                                            * Processor:       PIC18                                                        O:\user\user.c
                                            * Compiler:        C18 2.30.01+                                                 O:\user\user.c
                                            * Company:         Microchip Technology, Inc.                                   O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Software License Agreement                                                    O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\user\user.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\user\user.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\user\user.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\user\user.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\user\user.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\user\user.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\user\user.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\user\user.c
                                            * civil liability for the breach of the terms and conditions of this            O:\user\user.c
                                            * license.                                                                      O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\user\user.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\user\user.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\user\user.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\user\user.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\user\user.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Author               Date		Comment                                            O:\user\user.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\user\user.c
                                            * Rawin Rojvanit       11/19/04	Original.                                       O:\user\user.c
                                            * Brian Schmalz	03/15/06	Added user code to implement                           O:\user\user.c
                                            *									firmware version D v1.0 for UBW                                       O:\user\user.c
                                            *									project. See www.greta.dhs.org/UBW                                    O:\user\user.c
                                            * Brian Schmalz	05/04/06	Starting version 1.1, which will                       O:\user\user.c
                                            * 									include several fixes. See website.                                  O:\user\user.c
                                            * BPS					06/21/06	Starting v1.2 -                                              O:\user\user.c
                                            * - Fixed problem with I packets (from T command) filling up TX buffer          O:\user\user.c
                                            * 		and not letting any incoming commands be received. (strange)                O:\user\user.c
                                            * - Adding several commands - Analog inputs being the biggest set.              O:\user\user.c
                                            * - Also Byte read/Byte write (PEEK/POKE) anywhere in memory                    O:\user\user.c
                                            * - Individual pin I/O and direction                                            O:\user\user.c
                                            * BPS			08/16/06	v1.3 - Fixed bug with USB startup                              O:\user\user.c
                                            * BPS			09/09/06	v1.4 - Starting 1.4                                            O:\user\user.c
                                            * - Fixed Microchip bug with early silicon - UCONbits.PKTDIS = 0;               O:\user\user.c
                                            * - Adding BO and BC commands for parallel output to graphics pannels           O:\user\user.c
                                            * BPS			12/06/06	v1.4 - More work on 1.4                                        O:\user\user.c
                                            * - Re-wrote all I/O buffering code for increased speed and functionality       O:\user\user.c
                                            * - Re-wrote error handling code                                                O:\user\user.c
                                            * - Added delays to BC/BO commands to help Corey                                O:\user\user.c
                                            * BPS			01/06/07	v1.4 - Added RC command for servos                             O:\user\user.c
                                            * BPS			03/07/07	v1.4.1 - Changed blink rate for SFE                            O:\user\user.c
                                            * BPS			05/24/07	v1.4.2 - Fixed RC command bug - it                             O:\user\user.c
                                            *									wouldn't shut off.                                                    O:\user\user.c
                                            * Luke Orland		2007/08/28	added some stuff                                      O:\user\user.c
                                            * LJO			2007/09/29	v0.32 - added race test mode and timeclock                   O:\user\user.c
                                            * LJO			2008/03/31	v0.33 - cheese sandwich day! removed lots of UBW stuff,      O:\user\user.c
                                            * 					      - added support for up to 8 rollers,                               O:\user\user.c
                                            * 					      - changed the timestamp output format.                             O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * To Do:                                                                        O:\user\user.c
                                            *  - switch to milliseconds instead of centiseconds                             O:\user\user.c
                                            *  - incorporate new changes                                                    O:\user\user.c
                                            *    * stop after finish_tick is reached                                        O:\user\user.c
                                            *    * activate specified rollers                                               O:\user\user.c
                                            *    * new messages to PC sw                                                    O:\user\user.c
                                            *    * change timestamps to 1000ths of a second                                 O:\user\user.c
                                            *  - test and debug                                                             O:\user\user.c
                                            *  - ECHO mode                                                                  O:\user\user.c
                                            *  - FW sends confirmation message back to SW when receives a command.          O:\user\user.c
                                            *  - interrupt on state change of pins                                          O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Scratch list:                                                                 O:\user\user.c
                                            *  - handshaking                                                                O:\user\user.c
                                            *    * if PC doesn't get the message in the precise format, asks for a resend   O:\user\user.c
                                            *  - parse_RS_packet // resend                                                  O:\user\user.c
                                            *  - switch to sending serial data instead of ascii chars. (yaml?)              O:\user\user.c
                                           	* DONE: ISR                                                                     O:\user\user.c
                                           	* DONE: check in ProcessIO() {?} if it is time to send update                   O:\user\user.c
                                           	* DONE: send update to pc                                                       O:\user\user.c
                                           	* DONE: init pins for input on REGB                                             O:\user\user.c
                                           	* DONE: HW and GO commands                                                      O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            *************************************************************************/      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** I N C L U D E S ******************************************************/      O:\user\user.c
                                           #include <p18cxxx.h>                                                             O:\user\user.c
                                           #include <usart.h>                                                               O:\user\user.c
                                           #include <stdio.h>                                                               O:\user\user.c
                                           #include <ctype.h>                                                               O:\user\user.c
                                           #include <delays.h>                                                              O:\user\user.c
                                           #include "system\typedefs.h"                                                     O:\user\user.c
                                           #include "system\usb\usb.h"                                                      O:\user\user.c
                                           #include "io_cfg.h"             // I/O pin mapping                               O:\user\user.c
                                           #include "user\user.h"                                                           O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** D E F I N E S ********************************************************/      O:\user\user.c
                                           #define bitset(var,bitno) ((var) |= (1 << (bitno)))                              O:\user\user.c
                                           #define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))                             O:\user\user.c
                                           #define bittst(var,bitno) (var& (1 << (bitno)))                                  O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // For the RC command, we define a little data structure that holds the          O:\user\user.c
                                           // values assoicated with a particular servo connection                          O:\user\user.c
                                           // It's port, pin, value (position) and state (INACTIVE, PRIMED or TIMING)       O:\user\user.c
                                           // Later on we make an array of these (19 elements long - 19 pins) to track      O:\user\user.c
                                           // the values of all of the servos.                                              O:\user\user.c
                                           typedef enum {                                                                   O:\user\user.c
                                           	 kOFF = 1                                                                       O:\user\user.c
                                           	,kWAITING                                                                       O:\user\user.c
                                           	,kPRIMED                                                                        O:\user\user.c
                                           	,kTIMING                                                                        O:\user\user.c
                                           } tRC_state;                                                                     O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #define kRC_DATA_SIZE		24		// In structs, since there are 3 ports of 8 bits each O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #define kTX_BUF_SIZE 		64		// In bytes                                           O:\user\user.c
                                           #define kRX_BUF_SIZE		64		// In bytes                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #define kUSART_TX_BUF_SIZE	64		// In bytes                                       O:\user\user.c
                                           #define kUSART_RX_BUF_SIZE	64		// In bytes                                       O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Enum for extract_num() function parameter                                     O:\user\user.c
                                           typedef enum {                                                                   O:\user\user.c
                                           	 kCHAR                                                                          O:\user\user.c
                                           	,kUCHAR                                                                         O:\user\user.c
                                           	,kINT                                                                           O:\user\user.c
                                           	,kUINT                                                                          O:\user\user.c
                                           	,kASCII_CHAR                                                                    O:\user\user.c
                                           	,kUCASE_ASCII_CHAR                                                              O:\user\user.c
                                           } tExtractType;                                                                  O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #define advance_RX_buf_out()			\                                                 O:\user\user.c
                                           { 						\                                                                        O:\user\user.c
                                           	g_RX_buf_out++;				\                                                            O:\user\user.c
                                           	if (kRX_BUF_SIZE == g_RX_buf_out)	\                                             O:\user\user.c
                                           	{					\                                                                         O:\user\user.c
                                           		g_RX_buf_out = 0;		\                                                           O:\user\user.c
                                           	}					\                                                                         O:\user\user.c
                                           }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #define kISR_FIFO_A_DEPTH			3                                                    O:\user\user.c
                                           #define kISR_FIFO_D_DEPTH			3                                                    O:\user\user.c
                                           #define kPR2_RELOAD				250		// For 1ms TMR2 tick                                 O:\user\user.c
                                           #define kCR					0x0D                                                             O:\user\user.c
                                           #define kLF					0x0A                                                             O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // defines for the error_byte byte - each bit has a meaning                      O:\user\user.c
                                           #define kERROR_BYTE_TX_BUF_OVERRUN		2                                            O:\user\user.c
                                           #define kERROR_BYTE_RX_BUFFER_OVERRUN		3                                         O:\user\user.c
                                           #define kERROR_BYTE_MISSING_PARAMETER		4                                         O:\user\user.c
                                           #define kERROR_BYTE_PRINTED_ERROR		5		// We've already printed out an error      O:\user\user.c
                                           #define kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT	6                                    O:\user\user.c
                                           #define kERROR_BYTE_EXTRA_CHARACTERS 		7                                         O:\user\user.c
                                           #define kERROR_BYTE_UNKNOWN_COMMAND		8		// Part of command parser, not error handler O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** V A R I A B L E S ********************************************************/  O:\user\user.c
                                           #pragma udata access fast_vars                                                   O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Rate variable - how fast does interrupt fire to capture inputs?               O:\user\user.c
                                           near unsigned int time_between_updates;                                          O:\user\user.c
                                                                                                                            O:\user\user.c
                                           near volatile unsigned int ISR_D_RepeatRate;			// How many 1ms ticks between Digital updates O:\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_in;			// In pointer                       O:\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_out;			// Out pointer                     O:\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_length;			// Current FIFO depth           O:\user\user.c
                                                                                                                            O:\user\user.c
                                           near volatile unsigned int ISR_A_RepeatRate;			// How many 1ms ticks between Analog updates O:\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_in;			// In pointer                       O:\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_out;			// Out pointer                     O:\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_length;			// Current FIFO depth           O:\user\user.c
                                           near volatile unsigned char AnalogEnable;			// Maximum ADC channel to convert    O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // This byte has each of its bits used as a seperate error flag                  O:\user\user.c
                                           near unsigned char error_byte;                                                   O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // RC servo variables                                                            O:\user\user.c
                                           // First the main array of data for each servo                                   O:\user\user.c
                                           near unsigned char g_RC_primed_ptr;                                              O:\user\user.c
                                           near unsigned char g_RC_next_ptr;                                                O:\user\user.c
                                           near unsigned char g_RC_timing_ptr;                                              O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Used only in LowISR                                                           O:\user\user.c
                                           near unsigned int D_tick_counter;                                                O:\user\user.c
                                           near unsigned int A_tick_counter;                                                O:\user\user.c
                                           near unsigned char A_cur_channel;                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // ROM strings                                                                   O:\user\user.c
                                           const rom char st_OK[] = {"OK\r\n"};                                             O:\user\user.c
                                           const rom char st_LFCR[] = {"\r\n"};                                             O:\user\user.c
                                           const rom char st_version[] = {"opensprints FW 0.33 based on UBW FW D Version 1.4.2\r\n"}; O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #pragma udata ISR_buf=0x100                                                      O:\user\user.c
                                           volatile unsigned int ISR_A_FIFO[12][kISR_FIFO_A_DEPTH];	// Stores the most recent analog conversions O:\user\user.c
                                           volatile unsigned char ISR_D_FIFO[3][kISR_FIFO_D_DEPTH];	// FIFO of actual data  O:\user\user.c
                                           volatile tRC_state g_RC_state[kRC_DATA_SIZE];			// Stores states for each pin for RC command O:\user\user.c
                                           volatile unsigned int g_RC_value[kRC_DATA_SIZE];		// Stores reload values for TMR0 O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #pragma udata com_buf=0x200                                                      O:\user\user.c
                                           // USB Transmit buffer for packets (back to PC)                                  O:\user\user.c
                                           unsigned char g_TX_buf[kTX_BUF_SIZE];                                            O:\user\user.c
                                           // USB Receiving buffer for commands as they come from PC                        O:\user\user.c
                                           unsigned char g_RX_buf[kRX_BUF_SIZE];                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // USART Receiving buffer for data coming from the USART                         O:\user\user.c
                                           unsigned char g_USART_RX_buf[kUSART_RX_BUF_SIZE];                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // USART Transmit buffer for data going to the USART                             O:\user\user.c
                                           unsigned char g_USART_TX_buf[kUSART_TX_BUF_SIZE];                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // These variables are in normal storage space                                   O:\user\user.c
                                           #pragma udata                                                                    O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // These are used for the Fast Parallel Output routines                          O:\user\user.c
                                           unsigned char g_BO_init;                                                         O:\user\user.c
                                           unsigned char g_BO_strobe_mask;                                                  O:\user\user.c
                                           unsigned char g_BO_wait_mask;                                                    O:\user\user.c
                                           unsigned char g_BO_wait_delay;                                                   O:\user\user.c
                                           unsigned char g_BO_strobe_delay;                                                 O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Pointers to USB transmit (back to PC) buffer                                  O:\user\user.c
                                           unsigned char g_TX_buf_in;                                                       O:\user\user.c
                                           unsigned char g_TX_buf_out;                                                      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Pointers to USB receive (from PC) buffer                                      O:\user\user.c
                                           unsigned char g_RX_buf_in;                                                       O:\user\user.c
                                           unsigned char g_RX_buf_out;                                                      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // In and out pointers to our USART input buffer                                 O:\user\user.c
                                           unsigned char g_USART_RX_buf_in;                                                 O:\user\user.c
                                           unsigned char g_USART_RX_buf_out;                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // In and out pointers to our USART output buffer                                O:\user\user.c
                                           unsigned char g_USART_TX_buf_in;                                                 O:\user\user.c
                                           unsigned char g_USART_TX_buf_out;                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Normally set to TRUE. Able to set FALSE to not send "OK" message after packet recepetion O:\user\user.c
                                           BOOL	g_ack_enable;                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\user\user.c
                                           void BlinkUSBStatus (void);		// Handles blinking the USB status LED              O:\user\user.c
                                           BOOL SwitchIsPressed (void);		// Check to see if the user (PRG) switch is pressed O:\user\user.c
                                           void parse_packet (void);		// Take a full packet and dispatch it to the right function O:\user\user.c
                                           signed short long extract_number (tExtractType type); 		// Pull a number paramter out of the packet O:\user\user.c
                                           signed char extract_digit (signed short long * acc, unsigned char digits); // Pull a character out of the packet O:\user\user.c
                                           void parse_V_packet (void);	// V for printing version                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void parse_GO_packet (void);	// start sending sensor messages to PC              O:\user\user.c
                                           void parse_ST_packet (void);	// stop sending sensor messages to PC               O:\user\user.c
                                           void parse_HW_packet (void);	// test mode. periodic sensor messages to PC        O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void check_and_send_TX_data (void); // See if there is any data to send to PC, and if so, do it O:\user\user.c
                                           void print_ack (void);		// Print "OK" after packet is parsed                     O:\user\user.c
                                           int _user_putc (char c);	// Our UBS based stream character printer               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // sensor stuff                                                                  O:\user\user.c
                                           #define	NUM_ROLLERS		8                                                           O:\user\user.c
                                           unsigned int finishTick;		// this value determines the length of the race in roller rotations O:\user\user.c
                                           unsigned char activeRollers;		// 8 flags: Are the rollers active?                O:\user\user.c
                                           unsigned int refreshInterval = 66;	// default value is 15 frames per second      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           unsigned char prevSensorStates;		// 8 flags: Was the hall effect sensor engaged? O:\user\user.c
                                           unsigned char currentSensorStates;	// 8 flags: Is the hall effect sensor engaged? O:\user\user.c
                                           unsigned short long raceTime;				// in ms                                        O:\user\user.c
                                           unsigned short long rollerTickTimes[NUM_ROLLERS];	// in ms                       O:\user\user.c
                                           unsigned int rollerTicks[NUM_ROLLERS];		// number of revolutions of each roller  O:\user\user.c
                                                                                                                            O:\user\user.c
                                           BOOL isRacing = FALSE;                                                           O:\user\user.c
                                           BOOL raceTestMode = FALSE;                                                       O:\user\user.c
                                           BOOL newTick = FALSE;                                                            O:\user\user.c
                                           BOOL justBegun = TRUE;                                                           O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** Start OpenSprints FW code ************************************************/  O:\user\user.c
                                                                                                                            O:\user\user.c
000844   cfd9     MOVFF     0xfd9,0xfe6    void SendUpdateToPc (void)                                                       O:\user\user.c
000846   ffe6                                                                                                               
000848   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00084a   ffd9                                                                                                               
00084c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	char roller;                                                                    O:\user\user.c
                                                                                                                            O:\user\user.c
00084e   c1ac     MOVFF     0x1ac,0xfe6    	printf("time: %i\n",raceTime);                                                  O:\user\user.c
000850   ffe6                                                                                                               
000852   c1ad     MOVFF     0x1ad,0xfe6                                                                                     
000854   ffe6                                                                                                               
000856   c1ae     MOVFF     0x1ae,0xfe6                                                                                     
000858   ffe6                                                                                                               
00085a   0ebf     MOVLW     0xbf                                                                                            
00085c   6e2a     MOVWF     0x2a,0x0                                                                                        
00085e   0e30     MOVLW     0x30                                                                                            
000860   6e2b     MOVWF     0x2b,0x0                                                                                        
000862   6a2c     CLRF      0x2c,0x0                                                                                        
000864   c02a     MOVFF     0x2a,0xfe6                                                                                      
000866   ffe6                                                                                                               
000868   c02b     MOVFF     0x2b,0xfe6                                                                                      
00086a   ffe6                                                                                                               
00086c   c02c     MOVFF     0x2c,0xfe6                                                                                      
00086e   ffe6                                                                                                               
000870   ec91     CALL      0x3322,0x0                                                                                      
000872   f019                                                                                                               
000874   6e2d     MOVWF     0x2d,0x0                                                                                        
000876   0e06     MOVLW     0x6                                                                                             
000878   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00087a   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                                                                                                            O:\user\user.c
                                           	// Only print out the tick times and number of ticks for the active rollers     O:\user\user.c
00087c   6adf     CLRF      0xdf,0x0       	for (roller=0; roller < NUM_ROLLERS && activeRollers&(1<<roller); roller++)     O:\user\user.c
00087e   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000880   f02a                                                                                                               
000882   0e08     MOVLW     0x8                                                                                             
000884   6ee7     MOVWF     0xe7,0x0                                                                                        
000886   182a     XORWF     0x2a,0x0,0x0                                                                                    
000888   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
00088a   d002     BRA       0x890                                                                                           
00088c   34e7     RLCF      0xe7,0x0,0x0                                                                                    
00088e   d002     BRA       0x894                                                                                           
000890   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000892   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000894   e301     BNC       0x898                                                                                           
000896   d095     BRA       0x9c2                                                                                           
000898   0e01     MOVLW     0x1                                                                                             
00089a   52df     MOVF      0xdf,0x1,0x0                                                                                    
00089c   e006     BZ        0x8aa                                                                                           
00089e   cfdf     MOVFF     0xfdf,0xff3                                                                                     
0008a0   fff3                                                                                                               
0008a2   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0008a4   0bfe     ANDLW     0xfe                                                                                            
0008a6   06f3     DECF      0xf3,0x1,0x0                                                                                    
0008a8   e1fc     BNZ       0x8a2                                                                                           
0008aa   0101     MOVLB     0x1                                                                                             
0008ac   15a9     ANDWF     0xa9,0x0,0x1                                                                                    
0008ae   e101     BNZ       0x8b2                                                                                           
0008b0   d088     BRA       0x9c2                                                                                           
0009be   2adf     INCF      0xdf,0x1,0x0                                                                                    
0009c0   d75e     BRA       0x87e                                                                                           
                                           	{                                                                               O:\user\user.c
0008b2   0100     MOVLB     0x0            		if(raceTestMode)                                                               O:\user\user.c
0008b4   5163     MOVF      0x63,0x0,0x1                                                                                    
0008b6   e040     BZ        0x938                                                                                           
                                           		{                                                                              O:\user\user.c
0008b8   c060     MOVFF     0x60,0x2d      			printf("%i:\n  last_tick_time: %i\n",roller,raceTime,raceTime/refreshInterval); O:\user\user.c
0008ba   f02d                                                                                                               
0008bc   c061     MOVFF     0x61,0x2e                                                                                       
0008be   f02e                                                                                                               
0008c0   6a2f     CLRF      0x2f,0x0                                                                                        
0008c2   c1ac     MOVFF     0x1ac,0x1d                                                                                      
0008c4   f01d                                                                                                               
0008c6   c1ad     MOVFF     0x1ad,0x1e                                                                                      
0008c8   f01e                                                                                                               
0008ca   c1ae     MOVFF     0x1ae,0x1f                                                                                      
0008cc   f01f                                                                                                               
0008ce   c02d     MOVFF     0x2d,0x22                                                                                       
0008d0   f022                                                                                                               
0008d2   c02e     MOVFF     0x2e,0x23                                                                                       
0008d4   f023                                                                                                               
0008d6   c02f     MOVFF     0x2f,0x24                                                                                       
0008d8   f024                                                                                                               
0008da   ecf3     CALL      0x35e6,0x0                                                                                      
0008dc   f01a                                                                                                               
0008de   c01d     MOVFF     0x1d,0x2a                                                                                       
0008e0   f02a                                                                                                               
0008e2   c01e     MOVFF     0x1e,0x2b                                                                                       
0008e4   f02b                                                                                                               
0008e6   c01f     MOVFF     0x1f,0x2c                                                                                       
0008e8   f02c                                                                                                               
0008ea   c02a     MOVFF     0x2a,0xfe6                                                                                      
0008ec   ffe6                                                                                                               
0008ee   c02b     MOVFF     0x2b,0xfe6                                                                                      
0008f0   ffe6                                                                                                               
0008f2   c02c     MOVFF     0x2c,0xfe6                                                                                      
0008f4   ffe6                                                                                                               
0008f6   c1ac     MOVFF     0x1ac,0xfe6                                                                                     
0008f8   ffe6                                                                                                               
0008fa   c1ad     MOVFF     0x1ad,0xfe6                                                                                     
0008fc   ffe6                                                                                                               
0008fe   c1ae     MOVFF     0x1ae,0xfe6                                                                                     
000900   ffe6                                                                                                               
000902   cfdf     MOVFF     0xfdf,0x30                                                                                      
000904   f030                                                                                                               
000906   6a31     CLRF      0x31,0x0                                                                                        
000908   be30     BTFSC     0x30,0x7,0x0                                                                                    
00090a   6831     SETF      0x31,0x0                                                                                        
00090c   c030     MOVFF     0x30,0xfe6                                                                                      
00090e   ffe6                                                                                                               
000910   c031     MOVFF     0x31,0xfe6                                                                                      
000912   ffe6                                                                                                               
000914   0ea5     MOVLW     0xa5                                                                                            
000916   6e32     MOVWF     0x32,0x0                                                                                        
000918   0e30     MOVLW     0x30                                                                                            
00091a   6e33     MOVWF     0x33,0x0                                                                                        
00091c   6a34     CLRF      0x34,0x0                                                                                        
00091e   c032     MOVFF     0x32,0xfe6                                                                                      
000920   ffe6                                                                                                               
000922   c033     MOVFF     0x33,0xfe6                                                                                      
000924   ffe6                                                                                                               
000926   c034     MOVFF     0x34,0xfe6                                                                                      
000928   ffe6                                                                                                               
00092a   ec91     CALL      0x3322,0x0                                                                                      
00092c   f019                                                                                                               
00092e   6e35     MOVWF     0x35,0x0                                                                                        
000930   0e0b     MOVLW     0xb                                                                                             
000932   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
000934   5035     MOVF      0x35,0x0,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000936   d043     BRA       0x9be          		else                                                                           O:\user\user.c
                                           		{                                                                              O:\user\user.c
000938   cfdf     MOVFF     0xfdf,0xfe9    			printf("%i:\n  last_tick_time: %i\n",roller,rollerTickTimes[roller],rollerTicks[roller]); O:\user\user.c
00093a   ffe9                                                                                                               
00093c   6aea     CLRF      0xea,0x0                                                                                        
00093e   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000940   68ea     SETF      0xea,0x0                                                                                        
000942   90d8     BCF       0xd8,0x0,0x0                                                                                    
000944   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000946   36ea     RLCF      0xea,0x1,0x0                                                                                    
000948   0ec7     MOVLW     0xc7                                                                                            
00094a   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00094c   0e01     MOVLW     0x1                                                                                             
00094e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000950   cfee     MOVFF     0xfee,0xfe6                                                                                     
000952   ffe6                                                                                                               
000954   cfef     MOVFF     0xfef,0xfe6                                                                                     
000956   ffe6                                                                                                               
000958   cfdf     MOVFF     0xfdf,0xfe9                                                                                     
00095a   ffe9                                                                                                               
00095c   6aea     CLRF      0xea,0x0                                                                                        
00095e   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000960   68ea     SETF      0xea,0x0                                                                                        
000962   0e03     MOVLW     0x3                                                                                             
000964   02ea     MULWF     0xea,0x0                                                                                        
000966   cff3     MOVFF     0xff3,0xfea                                                                                     
000968   ffea                                                                                                               
00096a   0e03     MOVLW     0x3                                                                                             
00096c   02e9     MULWF     0xe9,0x0                                                                                        
00096e   cff3     MOVFF     0xff3,0xfe9                                                                                     
000970   ffe9                                                                                                               
000972   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000974   26ea     ADDWF     0xea,0x1,0x0                                                                                    
000976   0eaf     MOVLW     0xaf                                                                                            
000978   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00097a   0e01     MOVLW     0x1                                                                                             
00097c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00097e   cfee     MOVFF     0xfee,0xfe6                                                                                     
000980   ffe6                                                                                                               
000982   cfee     MOVFF     0xfee,0xfe6                                                                                     
000984   ffe6                                                                                                               
000986   cfef     MOVFF     0xfef,0xfe6                                                                                     
000988   ffe6                                                                                                               
00098a   cfdf     MOVFF     0xfdf,0x2a                                                                                      
00098c   f02a                                                                                                               
00098e   6a2b     CLRF      0x2b,0x0                                                                                        
000990   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000992   682b     SETF      0x2b,0x0                                                                                        
000994   c02a     MOVFF     0x2a,0xfe6                                                                                      
000996   ffe6                                                                                                               
000998   c02b     MOVFF     0x2b,0xfe6                                                                                      
00099a   ffe6                                                                                                               
00099c   0ea5     MOVLW     0xa5                                                                                            
00099e   6e2c     MOVWF     0x2c,0x0                                                                                        
0009a0   0e30     MOVLW     0x30                                                                                            
0009a2   6e2d     MOVWF     0x2d,0x0                                                                                        
0009a4   6a2e     CLRF      0x2e,0x0                                                                                        
0009a6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0009a8   ffe6                                                                                                               
0009aa   c02d     MOVFF     0x2d,0xfe6                                                                                      
0009ac   ffe6                                                                                                               
0009ae   c02e     MOVFF     0x2e,0xfe6                                                                                      
0009b0   ffe6                                                                                                               
0009b2   ec91     CALL      0x3322,0x0                                                                                      
0009b4   f019                                                                                                               
0009b6   6e2f     MOVWF     0x2f,0x0                                                                                        
0009b8   0e0a     MOVLW     0xa                                                                                             
0009ba   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0009bc   502f     MOVF      0x2f,0x0,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
0009c2   0e9f     MOVLW     0x9f           	printf("eom.\n");                                                               O:\user\user.c
0009c4   6e2a     MOVWF     0x2a,0x0                                                                                        
0009c6   0e30     MOVLW     0x30                                                                                            
0009c8   6e2b     MOVWF     0x2b,0x0                                                                                        
0009ca   6a2c     CLRF      0x2c,0x0                                                                                        
0009cc   c02a     MOVFF     0x2a,0xfe6                                                                                      
0009ce   ffe6                                                                                                               
0009d0   c02b     MOVFF     0x2b,0xfe6                                                                                      
0009d2   ffe6                                                                                                               
0009d4   c02c     MOVFF     0x2c,0xfe6                                                                                      
0009d6   ffe6                                                                                                               
0009d8   ec91     CALL      0x3322,0x0                                                                                      
0009da   f019                                                                                                               
0009dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0009de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0009e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            O:\user\user.c
0009e2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                O:\user\user.c
0009e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0009e6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0009e8   ffd9                                                                                                               
0009ea   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           #pragma code                                                                     O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #pragma interruptlow low_ISR                                                     O:\user\user.c
0009ec   cfd8     MOVFF     0xfd8,0xfe4    void low_ISR(void)                                                               O:\user\user.c
0009ee   ffe4                                                                                                               
0009f0   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
0009f2   ffe4                                                                                                               
0009f4   6ee4     MOVWF     0xe4,0x0                                                                                        
0009f6   cfda     MOVFF     0xfda,0xfe4                                                                                     
0009f8   ffe4                                                                                                               
0009fa   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0009fc   ffda                                                                                                               
0009fe   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {	                                                                               O:\user\user.c
000a00   52e5     MOVF      0xe5,0x1,0x0   }                                                                                O:\user\user.c
000a02   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000a04   ffda                                                                                                               
000a06   50e5     MOVF      0xe5,0x0,0x0                                                                                    
000a08   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
000a0a   ffe0                                                                                                               
000a0c   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
000a0e   ffd8                                                                                                               
000a10   0010     RETFIE    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           #pragma interrupt high_ISR                                                       O:\user\user.c
000a12   cfda     MOVFF     0xfda,0xfe4    void high_ISR(void)                                                              O:\user\user.c
000a14   ffe4                                                                                                               
000a16   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000a18   ffda                                                                                                               
000a1a   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
000a1c   ffe4                                                                                                               
000a1e   cfea     MOVFF     0xfea,0xfe4                                                                                     
000a20   ffe4                                                                                                               
000a22   cff3     MOVFF     0xff3,0xfe4                                                                                     
000a24   ffe4                                                                                                               
000a26   cff4     MOVFF     0xff4,0xfe4                                                                                     
000a28   ffe4                                                                                                               
000a2a   52e6     MOVF      0xe6,0x1,0x0                                                                                    
000a2c   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
000a2e   ffe6                                                                                                               
000a30   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000a32   ffd9                                                                                                               
000a34   0e02     MOVLW     0x2                                                                                             
000a36   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	char roller;                                                                    O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Do we have a Timer2 interrupt? (1ms rate)                                    O:\user\user.c
000a38   a29e     BTFSS     0x9e,0x1,0x0   	if (PIR1bits.TMR2IF)                                                            O:\user\user.c
000a3a   d05f     BRA       0xafa                                                                                           
                                           	{                                                                               O:\user\user.c
                                           		// Clear the interrupt                                                         O:\user\user.c
000a3c   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0;                                                           O:\user\user.c
000a3e   0100     MOVLB     0x0            		if (isRacing)                                                                  O:\user\user.c
000a40   5162     MOVF      0x62,0x0,0x1                                                                                    
000a42   e05b     BZ        0xafa                                                                                           
                                           		{                                                                              O:\user\user.c
000a44   0101     MOVLB     0x1            			raceTime++;		// add another ms to the time counter                            O:\user\user.c
000a46   2bac     INCF      0xac,0x1,0x1                                                                                    
000a48   0e00     MOVLW     0x0                                                                                             
000a4a   23ad     ADDWFC    0xad,0x1,0x1                                                                                    
000a4c   0e00     MOVLW     0x0                                                                                             
000a4e   23ae     ADDWFC    0xae,0x1,0x1                                                                                    
000a50   c1ab     MOVFF     0x1ab,0x1aa    			prevSensorStates = currentSensorStates;		// remember previous state of pins   O:\user\user.c
000a52   f1aa                                                                                                               
000a54   cf81     MOVFF     0xf81,0x1ab    			currentSensorStates = PORTB;			// read the pins                               O:\user\user.c
000a56   f1ab                                                                                                               
                                                                                                                            O:\user\user.c
000a58   6adf     CLRF      0xdf,0x0       			for(roller=0;roller<NUM_ROLLERS;roller++)                                     O:\user\user.c
000a5a   cfdf     MOVFF     0xfdf,0x38                                                                                      
000a5c   f038                                                                                                               
000a5e   0e08     MOVLW     0x8                                                                                             
000a60   6ee7     MOVWF     0xe7,0x0                                                                                        
000a62   1838     XORWF     0x38,0x0,0x0                                                                                    
000a64   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000a66   d002     BRA       0xa6c                                                                                           
000a68   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000a6a   d002     BRA       0xa70                                                                                           
000a6c   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000a6e   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000a70   e244     BC        0xafa                                                                                           
000af6   2adf     INCF      0xdf,0x1,0x0                                                                                    
000af8   d7b0     BRA       0xa5a                                                                                           
                                           			{                                                                             O:\user\user.c
                                           				unsigned char rollerMask;                                                    O:\user\user.c
000a72   0e01     MOVLW     0x1            				rollerMask = (1<<roller);                                                    O:\user\user.c
000a74   52df     MOVF      0xdf,0x1,0x0                                                                                    
000a76   e006     BZ        0xa84                                                                                           
000a78   cfdf     MOVFF     0xfdf,0xff3                                                                                     
000a7a   fff3                                                                                                               
000a7c   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000a7e   0bfe     ANDLW     0xfe                                                                                            
000a80   06f3     DECF      0xf3,0x1,0x0                                                                                    
000a82   e1fc     BNZ       0xa7c                                                                                           
000a84   6ee7     MOVWF     0xe7,0x0                                                                                        
000a86   0e01     MOVLW     0x1                                                                                             
000a88   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
000a8a   ffdb                                                                                                               
000a8c   0101     MOVLB     0x1            				if(rollerMask & activeRollers & (currentSensorStates^prevSensorStates) & currentSensorStates) O:\user\user.c
000a8e   51ab     MOVF      0xab,0x0,0x1                                                                                    
000a90   0101     MOVLB     0x1                                                                                             
000a92   19aa     XORWF     0xaa,0x0,0x1                                                                                    
000a94   6e38     MOVWF     0x38,0x0                                                                                        
000a96   0e01     MOVLW     0x1                                                                                             
000a98   50db     MOVF      0xdb,0x0,0x0                                                                                    
000a9a   0101     MOVLB     0x1                                                                                             
000a9c   15a9     ANDWF     0xa9,0x0,0x1                                                                                    
000a9e   1438     ANDWF     0x38,0x0,0x0                                                                                    
000aa0   0101     MOVLB     0x1                                                                                             
000aa2   15ab     ANDWF     0xab,0x0,0x1                                                                                    
000aa4   e028     BZ        0xaf6                                                                                           
                                           				// Check each active roller for a change from 0 to 1                         O:\user\user.c
                                           				{                                                                            O:\user\user.c
                                           					// If so, increase the tick count for that roller and save the time         O:\user\user.c
000aa6   cfdf     MOVFF     0xfdf,0xfe9    					rollerTicks[roller]++;                                                      O:\user\user.c
000aa8   ffe9                                                                                                               
000aaa   6aea     CLRF      0xea,0x0                                                                                        
000aac   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000aae   68ea     SETF      0xea,0x0                                                                                        
000ab0   90d8     BCF       0xd8,0x0,0x0                                                                                    
000ab2   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000ab4   36ea     RLCF      0xea,0x1,0x0                                                                                    
000ab6   0ec7     MOVLW     0xc7                                                                                            
000ab8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000aba   0e01     MOVLW     0x1                                                                                             
000abc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000abe   2aee     INCF      0xee,0x1,0x0                                                                                    
000ac0   0e00     MOVLW     0x0                                                                                             
000ac2   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
000ac4   cfdf     MOVFF     0xfdf,0xfe9    					rollerTickTimes[roller] = raceTime;                                         O:\user\user.c
000ac6   ffe9                                                                                                               
000ac8   6aea     CLRF      0xea,0x0                                                                                        
000aca   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000acc   68ea     SETF      0xea,0x0                                                                                        
000ace   0e03     MOVLW     0x3                                                                                             
000ad0   02ea     MULWF     0xea,0x0                                                                                        
000ad2   cff3     MOVFF     0xff3,0xfea                                                                                     
000ad4   ffea                                                                                                               
000ad6   0e03     MOVLW     0x3                                                                                             
000ad8   02e9     MULWF     0xe9,0x0                                                                                        
000ada   cff3     MOVFF     0xff3,0xfe9                                                                                     
000adc   ffe9                                                                                                               
000ade   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000ae0   26ea     ADDWF     0xea,0x1,0x0                                                                                    
000ae2   0eaf     MOVLW     0xaf                                                                                            
000ae4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000ae6   0e01     MOVLW     0x1                                                                                             
000ae8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000aea   c1ac     MOVFF     0x1ac,0xfee                                                                                     
000aec   ffee                                                                                                               
000aee   c1ad     MOVFF     0x1ad,0xfee                                                                                     
000af0   ffee                                                                                                               
000af2   c1ae     MOVFF     0x1ae,0xfee                                                                                     
000af4   ffee                                                                                                               
                                           				}                                                                            O:\user\user.c
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
000afa   0e02     MOVLW     0x2            }                                                                                O:\user\user.c
000afc   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000afe   e202     BC        0xb04                                                                                           
000b00   6ae1     CLRF      0xe1,0x0                                                                                        
000b02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000b04   6ee1     MOVWF     0xe1,0x0                                                                                        
000b06   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000b08   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000b0a   ffd9                                                                                                               
000b0c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000b0e   cfe5     MOVFF     0xfe5,0xff4                                                                                     
000b10   fff4                                                                                                               
000b12   cfe5     MOVFF     0xfe5,0xff3                                                                                     
000b14   fff3                                                                                                               
000b16   cfe5     MOVFF     0xfe5,0xfea                                                                                     
000b18   ffea                                                                                                               
000b1a   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
000b1c   ffe9                                                                                                               
000b1e   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b20   ffda                                                                                                               
000b22   0011     RETFIE    0x1                                                                                             
                                                                                                                            O:\user\user.c
000b24   cfd9     MOVFF     0xfd9,0xfe6    void UserInit(void)                                                              O:\user\user.c
000b26   ffe6                                                                                                               
000b28   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000b2a   ffd9                                                                                                               
000b2c   0e02     MOVLW     0x2                                                                                             
000b2e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	char i, j;                                                                      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Make all of 3 digital inputs                                                 O:\user\user.c
000b30   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    O:\user\user.c
000b32   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   O:\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   O:\user\user.c
000b34   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  O:\user\user.c
000b36   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             O:\user\user.c
000b38   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            O:\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 O:\user\user.c
000b3a   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               O:\user\user.c
000b3c   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  O:\user\user.c
000b3e   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     O:\user\user.c
000b40   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    O:\user\user.c
000b42   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   O:\user\user.c
                                           	// Make all of PORTC inputs                                                     O:\user\user.c
000b44   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    O:\user\user.c
000b46   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   O:\user\user.c
                                           #ifdef __18F4550                                                                 O:\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       O:\user\user.c
                                           	LATD = 0x00;                                                                    O:\user\user.c
                                           	TRISD = 0xFF;                                                                   O:\user\user.c
                                           	LATE = 0x00;                                                                    O:\user\user.c
                                           	TRISE = 0xFF;                                                                   O:\user\user.c
                                           #endif                                                                           O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Initalize LED I/Os to outputs                                                O:\user\user.c
000b48   0efc     MOVLW     0xfc           	mInitAllLEDs();                                                                 O:\user\user.c
000b4a   168b     ANDWF     0x8b,0x1,0x0                                                                                    
000b4c   0efc     MOVLW     0xfc                                                                                            
000b4e   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           	// Initalize switch as an input                                                 O:\user\user.c
000b50   8494     BSF       0x94,0x2,0x0   	mInitSwitch();                                                                  O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Start off always using "OK" acknowledge.                                     O:\user\user.c
000b52   0101     MOVLB     0x1            	g_ack_enable = TRUE;                                                            O:\user\user.c
000b54   0e01     MOVLW     0x1                                                                                             
000b56   6fa6     MOVWF     0xa6,0x1                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Use our own special output function for STDOUT                               O:\user\user.c
000b58   0100     MOVLB     0x0            	stdout = _H_USER;                                                               O:\user\user.c
000b5a   6972     SETF      0x72,0x1                                                                                        
000b5c   6973     SETF      0x73,0x1                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               O:\user\user.c
000b5e   6a0a     CLRF      0xa,0x0        	ISR_A_FIFO_out = 0;                                                             O:\user\user.c
000b60   6a09     CLRF      0x9,0x0        	ISR_A_FIFO_in = 0;                                                              O:\user\user.c
000b62   6a0b     CLRF      0xb,0x0        	ISR_A_FIFO_length = 0;                                                          O:\user\user.c
000b64   6a05     CLRF      0x5,0x0        	ISR_D_FIFO_out = 0;                                                             O:\user\user.c
000b66   6a04     CLRF      0x4,0x0        	ISR_D_FIFO_in = 0;                                                              O:\user\user.c
000b68   6a06     CLRF      0x6,0x0        	ISR_D_FIFO_length = 0;                                                          O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           O:\user\user.c
000b6a   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           O:\user\user.c
000b6c   6a03     CLRF      0x3,0x0                                                                                         
000b6e   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           O:\user\user.c
000b70   6a08     CLRF      0x8,0x0                                                                                         
000b72   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             O:\user\user.c
000b74   6a12     CLRF      0x12,0x0                                                                                        
000b76   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             O:\user\user.c
000b78   6a14     CLRF      0x14,0x0                                                                                        
000b7a   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              O:\user\user.c
                                           	                                                                                O:\user\user.c
                                           	// Now init our registers                                                       O:\user\user.c
                                           	// The prescaler will be at 16                                                  O:\user\user.c
000b7c   82ca     BSF       0xca,0x1,0x0   	T2CONbits.T2CKPS1 = 1;                                                          O:\user\user.c
000b7e   80ca     BSF       0xca,0x0,0x0   	T2CONbits.T2CKPS0 = 1;                                                          O:\user\user.c
                                           	// We want the TMR2 post scaler to be a 3                                       O:\user\user.c
000b80   9cca     BCF       0xca,0x6,0x0   	T2CONbits.T2OUTPS3 = 0;                                                         O:\user\user.c
000b82   9aca     BCF       0xca,0x5,0x0   	T2CONbits.T2OUTPS2 = 0;                                                         O:\user\user.c
000b84   88ca     BSF       0xca,0x4,0x0   	T2CONbits.T2OUTPS1 = 1;                                                         O:\user\user.c
000b86   96ca     BCF       0xca,0x3,0x0   	T2CONbits.T2OUTPS0 = 0;                                                         O:\user\user.c
                                           	// Set our reload value                                                         O:\user\user.c
000b88   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              O:\user\user.c
000b8a   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Inialize USB TX and RX buffer management                                     O:\user\user.c
000b8c   0101     MOVLB     0x1            	g_RX_buf_in = 0;                                                                O:\user\user.c
000b8e   6ba0     CLRF      0xa0,0x1                                                                                        
000b90   0101     MOVLB     0x1            	g_RX_buf_out = 0;                                                               O:\user\user.c
000b92   6ba1     CLRF      0xa1,0x1                                                                                        
000b94   0101     MOVLB     0x1            	g_TX_buf_in = 0;                                                                O:\user\user.c
000b96   6b9e     CLRF      0x9e,0x1                                                                                        
000b98   0101     MOVLB     0x1            	g_TX_buf_out = 0;                                                               O:\user\user.c
000b9a   6b9f     CLRF      0x9f,0x1                                                                                        
                                                                                                                            O:\user\user.c
                                           	// And the USART TX and RX buffer management                                    O:\user\user.c
000b9c   0101     MOVLB     0x1            	g_USART_RX_buf_in = 0;                                                          O:\user\user.c
000b9e   6ba2     CLRF      0xa2,0x1                                                                                        
000ba0   0101     MOVLB     0x1            	g_USART_RX_buf_out = 0;                                                         O:\user\user.c
000ba2   6ba3     CLRF      0xa3,0x1                                                                                        
000ba4   0101     MOVLB     0x1            	g_USART_TX_buf_in = 0;                                                          O:\user\user.c
000ba6   6ba4     CLRF      0xa4,0x1                                                                                        
000ba8   0101     MOVLB     0x1            	g_USART_TX_buf_out = 0;                                                         O:\user\user.c
000baa   6ba5     CLRF      0xa5,0x1                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Clear out the RC servo output pointer values                                 O:\user\user.c
000bac   6a0e     CLRF      0xe,0x0        	g_RC_primed_ptr = 0;                                                            O:\user\user.c
000bae   6a0f     CLRF      0xf,0x0        	g_RC_next_ptr = 0;                                                              O:\user\user.c
000bb0   6a10     CLRF      0x10,0x0       	g_RC_timing_ptr = 0;                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Clear the RC data structure                                                  O:\user\user.c
000bb2   6adf     CLRF      0xdf,0x0       	for (i = 0; i < kRC_DATA_SIZE; i++)                                             O:\user\user.c
000bb4   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000bb6   f02a                                                                                                               
000bb8   0e18     MOVLW     0x18                                                                                            
000bba   6ee7     MOVWF     0xe7,0x0                                                                                        
000bbc   182a     XORWF     0x2a,0x0,0x0                                                                                    
000bbe   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000bc0   d002     BRA       0xbc6                                                                                           
000bc2   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000bc4   d002     BRA       0xbca                                                                                           
000bc6   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000bc8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000bca   e21b     BC        0xc02                                                                                           
000bfe   2adf     INCF      0xdf,0x1,0x0                                                                                    
000c00   d7d9     BRA       0xbb4                                                                                           
                                           	{                                                                               O:\user\user.c
000bcc   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_value[i] = 0;                                                             O:\user\user.c
000bce   ffe9                                                                                                               
000bd0   6aea     CLRF      0xea,0x0                                                                                        
000bd2   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000bd4   68ea     SETF      0xea,0x0                                                                                        
000bd6   90d8     BCF       0xd8,0x0,0x0                                                                                    
000bd8   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000bda   36ea     RLCF      0xea,0x1,0x0                                                                                    
000bdc   0e69     MOVLW     0x69                                                                                            
000bde   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000be0   0e01     MOVLW     0x1                                                                                             
000be2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000be4   6aee     CLRF      0xee,0x0                                                                                        
000be6   6aed     CLRF      0xed,0x0                                                                                        
000be8   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_state[i] = kOFF;                                                          O:\user\user.c
000bea   ffe9                                                                                                               
000bec   6aea     CLRF      0xea,0x0                                                                                        
000bee   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000bf0   68ea     SETF      0xea,0x0                                                                                        
000bf2   0e51     MOVLW     0x51                                                                                            
000bf4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000bf6   0e01     MOVLW     0x1                                                                                             
000bf8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000bfa   0e01     MOVLW     0x1                                                                                             
000bfc   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Enable TMR0 for our OpenSprints timing operation                             O:\user\user.c
000c02   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;	// Do NOT use the prescaler                                  O:\user\user.c
000c04   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;	// Use internal clock                                       O:\user\user.c
000c06   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           O:\user\user.c
000c08   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              O:\user\user.c
000c0a   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        O:\user\user.c
000c0c   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Enable interrupt priorities                                                  O:\user\user.c
000c0e   8ed0     BSF       0xd0,0x7,0x0   	RCONbits.IPEN = 1;                                                              O:\user\user.c
000c10   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           O:\user\user.c
                                                                                                                            O:\user\user.c
000c12   829d     BSF       0x9d,0x1,0x0   	PIE1bits.TMR2IE = 1;                                                            O:\user\user.c
000c14   929f     BCF       0x9f,0x1,0x0   	IPR1bits.TMR2IP = 0;                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
000c16   8ef2     BSF       0xf2,0x7,0x0   	INTCONbits.GIEH = 1;	// Turn high priority interrupts on                        O:\user\user.c
000c18   8cf2     BSF       0xf2,0x6,0x0   	INTCONbits.GIEL = 1;	// Turn low priority interrupts on                         O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Turn on the Timer2                                                           O:\user\user.c
                                           	//T2CONbits.TMR2ON = 1;                                                         O:\user\user.c
                                                                                                                            O:\user\user.c
000c1a   0e02     MOVLW     0x2            }//end UserInit                                                                  O:\user\user.c
000c1c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000c1e   e202     BC        0xc24                                                                                           
000c20   6ae1     CLRF      0xe1,0x0                                                                                        
000c22   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000c24   6ee1     MOVWF     0xe1,0x0                                                                                        
000c26   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000c28   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000c2a   ffd9                                                                                                               
000c2c   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           /******************************************************************************  O:\user\user.c
                                            * Function:        void ProcessIO(void)                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * PreCondition:    None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Input:           None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Output:          None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Side Effects:    None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Overview:        In this function, we check for a new packet that just        O:\user\user.c
                                            * 					arrived via USB. We do a few checks on the packet to see                 O:\user\user.c
                                            *					if it is worthy of us trying to interpret it. If it is,                   O:\user\user.c
                                            *					we go and call the proper function based upon the first                   O:\user\user.c
                                            *					character of the packet.                                                  O:\user\user.c
                                            *					NOTE: We need to see everything in one packet (i.e. we                    O:\user\user.c
                                            *					won't treat the USB data as a stream and try to find our                  O:\user\user.c
                                            *					start and end of packets within the stream. We just look                  O:\user\user.c
                                            *					at the first character of each packet for a command and                   O:\user\user.c
                                            * 					check that there's a CR as the last character of the                     O:\user\user.c
                                            *					packet.                                                                   O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Note:            None                                                         O:\user\user.c
                                            *****************************************************************************/  O:\user\user.c
000c2e   cfd9     MOVFF     0xfd9,0xfe6    void ProcessIO(void)                                                             O:\user\user.c
000c30   ffe6                                                                                                               
000c32   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000c34   ffd9                                                                                                               
000c36   0e02     MOVLW     0x2                                                                                             
000c38   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	static BOOL in_cr = FALSE;                                                      O:\user\user.c
                                           	static byte last_fifo_size;                                                     O:\user\user.c
                                           	unsigned char tst_char;                                                         O:\user\user.c
000c3a   0e01     MOVLW     0x1            	BOOL	got_full_packet = FALSE;                                                   O:\user\user.c
000c3c   6adb     CLRF      0xdb,0x0                                                                                        
000c3e   0101     MOVLB     0x1            	cdc_rx_len = 0;                                                                 O:\user\user.c
000c40   6bd8     CLRF      0xd8,0x1                                                                                        
                                                                                                                            O:\user\user.c
000c42   ec65     CALL      0x16ca,0x0     	BlinkUSBStatus();                                                               O:\user\user.c
000c44   f00b                                                                                                               
                                                                                                                            O:\user\user.c
000c46   c060     MOVFF     0x60,0x2d      	if(raceTime%refreshInterval == 0)                                               O:\user\user.c
000c48   f02d                                                                                                               
000c4a   c061     MOVFF     0x61,0x2e                                                                                       
000c4c   f02e                                                                                                               
000c4e   6a2f     CLRF      0x2f,0x0                                                                                        
000c50   c1ac     MOVFF     0x1ac,0x1d                                                                                      
000c52   f01d                                                                                                               
000c54   c1ad     MOVFF     0x1ad,0x1e                                                                                      
000c56   f01e                                                                                                               
000c58   c1ae     MOVFF     0x1ae,0x1f                                                                                      
000c5a   f01f                                                                                                               
000c5c   c02d     MOVFF     0x2d,0x22                                                                                       
000c5e   f022                                                                                                               
000c60   c02e     MOVFF     0x2e,0x23                                                                                       
000c62   f023                                                                                                               
000c64   c02f     MOVFF     0x2f,0x24                                                                                       
000c66   f024                                                                                                               
000c68   ecf3     CALL      0x35e6,0x0                                                                                      
000c6a   f01a                                                                                                               
000c6c   c019     MOVFF     0x19,0x2a                                                                                       
000c6e   f02a                                                                                                               
000c70   c01a     MOVFF     0x1a,0x2b                                                                                       
000c72   f02b                                                                                                               
000c74   c01b     MOVFF     0x1b,0x2c                                                                                       
000c76   f02c                                                                                                               
000c78   502a     MOVF      0x2a,0x0,0x0                                                                                    
000c7a   102b     IORWF     0x2b,0x0,0x0                                                                                    
000c7c   102c     IORWF     0x2c,0x0,0x0                                                                                    
000c7e   e101     BNZ       0xc82                                                                                           
                                           	{                                                                               O:\user\user.c
000c80   dde1     RCALL     0x844          		SendUpdateToPc();                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// User Application USB tasks                                                   O:\user\user.c
000c82   0e06     MOVLW     0x6            	if((usb_device_state < CONFIGURED_STATE) || (UCONbits.SUSPND == 1))             O:\user\user.c
000c84   0101     MOVLB     0x1                                                                                             
000c86   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
000c88   e303     BNC       0xc90                                                                                           
000c8a   506d     MOVF      0x6d,0x0,0x0                                                                                    
000c8c   0b02     ANDLW     0x2                                                                                             
000c8e   e001     BZ        0xc92                                                                                           
                                           	{	                                                                              O:\user\user.c
000c90   d101     BRA       0xe94          		return;                                                                        O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Check for any new I packets (from T command) ready to go out                 O:\user\user.c
000c92   5006     MOVF      0x6,0x0,0x0    	while (ISR_D_FIFO_length > 0)                                                   O:\user\user.c
000c94   0800     SUBLW     0x0                                                                                             
000c96   e207     BC        0xca6                                                                                           
000ca4   d7f6     BRA       0xc92                                                                                           
                                           	{                                                                               O:\user\user.c
                                           		// Spit out an I packet first                                                  O:\user\user.c
                                           //		parse_I_packet ();					// Temp commmented out by Luke                        O:\user\user.c
                                                                                                                            O:\user\user.c
                                           		// Then upate our I packet fifo stuff                                          O:\user\user.c
000c98   2a05     INCF      0x5,0x1,0x0    		ISR_D_FIFO_out++;                                                              O:\user\user.c
000c9a   0e03     MOVLW     0x3            		if (ISR_D_FIFO_out == kISR_FIFO_D_DEPTH)                                       O:\user\user.c
000c9c   5c05     SUBWF     0x5,0x0,0x0                                                                                     
000c9e   e101     BNZ       0xca2                                                                                           
                                           		{                                                                              O:\user\user.c
000ca0   6a05     CLRF      0x5,0x0        			ISR_D_FIFO_out = 0;                                                           O:\user\user.c
                                           		}                                                                              O:\user\user.c
000ca2   0606     DECF      0x6,0x1,0x0    		ISR_D_FIFO_length--;                                                           O:\user\user.c
                                           	}			                                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Check for a new A packet (from T command) ready to go out                    O:\user\user.c
000ca6   500b     MOVF      0xb,0x0,0x0    	while (ISR_A_FIFO_length > 0)                                                   O:\user\user.c
000ca8   0800     SUBLW     0x0                                                                                             
000caa   e207     BC        0xcba                                                                                           
000cb8   d7f6     BRA       0xca6                                                                                           
                                           	{                                                                               O:\user\user.c
                                           		// Spit out an A packet first                                                  O:\user\user.c
                                           //		parse_A_packet ();					// Temp commmented out by Luke                        O:\user\user.c
                                                                                                                            O:\user\user.c
                                           		// Then update our A packet fifo stuff                                         O:\user\user.c
000cac   2a0a     INCF      0xa,0x1,0x0    		ISR_A_FIFO_out++;                                                              O:\user\user.c
000cae   0e03     MOVLW     0x3            		if (ISR_A_FIFO_out == kISR_FIFO_A_DEPTH)                                       O:\user\user.c
000cb0   5c0a     SUBWF     0xa,0x0,0x0                                                                                     
000cb2   e101     BNZ       0xcb6                                                                                           
                                           		{                                                                              O:\user\user.c
000cb4   6a0a     CLRF      0xa,0x0        			ISR_A_FIFO_out = 0;                                                           O:\user\user.c
                                           		}                                                                              O:\user\user.c
000cb6   060b     DECF      0xb,0x1,0x0    		ISR_A_FIFO_length--;                                                           O:\user\user.c
                                           	}			                                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Pull in some new data if there is new data to pull in                        O:\user\user.c
000cba   0104     MOVLB     0x4            	if(!mCDCUsartRxIsBusy())                                                        O:\user\user.c
000cbc   bf18     BTFSC     0x18,0x7,0x1                                                                                    
000cbe   d065     BRA       0xd8a                                                                                           
                                           	{                                                                               O:\user\user.c
                                           		// Copy data from dual-ram buffer to user's buffer                             O:\user\user.c
000cc0   0101     MOVLB     0x1            		for(cdc_rx_len = 0; cdc_rx_len < CDC_BULK_BD_OUT.Cnt; cdc_rx_len++)            O:\user\user.c
000cc2   6bd8     CLRF      0xd8,0x1                                                                                        
000cc4   0104     MOVLB     0x4                                                                                             
000cc6   5119     MOVF      0x19,0x0,0x1                                                                                    
000cc8   0101     MOVLB     0x1                                                                                             
000cca   5dd8     SUBWF     0xd8,0x0,0x1                                                                                    
000ccc   e253     BC        0xd74                                                                                           
000d6e   0101     MOVLB     0x1                                                                                             
000d70   2bd8     INCF      0xd8,0x1,0x1                                                                                    
000d72   d7a8     BRA       0xcc4                                                                                           
                                           		{                                                                              O:\user\user.c
                                           			// Check to see if we are in a CR/LF situation                                O:\user\user.c
000cce   0101     MOVLB     0x1            			tst_char = cdc_data_rx[cdc_rx_len];                                           O:\user\user.c
000cd0   51d8     MOVF      0xd8,0x0,0x1                                                                                    
000cd2   6aea     CLRF      0xea,0x0                                                                                        
000cd4   0f08     ADDLW     0x8                                                                                             
000cd6   6ee9     MOVWF     0xe9,0x0                                                                                        
000cd8   0e05     MOVLW     0x5                                                                                             
000cda   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cdc   cfef     MOVFF     0xfef,0xfdf                                                                                     
000cde   ffdf                                                                                                               
                                           			if (                                                                          O:\user\user.c
000ce0   0100     MOVLB     0x0            				!in_cr                                                                       O:\user\user.c
000ce2   5166     MOVF      0x66,0x0,0x1                                                                                    
                                           				&&                                                                           O:\user\user.c
                                           				(                                                                            O:\user\user.c
000ce6   0e0d     MOVLW     0xd            					kCR == tst_char                                                             O:\user\user.c
000ce8   6e2a     MOVWF     0x2a,0x0                                                                                        
000cea   50df     MOVF      0xdf,0x0,0x0                                                                                    
000cec   5c2a     SUBWF     0x2a,0x0,0x0   					||                                                                          O:\user\user.c
000cf0   0e0a     MOVLW     0xa            					kLF == tst_char                                                             O:\user\user.c
000cf2   6e2b     MOVWF     0x2b,0x0                                                                                        
000cf4   50df     MOVF      0xdf,0x0,0x0                                                                                    
000cee   e005     BZ        0xcfa          				)                                                                            O:\user\user.c
000cf6   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
000cf8   e112     BNZ       0xd1e                                                                                           
000ce4   e11c     BNZ       0xd1e          			)                                                                             O:\user\user.c
                                           			{                                                                             O:\user\user.c
000cfa   0100     MOVLB     0x0            				in_cr = TRUE;                                                                O:\user\user.c
000cfc   0e01     MOVLW     0x1                                                                                             
000cfe   6f66     MOVWF     0x66,0x1                                                                                        
000d00   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = kCR;                                                 O:\user\user.c
000d02   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000d04   6aea     CLRF      0xea,0x0                                                                                        
000d06   0f40     ADDLW     0x40                                                                                            
000d08   6ee9     MOVWF     0xe9,0x0                                                                                        
000d0a   0e02     MOVLW     0x2                                                                                             
000d0c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d0e   0e0d     MOVLW     0xd                                                                                             
000d10   6eef     MOVWF     0xef,0x0                                                                                        
000d12   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               O:\user\user.c
000d14   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			                                                                              O:\user\user.c
                                           				// At this point, we know we have a full packet                              O:\user\user.c
                                           				// of information from the PC to parse                                       O:\user\user.c
000d16   52de     MOVF      0xde,0x1,0x0   				got_full_packet = TRUE;                                                      O:\user\user.c
000d18   0e01     MOVLW     0x1                                                                                             
000d1a   6edd     MOVWF     0xdd,0x0                                                                                        
                                           			}                                                                             O:\user\user.c
000d1c   d015     BRA       0xd48          			else if (                                                                     O:\user\user.c
000d1e   0e0d     MOVLW     0xd            				tst_char != kCR                                                              O:\user\user.c
000d20   5cdf     SUBWF     0xdf,0x0,0x0   				&&                                                                           O:\user\user.c
000d24   0e0a     MOVLW     0xa            				tst_char != kLF                                                              O:\user\user.c
000d22   e011     BZ        0xd46          			)                                                                             O:\user\user.c
000d26   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
000d28   e00e     BZ        0xd46                                                                                           
                                           			{                                                                             O:\user\user.c
                                           				// Only add a byte if it is not a CR or LF                                   O:\user\user.c
000d2a   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = tst_char;                                            O:\user\user.c
000d2c   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000d2e   6aea     CLRF      0xea,0x0                                                                                        
000d30   0f40     ADDLW     0x40                                                                                            
000d32   6ee9     MOVWF     0xe9,0x0                                                                                        
000d34   0e02     MOVLW     0x2                                                                                             
000d36   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d38   cfdf     MOVFF     0xfdf,0xfef                                                                                     
000d3a   ffef                                                                                                               
000d3c   0100     MOVLB     0x0            				in_cr = FALSE;                                                               O:\user\user.c
000d3e   6b66     CLRF      0x66,0x1                                                                                        
000d40   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               O:\user\user.c
000d42   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			}                                                                             O:\user\user.c
000d44   d001     BRA       0xd48          			else                                                                          O:\user\user.c
                                           			{                                                                             O:\user\user.c
000d46   d013     BRA       0xd6e          				continue;                                                                    O:\user\user.c
                                           			}                                                                             O:\user\user.c
                                           			// Check for buffer wraparound                                                O:\user\user.c
000d48   0e40     MOVLW     0x40           			if (kRX_BUF_SIZE == g_RX_buf_in)                                              O:\user\user.c
000d4a   0101     MOVLB     0x1                                                                                             
000d4c   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000d4e   e102     BNZ       0xd54                                                                                           
                                           			{                                                                             O:\user\user.c
000d50   0101     MOVLB     0x1            				g_RX_buf_in = 0;                                                             O:\user\user.c
000d52   6ba0     CLRF      0xa0,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           			// If we hit the out pointer, then this is bad.                               O:\user\user.c
000d54   0101     MOVLB     0x1            			if (g_RX_buf_in == g_RX_buf_out)                                              O:\user\user.c
000d56   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000d58   0101     MOVLB     0x1                                                                                             
000d5a   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000d5c   e102     BNZ       0xd62                                                                                           
                                           			{                                                                             O:\user\user.c
000d5e   860d     BSF       0xd,0x3,0x0    				bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);                          O:\user\user.c
000d60   d009     BRA       0xd74          				break;                                                                       O:\user\user.c
                                           			}                                                                             O:\user\user.c
                                           			// Now, if we've gotten a full command (user send <CR>) then                  O:\user\user.c
                                           			// go call the code that deals with that command, and then                    O:\user\user.c
                                           			// keep parsing. (This allows multiple small commands per packet)             O:\user\user.c
000d62   0e01     MOVLW     0x1            			if (got_full_packet)                                                          O:\user\user.c
000d64   50db     MOVF      0xdb,0x0,0x0                                                                                    
000d66   e003     BZ        0xd6e                                                                                           
                                           			{                                                                             O:\user\user.c
000d68   d915     RCALL     0xf94          				parse_packet ();                                                             O:\user\user.c
000d6a   0e01     MOVLW     0x1            				got_full_packet = FALSE;                                                     O:\user\user.c
000d6c   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}		                                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           		// Prepare dual-ram buffer for next OUT transaction                            O:\user\user.c
000d74   0104     MOVLB     0x4            		CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                                     O:\user\user.c
000d76   0e40     MOVLW     0x40                                                                                            
000d78   6f19     MOVWF     0x19,0x1                                                                                        
000d7a   0e40     MOVLW     0x40           		mUSBBufferReady(CDC_BULK_BD_OUT);                                              O:\user\user.c
000d7c   0104     MOVLB     0x4                                                                                             
000d7e   1718     ANDWF     0x18,0x1,0x1                                                                                    
000d80   0104     MOVLB     0x4                                                                                             
000d82   7d18     BTG       0x18,0x6,0x1                                                                                    
000d84   0e88     MOVLW     0x88                                                                                            
000d86   0104     MOVLB     0x4                                                                                             
000d88   1318     IORWF     0x18,0x1,0x1                                                                                    
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Check for any errors logged in error_byte that need to be sent out           O:\user\user.c
000d8a   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 O:\user\user.c
000d8c   e101     BNZ       0xd90                                                                                           
000d8e   d081     BRA       0xe92                                                                                           
                                           	{                                                                               O:\user\user.c
000d90   a00d     BTFSS     0xd,0x0,0x0    		if (bittst (error_byte, 0))                                                    O:\user\user.c
000d92   d010     BRA       0xdb4                                                                                           
                                           		{                                                                              O:\user\user.c
                                           			// Unused as of yet                                                           O:\user\user.c
000d94   0e99     MOVLW     0x99           			printf ((rom char *)"!0 \r\n");                                               O:\user\user.c
000d96   6e2a     MOVWF     0x2a,0x0                                                                                        
000d98   0e30     MOVLW     0x30                                                                                            
000d9a   6e2b     MOVWF     0x2b,0x0                                                                                        
000d9c   6a2c     CLRF      0x2c,0x0                                                                                        
000d9e   c02a     MOVFF     0x2a,0xfe6                                                                                      
000da0   ffe6                                                                                                               
000da2   c02b     MOVFF     0x2b,0xfe6                                                                                      
000da4   ffe6                                                                                                               
000da6   c02c     MOVFF     0x2c,0xfe6                                                                                      
000da8   ffe6                                                                                                               
000daa   ec91     CALL      0x3322,0x0                                                                                      
000dac   f019                                                                                                               
000dae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000db0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000db2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000db4   a20d     BTFSS     0xd,0x1,0x0    		if (bittst (error_byte, 1))                                                    O:\user\user.c
000db6   d010     BRA       0xdd8                                                                                           
                                           		{                                                                              O:\user\user.c
                                           			// Unused as of yet                                                           O:\user\user.c
000db8   0e93     MOVLW     0x93           			printf ((rom char *)"!1 \r\n");                                               O:\user\user.c
000dba   6e2a     MOVWF     0x2a,0x0                                                                                        
000dbc   0e30     MOVLW     0x30                                                                                            
000dbe   6e2b     MOVWF     0x2b,0x0                                                                                        
000dc0   6a2c     CLRF      0x2c,0x0                                                                                        
000dc2   c02a     MOVFF     0x2a,0xfe6                                                                                      
000dc4   ffe6                                                                                                               
000dc6   c02b     MOVFF     0x2b,0xfe6                                                                                      
000dc8   ffe6                                                                                                               
000dca   c02c     MOVFF     0x2c,0xfe6                                                                                      
000dcc   ffe6                                                                                                               
000dce   ec91     CALL      0x3322,0x0                                                                                      
000dd0   f019                                                                                                               
000dd2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000dd4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000dd6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000dd8   a40d     BTFSS     0xd,0x2,0x0    		if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))                           O:\user\user.c
000dda   d010     BRA       0xdfc                                                                                           
                                           		{                                                                              O:\user\user.c
000ddc   0e77     MOVLW     0x77           			printf ((rom char *)"!2 Err: TX Buffer overrun\r\n");                         O:\user\user.c
000dde   6e2a     MOVWF     0x2a,0x0                                                                                        
000de0   0e30     MOVLW     0x30                                                                                            
000de2   6e2b     MOVWF     0x2b,0x0                                                                                        
000de4   6a2c     CLRF      0x2c,0x0                                                                                        
000de6   c02a     MOVFF     0x2a,0xfe6                                                                                      
000de8   ffe6                                                                                                               
000dea   c02b     MOVFF     0x2b,0xfe6                                                                                      
000dec   ffe6                                                                                                               
000dee   c02c     MOVFF     0x2c,0xfe6                                                                                      
000df0   ffe6                                                                                                               
000df2   ec91     CALL      0x3322,0x0                                                                                      
000df4   f019                                                                                                               
000df6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000df8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000dfa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000dfc   a60d     BTFSS     0xd,0x3,0x0    		if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))                        O:\user\user.c
000dfe   d010     BRA       0xe20                                                                                           
                                           		{                                                                              O:\user\user.c
000e00   0e5b     MOVLW     0x5b           			printf ((rom char *)"!3 Err: RX Buffer overrun\r\n");                         O:\user\user.c
000e02   6e2a     MOVWF     0x2a,0x0                                                                                        
000e04   0e30     MOVLW     0x30                                                                                            
000e06   6e2b     MOVWF     0x2b,0x0                                                                                        
000e08   6a2c     CLRF      0x2c,0x0                                                                                        
000e0a   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e0c   ffe6                                                                                                               
000e0e   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e10   ffe6                                                                                                               
000e12   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e14   ffe6                                                                                                               
000e16   ec91     CALL      0x3322,0x0                                                                                      
000e18   f019                                                                                                               
000e1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e1e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000e20   a80d     BTFSS     0xd,0x4,0x0    		if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))                        O:\user\user.c
000e22   d010     BRA       0xe44                                                                                           
                                           		{                                                                              O:\user\user.c
000e24   0e3c     MOVLW     0x3c           			printf ((rom char *)"!4 Err: Missing parameter(s)\r\n");                      O:\user\user.c
000e26   6e2a     MOVWF     0x2a,0x0                                                                                        
000e28   0e30     MOVLW     0x30                                                                                            
000e2a   6e2b     MOVWF     0x2b,0x0                                                                                        
000e2c   6a2c     CLRF      0x2c,0x0                                                                                        
000e2e   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e30   ffe6                                                                                                               
000e32   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e34   ffe6                                                                                                               
000e36   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e38   ffe6                                                                                                               
000e3a   ec91     CALL      0x3322,0x0                                                                                      
000e3c   f019                                                                                                               
000e3e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e40   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e42   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000e44   aa0d     BTFSS     0xd,0x5,0x0    		if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))                            O:\user\user.c
000e46   d000     BRA       0xe48                                                                                           
                                           		{                                                                              O:\user\user.c
                                           			// We don't need to do anything since something has already been printed out  O:\user\user.c
                                           			//printf ((rom char *)"!5\r\n");                                              O:\user\user.c
                                           		}                                                                              O:\user\user.c
000e48   ac0d     BTFSS     0xd,0x6,0x0    		if (bittst (error_byte, kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT))                  O:\user\user.c
000e4a   d010     BRA       0xe6c                                                                                           
                                           		{                                                                              O:\user\user.c
000e4c   0e1b     MOVLW     0x1b           			printf ((rom char *)"!6 Err: Invalid paramter value\r\n");                    O:\user\user.c
000e4e   6e2a     MOVWF     0x2a,0x0                                                                                        
000e50   0e30     MOVLW     0x30                                                                                            
000e52   6e2b     MOVWF     0x2b,0x0                                                                                        
000e54   6a2c     CLRF      0x2c,0x0                                                                                        
000e56   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e58   ffe6                                                                                                               
000e5a   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e5c   ffe6                                                                                                               
000e5e   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e60   ffe6                                                                                                               
000e62   ec91     CALL      0x3322,0x0                                                                                      
000e64   f019                                                                                                               
000e66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e68   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e6a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000e6c   ae0d     BTFSS     0xd,0x7,0x0    		if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))                         O:\user\user.c
000e6e   d010     BRA       0xe90                                                                                           
                                           		{                                                                              O:\user\user.c
000e70   0e02     MOVLW     0x2            			printf ((rom char *)"!7 Err: Extra parmater\r\n");                            O:\user\user.c
000e72   6e2a     MOVWF     0x2a,0x0                                                                                        
000e74   0e30     MOVLW     0x30                                                                                            
000e76   6e2b     MOVWF     0x2b,0x0                                                                                        
000e78   6a2c     CLRF      0x2c,0x0                                                                                        
000e7a   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e7c   ffe6                                                                                                               
000e7e   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e80   ffe6                                                                                                               
000e82   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e84   ffe6                                                                                                               
000e86   ec91     CALL      0x3322,0x0                                                                                      
000e88   f019                                                                                                               
000e8a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e8e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              O:\user\user.c
000e90   6a0d     CLRF      0xd,0x0        		error_byte = 0;                                                                O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Go send any data that needs sending to PC                                    O:\user\user.c
000e92   d835     RCALL     0xefe          	check_and_send_TX_data ();                                                      O:\user\user.c
000e94   0e02     MOVLW     0x2            }                                                                                O:\user\user.c
000e96   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000e98   e202     BC        0xe9e                                                                                           
000e9a   6ae1     CLRF      0xe1,0x0                                                                                        
000e9c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e9e   6ee1     MOVWF     0xe1,0x0                                                                                        
000ea0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ea2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000ea4   ffd9                                                                                                               
000ea6   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           // This is our replacement for the standard putc routine                         O:\user\user.c
                                           // This enables printf() and all related functions to print to                   O:\user\user.c
                                           // the UBS output (i.e. to the PC) buffer                                        O:\user\user.c
000ea8   cfd9     MOVFF     0xfd9,0xfe6    int _user_putc (char c)                                                          O:\user\user.c
000eaa   ffe6                                                                                                               
000eac   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000eae   ffd9                                                                                                               
                                           {                                                                                O:\user\user.c
                                           	// Copy the character into the output buffer                                    O:\user\user.c
000eb0   0101     MOVLB     0x1            	g_TX_buf[g_TX_buf_in] = c;                                                      O:\user\user.c
000eb2   519e     MOVF      0x9e,0x0,0x1                                                                                    
000eb4   6aea     CLRF      0xea,0x0                                                                                        
000eb6   0f00     ADDLW     0x0                                                                                             
000eb8   6ee9     MOVWF     0xe9,0x0                                                                                        
000eba   0e02     MOVLW     0x2                                                                                             
000ebc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ebe   0efe     MOVLW     0xfe                                                                                            
000ec0   cfdb     MOVFF     0xfdb,0xfef                                                                                     
000ec2   ffef                                                                                                               
000ec4   0101     MOVLB     0x1            	g_TX_buf_in++;                                                                  O:\user\user.c
000ec6   2b9e     INCF      0x9e,0x1,0x1                                                                                    
                                                                                                                            O:\user\user.c
                                           	// Check for wrap around                                                        O:\user\user.c
000ec8   0e40     MOVLW     0x40           	if (kTX_BUF_SIZE == g_TX_buf_in)                                                O:\user\user.c
000eca   0101     MOVLB     0x1                                                                                             
000ecc   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000ece   e102     BNZ       0xed4                                                                                           
                                           	{                                                                               O:\user\user.c
000ed0   0101     MOVLB     0x1            		g_TX_buf_in = 0;                                                               O:\user\user.c
000ed2   6b9e     CLRF      0x9e,0x1                                                                                        
                                           	}                                                                               O:\user\user.c
                                           	                                                                                O:\user\user.c
                                           	// Also check to see if we bumped up against our output pointer                 O:\user\user.c
000ed4   0101     MOVLB     0x1            	if (g_TX_buf_in == g_TX_buf_out)                                                O:\user\user.c
000ed6   519f     MOVF      0x9f,0x0,0x1                                                                                    
000ed8   0101     MOVLB     0x1                                                                                             
000eda   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000edc   e101     BNZ       0xee0                                                                                           
                                           	{                                                                               O:\user\user.c
000ede   840d     BSF       0xd,0x2,0x0    		bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);                               O:\user\user.c
                                           	}                                                                               O:\user\user.c
000ee0   0efe     MOVLW     0xfe           	return (c);                                                                     O:\user\user.c
000ee2   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000ee4   f02a                                                                                                               
000ee6   6a2b     CLRF      0x2b,0x0                                                                                        
000ee8   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000eea   682b     SETF      0x2b,0x0                                                                                        
000eec   c02a     MOVFF     0x2a,0xff3                                                                                      
000eee   fff3                                                                                                               
000ef0   c02b     MOVFF     0x2b,0xff4                                                                                      
000ef2   fff4                                                                                                               
000ef4   d000     BRA       0xef6                                                                                           
000ef6   52e5     MOVF      0xe5,0x1,0x0   }                                                                                O:\user\user.c
000ef8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000efa   ffd9                                                                                                               
000efc   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           // In this function, we check to see it is OK to transmit. If so                 O:\user\user.c
                                           // we see if there is any data to transmit to PC. If so, we schedule             O:\user\user.c
                                           // it for sending.                                                               O:\user\user.c
000efe   cfd9     MOVFF     0xfd9,0xfe6    void check_and_send_TX_data (void)                                               O:\user\user.c
000f00   ffe6                                                                                                               
000f02   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000f04   ffd9                                                                                                               
000f06   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	char temp;                                                                      O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Only send if we're not already sending something                             O:\user\user.c
000f08   0101     MOVLB     0x1            	if (mUSBUSARTIsTxTrfReady ())                                                   O:\user\user.c
000f0a   51d9     MOVF      0xd9,0x0,0x1                                                                                    
000f0c   e13e     BNZ       0xf8a                                                                                           
                                           	{                                                                               O:\user\user.c
                                           		// And only send if there's something there to send                            O:\user\user.c
000f0e   0101     MOVLB     0x1            		if (g_TX_buf_out != g_TX_buf_in)                                               O:\user\user.c
000f10   519e     MOVF      0x9e,0x0,0x1                                                                                    
000f12   0101     MOVLB     0x1                                                                                             
000f14   5d9f     SUBWF     0x9f,0x0,0x1                                                                                    
000f16   e039     BZ        0xf8a                                                                                           
                                           		{                                                                              O:\user\user.c
                                           			// Now decide if we need to break it up into two parts or not                 O:\user\user.c
000f18   0101     MOVLB     0x1            			if (g_TX_buf_in > g_TX_buf_out)                                               O:\user\user.c
000f1a   519f     MOVF      0x9f,0x0,0x1                                                                                    
000f1c   0101     MOVLB     0x1                                                                                             
000f1e   80d8     BSF       0xd8,0x0,0x0                                                                                    
000f20   559e     SUBFWB    0x9e,0x0,0x1                                                                                    
000f22   e21a     BC        0xf58                                                                                           
                                           			{                                                                             O:\user\user.c
                                           				// Since IN is beyond OUT, only need one chunk                               O:\user\user.c
000f24   0101     MOVLB     0x1            				temp = g_TX_buf_in - g_TX_buf_out;                                           O:\user\user.c
000f26   519f     MOVF      0x9f,0x0,0x1                                                                                    
000f28   0101     MOVLB     0x1                                                                                             
000f2a   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000f2c   6edf     MOVWF     0xdf,0x0                                                                                        
000f2e   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              O:\user\user.c
000f30   519f     MOVF      0x9f,0x0,0x1                                                                                    
000f32   0101     MOVLB     0x1                                                                                             
000f34   6fda     MOVWF     0xda,0x1                                                                                        
000f36   6bdb     CLRF      0xdb,0x1                                                                                        
000f38   0e00     MOVLW     0x0                                                                                             
000f3a   0101     MOVLB     0x1                                                                                             
000f3c   27da     ADDWF     0xda,0x1,0x1                                                                                    
000f3e   0e02     MOVLW     0x2                                                                                             
000f40   0101     MOVLB     0x1                                                                                             
000f42   23db     ADDWFC    0xdb,0x1,0x1                                                                                    
000f44   cfdf     MOVFF     0xfdf,0x1de                                                                                     
000f46   f1de                                                                                                               
000f48   0101     MOVLB     0x1                                                                                             
000f4a   6bdf     CLRF      0xdf,0x1                                                                                        
000f4c   0101     MOVLB     0x1                                                                                             
000f4e   0e01     MOVLW     0x1                                                                                             
000f50   6fd9     MOVWF     0xd9,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            O:\user\user.c
                                           				// update the pointer                                                        O:\user\user.c
000f52   c19e     MOVFF     0x19e,0x19f    				g_TX_buf_out = g_TX_buf_in;                                                  O:\user\user.c
000f54   f19f                                                                                                               
                                           			}                                                                             O:\user\user.c
000f56   d019     BRA       0xf8a          			else                                                                          O:\user\user.c
                                           			{                                                                             O:\user\user.c
                                           				// Since IN is before OUT, we need to send from OUT to the end               O:\user\user.c
                                           				// of the buffer, then the next time around we'll catch                      O:\user\user.c
                                           				// from the beginning to IN.                                                 O:\user\user.c
000f58   0e40     MOVLW     0x40           				temp = kTX_BUF_SIZE - g_TX_buf_out;                                          O:\user\user.c
000f5a   0101     MOVLB     0x1                                                                                             
000f5c   80d8     BSF       0xd8,0x0,0x0                                                                                    
000f5e   559f     SUBFWB    0x9f,0x0,0x1                                                                                    
000f60   6edf     MOVWF     0xdf,0x0                                                                                        
000f62   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              O:\user\user.c
000f64   519f     MOVF      0x9f,0x0,0x1                                                                                    
000f66   0101     MOVLB     0x1                                                                                             
000f68   6fda     MOVWF     0xda,0x1                                                                                        
000f6a   6bdb     CLRF      0xdb,0x1                                                                                        
000f6c   0e00     MOVLW     0x0                                                                                             
000f6e   0101     MOVLB     0x1                                                                                             
000f70   27da     ADDWF     0xda,0x1,0x1                                                                                    
000f72   0e02     MOVLW     0x2                                                                                             
000f74   0101     MOVLB     0x1                                                                                             
000f76   23db     ADDWFC    0xdb,0x1,0x1                                                                                    
000f78   cfdf     MOVFF     0xfdf,0x1de                                                                                     
000f7a   f1de                                                                                                               
000f7c   0101     MOVLB     0x1                                                                                             
000f7e   6bdf     CLRF      0xdf,0x1                                                                                        
000f80   0101     MOVLB     0x1                                                                                             
000f82   0e01     MOVLW     0x1                                                                                             
000f84   6fd9     MOVWF     0xd9,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            O:\user\user.c
                                           				// update the pointer                                                        O:\user\user.c
000f86   0101     MOVLB     0x1            				g_TX_buf_out = 0;                                                            O:\user\user.c
000f88   6b9f     CLRF      0x9f,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
000f8a   52e5     MOVF      0xe5,0x1,0x0   }                                                                                O:\user\user.c
000f8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f8e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000f90   ffd9                                                                                                               
000f92   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Look at the new packet, see what command it is, and                           O:\user\user.c
                                           // route it appropriately. We come in knowing that                               O:\user\user.c
                                           // our packet is in g_RX_buf[], and that the beginning                           O:\user\user.c
                                           // of the packet is at g_RX_buf_out, and the end (CR) is at                      O:\user\user.c
                                           // g_RX_buf_in. Note that because of buffer wrapping,                            O:\user\user.c
                                           // g_RX_buf_in may be less than g_RX_buf_out.                                    O:\user\user.c
000f94   cfd9     MOVFF     0xfd9,0xfe6    void parse_packet(void)                                                          O:\user\user.c
000f96   ffe6                                                                                                               
000f98   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000f9a   ffd9                                                                                                               
000f9c   0e04     MOVLW     0x4                                                                                             
000f9e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
000fa0   6ade     CLRF      0xde,0x0       	unsigned int	command = 0;                                                       O:\user\user.c
000fa2   6add     CLRF      0xdd,0x0                                                                                        
000fa4   0e02     MOVLW     0x2            	unsigned char	cmd1 = 0;                                                         O:\user\user.c
000fa6   6adb     CLRF      0xdb,0x0                                                                                        
000fa8   0e03     MOVLW     0x3            	unsigned char	cmd2 = 0;                                                         O:\user\user.c
000faa   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Always grab the first character (which is the first byte of the command)     O:\user\user.c
000fac   0101     MOVLB     0x1            	cmd1 = toupper (g_RX_buf[g_RX_buf_out]);                                        O:\user\user.c
000fae   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000fb0   6aea     CLRF      0xea,0x0                                                                                        
000fb2   0f40     ADDLW     0x40                                                                                            
000fb4   6ee9     MOVWF     0xe9,0x0                                                                                        
000fb6   0e02     MOVLW     0x2                                                                                             
000fb8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000fba   50ef     MOVF      0xef,0x0,0x0                                                                                    
000fbc   6ee6     MOVWF     0xe6,0x0                                                                                        
000fbe   6ae6     CLRF      0xe6,0x0                                                                                        
000fc0   ec8a     CALL      0x3514,0x0                                                                                      
000fc2   f01a                                                                                                               
000fc4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fc6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fc8   0e02     MOVLW     0x2                                                                                             
000fca   cff3     MOVFF     0xff3,0xfdb                                                                                     
000fcc   ffdb                                                                                                               
000fce   0101     MOVLB     0x1            	advance_RX_buf_out();                                                           O:\user\user.c
000fd0   2ba1     INCF      0xa1,0x1,0x1                                                                                    
000fd2   0e40     MOVLW     0x40                                                                                            
000fd4   0101     MOVLB     0x1                                                                                             
000fd6   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
000fd8   e102     BNZ       0xfde                                                                                           
000fda   0101     MOVLB     0x1                                                                                             
000fdc   6ba1     CLRF      0xa1,0x1                                                                                        
000fde   0e02     MOVLW     0x2            	command = cmd1;                                                                 O:\user\user.c
000fe0   50db     MOVF      0xdb,0x0,0x0                                                                                    
000fe2   6ede     MOVWF     0xde,0x0                                                                                        
000fe4   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Only grab second one if it is not a comma                                    O:\user\user.c
000fe6   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',' && g_RX_buf[g_RX_buf_out] != kCR)             O:\user\user.c
000fe8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000fea   6aea     CLRF      0xea,0x0                                                                                        
000fec   0f40     ADDLW     0x40                                                                                            
000fee   6ee9     MOVWF     0xe9,0x0                                                                                        
000ff0   0e02     MOVLW     0x2                                                                                             
000ff2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ff4   50ef     MOVF      0xef,0x0,0x0                                                                                    
000ff6   082c     SUBLW     0x2c                                                                                            
000ff8   e035     BZ        0x1064                                                                                          
000ffa   0101     MOVLB     0x1                                                                                             
000ffc   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000ffe   6aea     CLRF      0xea,0x0                                                                                        
001000   0f40     ADDLW     0x40                                                                                            
001002   6ee9     MOVWF     0xe9,0x0                                                                                        
001004   0e02     MOVLW     0x2                                                                                             
001006   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001008   50ef     MOVF      0xef,0x0,0x0                                                                                    
00100a   080d     SUBLW     0xd                                                                                             
00100c   e02b     BZ        0x1064                                                                                          
                                           	{                                                                               O:\user\user.c
00100e   0101     MOVLB     0x1            		cmd2 = toupper (g_RX_buf[g_RX_buf_out]);                                       O:\user\user.c
001010   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001012   6aea     CLRF      0xea,0x0                                                                                        
001014   0f40     ADDLW     0x40                                                                                            
001016   6ee9     MOVWF     0xe9,0x0                                                                                        
001018   0e02     MOVLW     0x2                                                                                             
00101a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00101c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00101e   6ee6     MOVWF     0xe6,0x0                                                                                        
001020   6ae6     CLRF      0xe6,0x0                                                                                        
001022   ec8a     CALL      0x3514,0x0                                                                                      
001024   f01a                                                                                                               
001026   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001028   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00102a   0e03     MOVLW     0x3                                                                                             
00102c   cff3     MOVFF     0xff3,0xfdb                                                                                     
00102e   ffdb                                                                                                               
001030   0101     MOVLB     0x1            		advance_RX_buf_out();                                                          O:\user\user.c
001032   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001034   0e40     MOVLW     0x40                                                                                            
001036   0101     MOVLB     0x1                                                                                             
001038   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00103a   e102     BNZ       0x1040                                                                                          
00103c   0101     MOVLB     0x1                                                                                             
00103e   6ba1     CLRF      0xa1,0x1                                                                                        
001040   0e02     MOVLW     0x2            		command = ((unsigned int)(cmd1) << 8) + cmd2;                                  O:\user\user.c
001042   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001044   f02c                                                                                                               
001046   c02c     MOVFF     0x2c,0x2d                                                                                       
001048   f02d                                                                                                               
00104a   6a2c     CLRF      0x2c,0x0                                                                                        
00104c   0e03     MOVLW     0x3                                                                                             
00104e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001050   0100     MOVLB     0x0                                                                                             
001052   242c     ADDWF     0x2c,0x0,0x0                                                                                    
001054   6e2a     MOVWF     0x2a,0x0                                                                                        
001056   0e00     MOVLW     0x0                                                                                             
001058   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
00105a   6e2b     MOVWF     0x2b,0x0                                                                                        
00105c   c02a     MOVFF     0x2a,0xfde                                                                                      
00105e   ffde                                                                                                               
001060   c02b     MOVFF     0x2b,0xfdd                                                                                      
001062   ffdd                                                                                                               
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Now 'command' is equal to one or two bytes of our command                    O:\user\user.c
001064   0e00     MOVLW     0x0            	switch (command)                                                                O:\user\user.c
001066   cfdb     MOVFF     0xfdb,0x1e                                                                                      
001068   f01e                                                                                                               
00106a   0e01     MOVLW     0x1                                                                                             
00106c   cfdb     MOVFF     0xfdb,0x1f                                                                                      
00106e   f01f                                                                                                               
001070   0e57     MOVLW     0x57                                                                                            
001072   181e     XORWF     0x1e,0x0,0x0                                                                                    
001074   e102     BNZ       0x107a                                                                                          
001076   0e48     MOVLW     0x48                                                                                            
001078   181f     XORWF     0x1f,0x0,0x0                                                                                    
00107a   e018     BZ        0x10ac                                                                                          
00107c   0e54     MOVLW     0x54                                                                                            
00107e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001080   e102     BNZ       0x1086                                                                                          
001082   0e53     MOVLW     0x53                                                                                            
001084   181f     XORWF     0x1f,0x0,0x0                                                                                    
001086   e010     BZ        0x10a8                                                                                          
001088   0e4f     MOVLW     0x4f                                                                                            
00108a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00108c   e102     BNZ       0x1092                                                                                          
00108e   0e47     MOVLW     0x47                                                                                            
001090   181f     XORWF     0x1f,0x0,0x0                                                                                    
001092   e008     BZ        0x10a4                                                                                          
001094   0e56     MOVLW     0x56                                                                                            
001096   181e     XORWF     0x1e,0x0,0x0                                                                                    
001098   e101     BNZ       0x109c                                                                                          
00109a   501f     MOVF      0x1f,0x0,0x0                                                                                    
00109c   e001     BZ        0x10a0                                                                                          
00109e   d008     BRA       0x10b0                                                                                          
                                           	{                                                                               O:\user\user.c
                                           		case 'V':                                                                      O:\user\user.c
                                           		{                                                                              O:\user\user.c
                                           			// Version command                                                            O:\user\user.c
0010a0   d87d     RCALL     0x119c         			parse_V_packet ();                                                            O:\user\user.c
0010a2   d045     BRA       0x112e         			break;                                                                        O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           		case ('G' * 256) + 'O':                                                        O:\user\user.c
                                           		{                                                                              O:\user\user.c
0010a4   d899     RCALL     0x11d8         			parse_GO_packet ();                                                           O:\user\user.c
0010a6   d043     BRA       0x112e         			break;                                                                        O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           		case ('S' * 256) + 'T':                                                        O:\user\user.c
                                           		{                                                                              O:\user\user.c
0010a8   d8ab     RCALL     0x1200         			parse_ST_packet ();                                                           O:\user\user.c
0010aa   d041     BRA       0x112e         			break;                                                                        O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           		case ('H' * 256) + 'W':                                                        O:\user\user.c
                                           		{                                                                              O:\user\user.c
0010ac   d8af     RCALL     0x120c         			parse_HW_packet();                                                            O:\user\user.c
0010ae   d03f     BRA       0x112e         			break;                                                                        O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           		default:                                                                       O:\user\user.c
                                           		{                                                                              O:\user\user.c
0010b0   0e03     MOVLW     0x3            			if (0 == cmd2)                                                                O:\user\user.c
0010b2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0010b4   e11a     BNZ       0x10ea                                                                                          
                                           			{                                                                             O:\user\user.c
                                           				// Send back 'unknown command' error                                         O:\user\user.c
                                           				printf (                                                                     O:\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c:%2X'\r\n"                         O:\user\user.c
0010c6   0edf     MOVLW     0xdf           					,cmd1                                                                       O:\user\user.c
0010c8   6e2a     MOVWF     0x2a,0x0                                                                                        
0010ca   0e2f     MOVLW     0x2f                                                                                            
0010cc   6e2b     MOVWF     0x2b,0x0                                                                                        
0010ce   6a2c     CLRF      0x2c,0x0                                                                                        
0010d0   c02a     MOVFF     0x2a,0xfe6                                                                                      
0010d2   ffe6                                                                                                               
0010d4   c02b     MOVFF     0x2b,0xfe6                                                                                      
0010d6   ffe6                                                                                                               
0010d8   c02c     MOVFF     0x2c,0xfe6                                                                                      
0010da   ffe6                                                                                                               
0010be   0e02     MOVLW     0x2            					,cmd1                                                                       O:\user\user.c
0010c0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0010c2   ffe6                                                                                                               
0010c4   6ae6     CLRF      0xe6,0x0                                                                                        
0010b6   0e02     MOVLW     0x2            				);                                                                           O:\user\user.c
0010b8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0010ba   ffe6                                                                                                               
0010bc   6ae6     CLRF      0xe6,0x0                                                                                        
0010dc   ec91     CALL      0x3322,0x0                                                                                      
0010de   f019                                                                                                               
0010e0   6e2d     MOVWF     0x2d,0x0                                                                                        
0010e2   0e07     MOVLW     0x7                                                                                             
0010e4   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0010e6   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             O:\user\user.c
0010e8   d021     BRA       0x112c         			else                                                                          O:\user\user.c
                                           			{                                                                             O:\user\user.c
                                           				// Send back 'unknown command' error                                         O:\user\user.c
                                           				printf (                                                                     O:\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c%c:%2X%2X'\r\n"                    O:\user\user.c
00110a   0eb7     MOVLW     0xb7           					,cmd1                                                                       O:\user\user.c
00110c   6e2a     MOVWF     0x2a,0x0                                                                                        
00110e   0e2f     MOVLW     0x2f                                                                                            
001110   6e2b     MOVWF     0x2b,0x0                                                                                        
001112   6a2c     CLRF      0x2c,0x0                                                                                        
001114   c02a     MOVFF     0x2a,0xfe6                                                                                      
001116   ffe6                                                                                                               
001118   c02b     MOVFF     0x2b,0xfe6                                                                                      
00111a   ffe6                                                                                                               
00111c   c02c     MOVFF     0x2c,0xfe6                                                                                      
00111e   ffe6                                                                                                               
001102   0e02     MOVLW     0x2            					,cmd2                                                                       O:\user\user.c
001104   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001106   ffe6                                                                                                               
001108   6ae6     CLRF      0xe6,0x0                                                                                        
0010fa   0e03     MOVLW     0x3            					,cmd1                                                                       O:\user\user.c
0010fc   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0010fe   ffe6                                                                                                               
001100   6ae6     CLRF      0xe6,0x0                                                                                        
0010f2   0e02     MOVLW     0x2            					,cmd2                                                                       O:\user\user.c
0010f4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0010f6   ffe6                                                                                                               
0010f8   6ae6     CLRF      0xe6,0x0                                                                                        
0010ea   0e03     MOVLW     0x3            				);                                                                           O:\user\user.c
0010ec   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0010ee   ffe6                                                                                                               
0010f0   6ae6     CLRF      0xe6,0x0                                                                                        
001120   ec91     CALL      0x3322,0x0                                                                                      
001122   f019                                                                                                               
001124   6e2d     MOVWF     0x2d,0x0                                                                                        
001126   0e0b     MOVLW     0xb                                                                                             
001128   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00112a   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             O:\user\user.c
00112c   d000     BRA       0x112e         			break;                                                                        O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Double check that our output pointer is now at the ending <CR>               O:\user\user.c
                                           	// If it is not, this indicates that there were extra characters that           O:\user\user.c
                                           	// the command parsing routine didn't eat. This would be an error and needs     O:\user\user.c
                                           	// to be reported. (Ignore for Reset command because FIFO pointers get cleared.) O:\user\user.c
                                           	if (                                                                            O:\user\user.c
00112e   0101     MOVLB     0x1            		(g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)                             O:\user\user.c
001130   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001132   6aea     CLRF      0xea,0x0                                                                                        
001134   0f40     ADDLW     0x40                                                                                            
001136   6ee9     MOVWF     0xe9,0x0                                                                                        
001138   0e02     MOVLW     0x2                                                                                             
00113a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00113c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00113e   080d     SUBLW     0xd                                                                                             
001140   e00d     BZ        0x115c                                                                                          
001142   500d     MOVF      0xd,0x0,0x0                                                                                     
001144   e10b     BNZ       0x115c                                                                                          
                                           		&&                                                                             O:\user\user.c
001146   0e52     MOVLW     0x52           		('R' != command)                                                               O:\user\user.c
001148   6e2a     MOVWF     0x2a,0x0                                                                                        
00114a   6a2b     CLRF      0x2b,0x0                                                                                        
00114c   50df     MOVF      0xdf,0x0,0x0                                                                                    
00114e   182a     XORWF     0x2a,0x0,0x0                                                                                    
001150   e103     BNZ       0x1158                                                                                          
001152   52de     MOVF      0xde,0x1,0x0                                                                                    
001154   50dd     MOVF      0xdd,0x0,0x0                                                                                    
001156   182b     XORWF     0x2b,0x0,0x0                                                                                    
001158   e001     BZ        0x115c         	)                                                                               O:\user\user.c
                                           	{                                                                               O:\user\user.c
00115a   8e0d     BSF       0xd,0x7,0x0    		bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);                             O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Clean up by skipping over any bytes we haven't eaten                         O:\user\user.c
                                           	// This is safe since we parse each packet as we get a <CR>                     O:\user\user.c
                                           	// (i.e. g_RX_buf_in doesn't move while we are in this routine)                 O:\user\user.c
00115c   c1a0     MOVFF     0x1a0,0x1a1    	g_RX_buf_out = g_RX_buf_in;                                                     O:\user\user.c
00115e   f1a1                                                                                                               
001160   0e04     MOVLW     0x4            }                                                                                O:\user\user.c
001162   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001164   e202     BC        0x116a                                                                                          
001166   6ae1     CLRF      0xe1,0x0                                                                                        
001168   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00116a   6ee1     MOVWF     0xe1,0x0                                                                                        
00116c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00116e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001170   ffd9                                                                                                               
001172   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           // Print out the positive acknowledgement that the packet was received           O:\user\user.c
                                           // if we have acks turned on.                                                    O:\user\user.c
                                           void print_ack(void)                                                             O:\user\user.c
                                           {                                                                                O:\user\user.c
001174   0101     MOVLB     0x1            	if (g_ack_enable)                                                               O:\user\user.c
001176   51a6     MOVF      0xa6,0x0,0x1                                                                                    
001178   e010     BZ        0x119a                                                                                          
                                           	{                                                                               O:\user\user.c
00117a   0ea8     MOVLW     0xa8           		printf ((rom char *)st_OK);                                                    O:\user\user.c
00117c   6e2a     MOVWF     0x2a,0x0                                                                                        
00117e   0e35     MOVLW     0x35                                                                                            
001180   6e2b     MOVWF     0x2b,0x0                                                                                        
001182   6a2c     CLRF      0x2c,0x0                                                                                        
001184   c02a     MOVFF     0x2a,0xfe6                                                                                      
001186   ffe6                                                                                                               
001188   c02b     MOVFF     0x2b,0xfe6                                                                                      
00118a   ffe6                                                                                                               
00118c   c02c     MOVFF     0x2c,0xfe6                                                                                      
00118e   ffe6                                                                                                               
001190   ec91     CALL      0x3322,0x0                                                                                      
001192   f019                                                                                                               
001194   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001196   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001198   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               O:\user\user.c
00119a   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // All we do here is just print out our version number                           O:\user\user.c
                                           void parse_V_packet(void)                                                        O:\user\user.c
                                           {                                                                                O:\user\user.c
00119c   0eb0     MOVLW     0xb0           	printf ((rom char *)st_version);                                                O:\user\user.c
00119e   6e2a     MOVWF     0x2a,0x0                                                                                        
0011a0   0e35     MOVLW     0x35                                                                                            
0011a2   6e2b     MOVWF     0x2b,0x0                                                                                        
0011a4   6a2c     CLRF      0x2c,0x0                                                                                        
0011a6   c02a     MOVFF     0x2a,0xfe6                                                                                      
0011a8   ffe6                                                                                                               
0011aa   c02b     MOVFF     0x2b,0xfe6                                                                                      
0011ac   ffe6                                                                                                               
0011ae   c02c     MOVFF     0x2c,0xfe6                                                                                      
0011b0   ffe6                                                                                                               
0011b2   ec91     CALL      0x3322,0x0                                                                                      
0011b4   f019                                                                                                               
0011b6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0011b8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0011ba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0011bc   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void startRace (void)                                                            O:\user\user.c
                                           {			                                                                             O:\user\user.c
0011be   6893     SETF      0x93,0x0       	DDRB = 0xff;			// initialize the pins                                           O:\user\user.c
                                           	                                                                                O:\user\user.c
0011c0   0100     MOVLB     0x0            	isRacing = TRUE;		// make it possible to start monitoring sensors               O:\user\user.c
0011c2   0e01     MOVLW     0x1                                                                                             
0011c4   6f62     MOVWF     0x62,0x1                                                                                        
0011c6   0101     MOVLB     0x1            	raceTime=0;		// restart the stopwatch                                           O:\user\user.c
0011c8   6bac     CLRF      0xac,0x1                                                                                        
0011ca   6bad     CLRF      0xad,0x1                                                                                        
0011cc   6bae     CLRF      0xae,0x1                                                                                        
0011ce   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON=1;		// turn on the timer                                       O:\user\user.c
0011d0   0e01     MOVLW     0x1            	ISR_D_RepeatRate = 1;		// every 10ms advance the timer                          O:\user\user.c
0011d2   6e02     MOVWF     0x2,0x0                                                                                         
0011d4   6a03     CLRF      0x3,0x0                                                                                         
0011d6   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void parse_GO_packet (void)		// Start a race                                     O:\user\user.c
                                           {                                                                                O:\user\user.c
0011d8   dfcd     RCALL     0x1174         	print_ack();                                                                    O:\user\user.c
0011da   dff1     RCALL     0x11be         	startRace();                                                                    O:\user\user.c
                                           	// Extract values of each argument.                                             O:\user\user.c
                                           	//finish_tick = extract_number (kUCHAR);                                        O:\user\user.c
0011dc   0e01     MOVLW     0x1            	activeRollers = extract_number (kUCHAR);                                        O:\user\user.c
0011de   6ee6     MOVWF     0xe6,0x0                                                                                        
0011e0   d82c     RCALL     0x123a                                                                                          
0011e2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0011e4   c01d     MOVFF     0x1d,0x1a9                                                                                      
0011e6   f1a9                                                                                                               
0011e8   0e01     MOVLW     0x1            	refreshInterval = extract_number (kUCHAR);                                      O:\user\user.c
0011ea   6ee6     MOVWF     0xe6,0x0                                                                                        
0011ec   d826     RCALL     0x123a                                                                                          
0011ee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0011f0   c01d     MOVFF     0x1d,0x60                                                                                       
0011f2   f060                                                                                                               
0011f4   c01e     MOVFF     0x1e,0x61                                                                                       
0011f6   f061                                                                                                               
                                           	                                                                                O:\user\user.c
                                           	// Bail if we got a conversion error                                            O:\user\user.c
0011f8   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 O:\user\user.c
0011fa   e001     BZ        0x11fe                                                                                          
                                           	{                                                                               O:\user\user.c
0011fc   d000     BRA       0x11fe         		return;                                                                        O:\user\user.c
                                           	}                                                                               O:\user\user.c
0011fe   0012     RETURN    0x0            }	                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void parse_ST_packet (void)			// Stop the race.                                  O:\user\user.c
                                           {                                                                                O:\user\user.c
001200   dfb9     RCALL     0x1174         	print_ack();                                                                    O:\user\user.c
001202   0100     MOVLB     0x0            	isRacing = FALSE;			// stop monitoring sensors                                  O:\user\user.c
001204   6b62     CLRF      0x62,0x1                                                                                        
001206   0100     MOVLB     0x0            	raceTestMode = FALSE;                                                           O:\user\user.c
001208   6b63     CLRF      0x63,0x1                                                                                        
00120a   0012     RETURN    0x0            }	                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           void parse_HW_packet (void)			// Initiate hardware test mode.                    O:\user\user.c
                                           {                                                                                O:\user\user.c
00120c   dfb3     RCALL     0x1174         	print_ack();                                                                    O:\user\user.c
00120e   0100     MOVLB     0x0            	raceTestMode = TRUE;                                                            O:\user\user.c
001210   0e01     MOVLW     0x1                                                                                             
001212   6f63     MOVWF     0x63,0x1                                                                                        
001214   dfd4     RCALL     0x11be         	startRace();                                                                    O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Extract values of each argument.                                             O:\user\user.c
                                           	//finish_tick = extract_number (kUCHAR);                                        O:\user\user.c
001216   0e01     MOVLW     0x1            	activeRollers = extract_number (kUCHAR);                                        O:\user\user.c
001218   6ee6     MOVWF     0xe6,0x0                                                                                        
00121a   d80f     RCALL     0x123a                                                                                          
00121c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00121e   c01d     MOVFF     0x1d,0x1a9                                                                                      
001220   f1a9                                                                                                               
001222   0e01     MOVLW     0x1            	refreshInterval = extract_number (kUCHAR);                                      O:\user\user.c
001224   6ee6     MOVWF     0xe6,0x0                                                                                        
001226   d809     RCALL     0x123a                                                                                          
001228   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00122a   c01d     MOVFF     0x1d,0x60                                                                                       
00122c   f060                                                                                                               
00122e   c01e     MOVFF     0x1e,0x61                                                                                       
001230   f061                                                                                                               
                                           	                                                                                O:\user\user.c
                                           	// Bail if we got a conversion error                                            O:\user\user.c
001232   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 O:\user\user.c
001234   e001     BZ        0x1238                                                                                          
                                           	{                                                                               O:\user\user.c
001236   d000     BRA       0x1238         		return;                                                                        O:\user\user.c
                                           	}                                                                               O:\user\user.c
001238   0012     RETURN    0x0            }	                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           // Look at the string pointed to by ptr                                          O:\user\user.c
                                           // There should be a comma where ptr points to upon entry.                       O:\user\user.c
                                           // If not, throw a comma error.                                                  O:\user\user.c
                                           // If so, then look for up to three bytes after the                              O:\user\user.c
                                           // comma for numbers, and put them all into one                                  O:\user\user.c
                                           // byte (0-255). If the number is greater than 255, then                         O:\user\user.c
                                           // throw a range error.                                                          O:\user\user.c
                                           // Advance the pointer to the byte after the last number                         O:\user\user.c
                                           // and return.                                                                   O:\user\user.c
00123a   cfd9     MOVFF     0xfd9,0xfe6    signed short long extract_number(tExtractType type)                              O:\user\user.c
00123c   ffe6                                                                                                               
00123e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001240   ffd9                                                                                                               
001242   0e04     MOVLW     0x4                                                                                             
001244   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	signed short long acc;                                                          O:\user\user.c
001246   0e03     MOVLW     0x3            	unsigned char neg = FALSE;                                                      O:\user\user.c
001248   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Check to see if we're already at the end                                     O:\user\user.c
00124a   0e0d     MOVLW     0xd            	if (kCR == g_RX_buf[g_RX_buf_out])                                              O:\user\user.c
00124c   6e2a     MOVWF     0x2a,0x0                                                                                        
00124e   0101     MOVLB     0x1                                                                                             
001250   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001252   6aea     CLRF      0xea,0x0                                                                                        
001254   0f40     ADDLW     0x40                                                                                            
001256   6ee9     MOVWF     0xe9,0x0                                                                                        
001258   0e02     MOVLW     0x2                                                                                             
00125a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00125c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00125e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001260   e105     BNZ       0x126c                                                                                          
                                           	{                                                                               O:\user\user.c
001262   880d     BSF       0xd,0x4,0x0    		bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                            O:\user\user.c
001264   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    O:\user\user.c
001266   6a1e     CLRF      0x1e,0x0                                                                                        
001268   6a1f     CLRF      0x1f,0x0                                                                                        
00126a   d193     BRA       0x1592                                                                                          
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Check for comma where ptr points                                             O:\user\user.c
00126c   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              O:\user\user.c
00126e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001270   6aea     CLRF      0xea,0x0                                                                                        
001272   0f40     ADDLW     0x40                                                                                            
001274   6ee9     MOVWF     0xe9,0x0                                                                                        
001276   0e02     MOVLW     0x2                                                                                             
001278   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00127a   50ef     MOVF      0xef,0x0,0x0                                                                                    
00127c   082c     SUBLW     0x2c                                                                                            
00127e   e020     BZ        0x12c0                                                                                          
                                           	{                                                                               O:\user\user.c
001280   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); O:\user\user.c
001282   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001284   6aea     CLRF      0xea,0x0                                                                                        
001286   0f40     ADDLW     0x40                                                                                            
001288   6ee9     MOVWF     0xe9,0x0                                                                                        
00128a   0e02     MOVLW     0x2                                                                                             
00128c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00128e   50ef     MOVF      0xef,0x0,0x0                                                                                    
001290   6ee6     MOVWF     0xe6,0x0                                                                                        
001292   6ae6     CLRF      0xe6,0x0                                                                                        
001294   0e90     MOVLW     0x90                                                                                            
001296   6e2a     MOVWF     0x2a,0x0                                                                                        
001298   0e2f     MOVLW     0x2f                                                                                            
00129a   6e2b     MOVWF     0x2b,0x0                                                                                        
00129c   6a2c     CLRF      0x2c,0x0                                                                                        
00129e   c02a     MOVFF     0x2a,0xfe6                                                                                      
0012a0   ffe6                                                                                                               
0012a2   c02b     MOVFF     0x2b,0xfe6                                                                                      
0012a4   ffe6                                                                                                               
0012a6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0012a8   ffe6                                                                                                               
0012aa   ec91     CALL      0x3322,0x0                                                                                      
0012ac   f019                                                                                                               
0012ae   6e2d     MOVWF     0x2d,0x0                                                                                        
0012b0   0e05     MOVLW     0x5                                                                                             
0012b2   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0012b4   502d     MOVF      0x2d,0x0,0x0                                                                                    
0012b6   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                O:\user\user.c
0012b8   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    O:\user\user.c
0012ba   6a1e     CLRF      0x1e,0x0                                                                                        
0012bc   6a1f     CLRF      0x1f,0x0                                                                                        
0012be   d169     BRA       0x1592                                                                                          
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Move to the next character                                                   O:\user\user.c
0012c0   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          O:\user\user.c
0012c2   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0012c4   0e40     MOVLW     0x40                                                                                            
0012c6   0101     MOVLB     0x1                                                                                             
0012c8   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0012ca   e102     BNZ       0x12d0                                                                                          
0012cc   0101     MOVLB     0x1                                                                                             
0012ce   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            O:\user\user.c
                                           	// Now check for a sign character if we're not looking for ASCII chars          O:\user\user.c
                                           	if (                                                                            O:\user\user.c
0012d0   0e2d     MOVLW     0x2d           		('-' == g_RX_buf[g_RX_buf_out])                                                O:\user\user.c
0012d2   6e2a     MOVWF     0x2a,0x0                                                                                        
0012d4   0101     MOVLB     0x1                                                                                             
0012d6   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0012d8   6aea     CLRF      0xea,0x0                                                                                        
0012da   0f40     ADDLW     0x40                                                                                            
0012dc   6ee9     MOVWF     0xe9,0x0                                                                                        
0012de   0e02     MOVLW     0x2                                                                                             
0012e0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0012e2   50ef     MOVF      0xef,0x0,0x0                                                                                    
0012e4   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             O:\user\user.c
                                           		(                                                                              O:\user\user.c
0012e8   0e04     MOVLW     0x4            			(kASCII_CHAR != type)                                                         O:\user\user.c
0012ea   6e2b     MOVWF     0x2b,0x0                                                                                        
0012ec   0efe     MOVLW     0xfe                                                                                            
0012ee   50db     MOVF      0xdb,0x0,0x0                                                                                    
0012f0   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
                                           			&&                                                                            O:\user\user.c
0012f4   0e05     MOVLW     0x5            			(kUCASE_ASCII_CHAR != type)                                                   O:\user\user.c
0012f6   6e2c     MOVWF     0x2c,0x0                                                                                        
0012f8   0efe     MOVLW     0xfe                                                                                            
0012fa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0012fc   5c2c     SUBWF     0x2c,0x0,0x0                                                                                    
0012f2   e022     BZ        0x1338         		)                                                                              O:\user\user.c
0012fe   e01c     BZ        0x1338                                                                                          
0012e6   e128     BNZ       0x1338         	)                                                                               O:\user\user.c
                                           	{                                                                               O:\user\user.c
                                           		// It's an error if we see a negative sign on an unsigned value                O:\user\user.c
                                           		if (                                                                           O:\user\user.c
001300   0efe     MOVLW     0xfe           			(kUCHAR == type)                                                              O:\user\user.c
001302   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			||                                                                            O:\user\user.c
001306   0e03     MOVLW     0x3            			(kUINT == type)                                                               O:\user\user.c
001308   6e2a     MOVWF     0x2a,0x0                                                                                        
00130a   0efe     MOVLW     0xfe                                                                                            
00130c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00130e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001304   e006     BZ        0x1312         		)                                                                              O:\user\user.c
001310   e106     BNZ       0x131e                                                                                          
                                           		{                                                                              O:\user\user.c
001312   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT);                     O:\user\user.c
001314   6a1d     CLRF      0x1d,0x0       			return (0);                                                                   O:\user\user.c
001316   6a1e     CLRF      0x1e,0x0                                                                                        
001318   6a1f     CLRF      0x1f,0x0                                                                                        
00131a   d13b     BRA       0x1592                                                                                          
                                           		}                                                                              O:\user\user.c
00131c   d00d     BRA       0x1338         		else                                                                           O:\user\user.c
                                           		{                                                                              O:\user\user.c
00131e   0e01     MOVLW     0x1            			neg = TRUE;                                                                   O:\user\user.c
001320   6ef3     MOVWF     0xf3,0x0                                                                                        
001322   0e03     MOVLW     0x3                                                                                             
001324   cff3     MOVFF     0xff3,0xfdb                                                                                     
001326   ffdb                                                                                                               
                                           			// Move to the next character                                                 O:\user\user.c
001328   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        O:\user\user.c
00132a   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00132c   0e40     MOVLW     0x40                                                                                            
00132e   0101     MOVLB     0x1                                                                                             
001330   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001332   e102     BNZ       0x1338                                                                                          
001334   0101     MOVLB     0x1                                                                                             
001336   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// If we need to get a digit, go do that                                        O:\user\user.c
                                           	if (                                                                            O:\user\user.c
001338   0e04     MOVLW     0x4            		(kASCII_CHAR != type)                                                          O:\user\user.c
00133a   6e2a     MOVWF     0x2a,0x0                                                                                        
00133c   0efe     MOVLW     0xfe                                                                                            
00133e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001340   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             O:\user\user.c
001344   0e05     MOVLW     0x5            		(kUCASE_ASCII_CHAR != type)                                                    O:\user\user.c
001346   6e2b     MOVWF     0x2b,0x0                                                                                        
001348   0efe     MOVLW     0xfe                                                                                            
00134a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00134c   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
001342   e011     BZ        0x1366         	)                                                                               O:\user\user.c
00134e   e00b     BZ        0x1366                                                                                          
                                           	{                                                                               O:\user\user.c
001350   0e05     MOVLW     0x5            		extract_digit(&acc, 5);                                                        O:\user\user.c
001352   6ee6     MOVWF     0xe6,0x0                                                                                        
001354   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
001356   ffe6                                                                                                               
001358   cfda     MOVFF     0xfda,0xfe6                                                                                     
00135a   ffe6                                                                                                               
00135c   d924     RCALL     0x15a6                                                                                          
00135e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001360   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001362   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               O:\user\user.c
001364   d03a     BRA       0x13da         	else                                                                            O:\user\user.c
                                           	{                                                                               O:\user\user.c
                                           		// Otherwise just copy the byte                                                O:\user\user.c
001366   0101     MOVLB     0x1            		acc = g_RX_buf[g_RX_buf_out];                                                  O:\user\user.c
001368   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00136a   6aea     CLRF      0xea,0x0                                                                                        
00136c   0f40     ADDLW     0x40                                                                                            
00136e   6ee9     MOVWF     0xe9,0x0                                                                                        
001370   0e02     MOVLW     0x2                                                                                             
001372   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001374   cfef     MOVFF     0xfef,0x2a                                                                                      
001376   f02a                                                                                                               
001378   6a2b     CLRF      0x2b,0x0                                                                                        
00137a   6a2c     CLRF      0x2c,0x0                                                                                        
00137c   c02a     MOVFF     0x2a,0xfdf                                                                                      
00137e   ffdf                                                                                                               
001380   0e01     MOVLW     0x1                                                                                             
001382   c02b     MOVFF     0x2b,0xfdb                                                                                      
001384   ffdb                                                                                                               
001386   0e02     MOVLW     0x2                                                                                             
001388   c02c     MOVFF     0x2c,0xfdb                                                                                      
00138a   ffdb                                                                                                               
                                           	                                                                                O:\user\user.c
                                           		// Force uppercase if that's what type we have                                 O:\user\user.c
00138c   0e05     MOVLW     0x5            		if (kUCASE_ASCII_CHAR == type)                                                 O:\user\user.c
00138e   6e2a     MOVWF     0x2a,0x0                                                                                        
001390   0efe     MOVLW     0xfe                                                                                            
001392   50db     MOVF      0xdb,0x0,0x0                                                                                    
001394   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001396   e119     BNZ       0x13ca                                                                                          
                                           		{                                                                              O:\user\user.c
001398   0e00     MOVLW     0x0            			acc = toupper (acc);                                                          O:\user\user.c
00139a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00139c   ffe6                                                                                                               
00139e   0e01     MOVLW     0x1                                                                                             
0013a0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013a2   ffe6                                                                                                               
0013a4   ec8a     CALL      0x3514,0x0                                                                                      
0013a6   f01a                                                                                                               
0013a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013ac   cff3     MOVFF     0xff3,0x2a                                                                                      
0013ae   f02a                                                                                                               
0013b0   cff4     MOVFF     0xff4,0x2b                                                                                      
0013b2   f02b                                                                                                               
0013b4   6a2c     CLRF      0x2c,0x0                                                                                        
0013b6   be2b     BTFSC     0x2b,0x7,0x0                                                                                    
0013b8   682c     SETF      0x2c,0x0                                                                                        
0013ba   c02a     MOVFF     0x2a,0xfdf                                                                                      
0013bc   ffdf                                                                                                               
0013be   0e01     MOVLW     0x1                                                                                             
0013c0   c02b     MOVFF     0x2b,0xfdb                                                                                      
0013c2   ffdb                                                                                                               
0013c4   0e02     MOVLW     0x2                                                                                             
0013c6   c02c     MOVFF     0x2c,0xfdb                                                                                      
0013c8   ffdb                                                                                                               
                                           		}                                                                              O:\user\user.c
                                           		                                                                               O:\user\user.c
                                           		// Move to the next character                                                  O:\user\user.c
0013ca   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         O:\user\user.c
0013cc   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0013ce   0e40     MOVLW     0x40                                                                                            
0013d0   0101     MOVLB     0x1                                                                                             
0013d2   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0013d4   e102     BNZ       0x13da                                                                                          
0013d6   0101     MOVLB     0x1                                                                                             
0013d8   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Handle the negative sign                                                     O:\user\user.c
0013da   0e03     MOVLW     0x3            	if (neg)                                                                        O:\user\user.c
0013dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0013de   e021     BZ        0x1422                                                                                          
                                           	{                                                                               O:\user\user.c
0013e0   cfdf     MOVFF     0xfdf,0x2a     		acc = -acc;                                                                    O:\user\user.c
0013e2   f02a                                                                                                               
0013e4   0e01     MOVLW     0x1                                                                                             
0013e6   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0013e8   f02b                                                                                                               
0013ea   0e02     MOVLW     0x2                                                                                             
0013ec   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0013ee   f02c                                                                                                               
0013f0   6822     SETF      0x22,0x0                                                                                        
0013f2   6823     SETF      0x23,0x0                                                                                        
0013f4   6824     SETF      0x24,0x0                                                                                        
0013f6   c02a     MOVFF     0x2a,0x1d                                                                                       
0013f8   f01d                                                                                                               
0013fa   c02b     MOVFF     0x2b,0x1e                                                                                       
0013fc   f01e                                                                                                               
0013fe   c02c     MOVFF     0x2c,0x1f                                                                                       
001400   f01f                                                                                                               
001402   ec65     CALL      0x30ca,0x0                                                                                      
001404   f018                                                                                                               
001406   c01a     MOVFF     0x1a,0x2a                                                                                       
001408   f02a                                                                                                               
00140a   c01b     MOVFF     0x1b,0x2b                                                                                       
00140c   f02b                                                                                                               
00140e   c01c     MOVFF     0x1c,0x2c                                                                                       
001410   f02c                                                                                                               
001412   c02a     MOVFF     0x2a,0xfdf                                                                                      
001414   ffdf                                                                                                               
001416   0e01     MOVLW     0x1                                                                                             
001418   c02b     MOVFF     0x2b,0xfdb                                                                                      
00141a   ffdb                                                                                                               
00141c   0e02     MOVLW     0x2                                                                                             
00141e   c02c     MOVFF     0x2c,0xfdb                                                                                      
001420   ffdb                                                                                                               
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
                                           	// Range check the new value                                                    O:\user\user.c
                                           	if (                                                                            O:\user\user.c
                                           		(                                                                              O:\user\user.c
001422   0efe     MOVLW     0xfe           			kCHAR == type                                                                 O:\user\user.c
001424   50db     MOVF      0xdb,0x0,0x0                                                                                    
                                           			&&                                                                            O:\user\user.c
                                           			(                                                                             O:\user\user.c
001428   cfdf     MOVFF     0xfdf,0x2a     				(acc > 127)                                                                  O:\user\user.c
00142a   f02a                                                                                                               
00142c   0e01     MOVLW     0x1                                                                                             
00142e   cfdb     MOVFF     0xfdb,0x2b                                                                                      
001430   f02b                                                                                                               
001432   0e02     MOVLW     0x2                                                                                             
001434   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001436   f02c                                                                                                               
001438   342c     RLCF      0x2c,0x0,0x0                                                                                    
00143a   0e00     MOVLW     0x0                                                                                             
00143c   182c     XORWF     0x2c,0x0,0x0                                                                                    
00143e   e607     BN        0x144e                                                                                          
001440   80d8     BSF       0xd8,0x0,0x0                                                                                    
001442   0e7f     MOVLW     0x7f                                                                                            
001444   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
001446   0e00     MOVLW     0x0                                                                                             
001448   542b     SUBFWB    0x2b,0x0,0x0                                                                                    
00144a   0e00     MOVLW     0x0                                                                                             
00144c   542c     SUBFWB    0x2c,0x0,0x0                                                                                    
                                           				||                                                                           O:\user\user.c
001452   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -128)                                                                 O:\user\user.c
001454   ffe9                                                                                                               
001456   cfda     MOVFF     0xfda,0xfea                                                                                     
001458   ffea                                                                                                               
00145a   0e02     MOVLW     0x2                                                                                             
00145c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00145e   50eb     MOVF      0xeb,0x0,0x0                                                                                    
001460   0aff     XORLW     0xff                                                                                            
001462   e606     BN        0x1470                                                                                          
001464   0e80     MOVLW     0x80                                                                                            
001466   5cee     SUBWF     0xee,0x0,0x0                                                                                    
001468   0eff     MOVLW     0xff                                                                                            
00146a   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00146c   0eff     MOVLW     0xff                                                                                            
00146e   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
00144e   e201     BC        0x1452         			)                                                                             O:\user\user.c
001450   d08c     BRA       0x156a                                                                                          
001470   e201     BC        0x1474                                                                                          
001472   d07b     BRA       0x156a                                                                                          
001426   e126     BNZ       0x1474         		)                                                                              O:\user\user.c
                                           		||                                                                             O:\user\user.c
                                           		(                                                                              O:\user\user.c
                                           			kUCHAR == type                                                                O:\user\user.c
001474   0efe     MOVLW     0xfe           			&&                                                                            O:\user\user.c
001476   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			(                                                                             O:\user\user.c
00147a   cfdf     MOVFF     0xfdf,0x2d     				(acc > 255)                                                                  O:\user\user.c
00147c   f02d                                                                                                               
00147e   0e01     MOVLW     0x1                                                                                             
001480   cfdb     MOVFF     0xfdb,0x2e                                                                                      
001482   f02e                                                                                                               
001484   0e02     MOVLW     0x2                                                                                             
001486   cfdb     MOVFF     0xfdb,0x2f                                                                                      
001488   f02f                                                                                                               
00148a   342f     RLCF      0x2f,0x0,0x0                                                                                    
00148c   0e00     MOVLW     0x0                                                                                             
00148e   182f     XORWF     0x2f,0x0,0x0                                                                                    
001490   e607     BN        0x14a0                                                                                          
001492   80d8     BSF       0xd8,0x0,0x0                                                                                    
001494   0eff     MOVLW     0xff                                                                                            
001496   542d     SUBFWB    0x2d,0x0,0x0                                                                                    
001498   0e00     MOVLW     0x0                                                                                             
00149a   542e     SUBFWB    0x2e,0x0,0x0                                                                                    
00149c   0e00     MOVLW     0x0                                                                                             
00149e   542f     SUBFWB    0x2f,0x0,0x0                                                                                    
                                           				||                                                                           O:\user\user.c
0014a2   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    O:\user\user.c
0014a4   ffe9                                                                                                               
0014a6   cfda     MOVFF     0xfda,0xfea                                                                                     
0014a8   ffea                                                                                                               
0014aa   0e02     MOVLW     0x2                                                                                             
0014ac   90d8     BCF       0xd8,0x0,0x0                                                                                    
0014ae   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0014b0   0a00     XORLW     0x0                                                                                             
0014b2   e606     BN        0x14c0                                                                                          
0014b4   0e00     MOVLW     0x0                                                                                             
0014b6   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0014b8   0e00     MOVLW     0x0                                                                                             
0014ba   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0014bc   0e00     MOVLW     0x0                                                                                             
0014be   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0014a0   e364     BNC       0x156a         			)                                                                             O:\user\user.c
0014c0   e354     BNC       0x156a                                                                                          
001478   e124     BNZ       0x14c2         		)                                                                              O:\user\user.c
                                           		||                                                                             O:\user\user.c
                                           		(                                                                              O:\user\user.c
0014c2   0e02     MOVLW     0x2            			kINT == type                                                                  O:\user\user.c
0014c4   6e30     MOVWF     0x30,0x0                                                                                        
0014c6   0efe     MOVLW     0xfe                                                                                            
0014c8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014ca   5c30     SUBWF     0x30,0x0,0x0   			&&                                                                            O:\user\user.c
                                           			(                                                                             O:\user\user.c
0014ce   cfdf     MOVFF     0xfdf,0x31     				(acc > 32767)                                                                O:\user\user.c
0014d0   f031                                                                                                               
0014d2   0e01     MOVLW     0x1                                                                                             
0014d4   cfdb     MOVFF     0xfdb,0x32                                                                                      
0014d6   f032                                                                                                               
0014d8   0e02     MOVLW     0x2                                                                                             
0014da   cfdb     MOVFF     0xfdb,0x33                                                                                      
0014dc   f033                                                                                                               
0014de   3433     RLCF      0x33,0x0,0x0                                                                                    
0014e0   0e00     MOVLW     0x0                                                                                             
0014e2   1833     XORWF     0x33,0x0,0x0                                                                                    
0014e4   e607     BN        0x14f4                                                                                          
0014e6   80d8     BSF       0xd8,0x0,0x0                                                                                    
0014e8   0eff     MOVLW     0xff                                                                                            
0014ea   5431     SUBFWB    0x31,0x0,0x0                                                                                    
0014ec   0e7f     MOVLW     0x7f                                                                                            
0014ee   5432     SUBFWB    0x32,0x0,0x0                                                                                    
0014f0   0e00     MOVLW     0x0                                                                                             
0014f2   5433     SUBFWB    0x33,0x0,0x0                                                                                    
                                           				||                                                                           O:\user\user.c
0014f6   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -32768)                                                               O:\user\user.c
0014f8   ffe9                                                                                                               
0014fa   cfda     MOVFF     0xfda,0xfea                                                                                     
0014fc   ffea                                                                                                               
0014fe   0e02     MOVLW     0x2                                                                                             
001500   80d8     BSF       0xd8,0x0,0x0                                                                                    
001502   50eb     MOVF      0xeb,0x0,0x0                                                                                    
001504   0aff     XORLW     0xff                                                                                            
001506   e606     BN        0x1514                                                                                          
001508   0e00     MOVLW     0x0                                                                                             
00150a   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00150c   0e80     MOVLW     0x80                                                                                            
00150e   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001510   0eff     MOVLW     0xff                                                                                            
001512   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0014f4   e33a     BNC       0x156a         			)                                                                             O:\user\user.c
001514   e32a     BNC       0x156a                                                                                          
0014cc   e124     BNZ       0x1516         		)                                                                              O:\user\user.c
                                           		||                                                                             O:\user\user.c
                                           		(                                                                              O:\user\user.c
001516   0e03     MOVLW     0x3            			kUINT == type                                                                 O:\user\user.c
001518   6e34     MOVWF     0x34,0x0                                                                                        
00151a   0efe     MOVLW     0xfe                                                                                            
00151c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00151e   5c34     SUBWF     0x34,0x0,0x0   			&&                                                                            O:\user\user.c
                                           			(                                                                             O:\user\user.c
001522   cfdf     MOVFF     0xfdf,0x35     				(acc > 65535)                                                                O:\user\user.c
001524   f035                                                                                                               
001526   0e01     MOVLW     0x1                                                                                             
001528   cfdb     MOVFF     0xfdb,0x36                                                                                      
00152a   f036                                                                                                               
00152c   0e02     MOVLW     0x2                                                                                             
00152e   cfdb     MOVFF     0xfdb,0x37                                                                                      
001530   f037                                                                                                               
001532   3437     RLCF      0x37,0x0,0x0                                                                                    
001534   0e00     MOVLW     0x0                                                                                             
001536   1837     XORWF     0x37,0x0,0x0                                                                                    
001538   e607     BN        0x1548                                                                                          
00153a   80d8     BSF       0xd8,0x0,0x0                                                                                    
00153c   0eff     MOVLW     0xff                                                                                            
00153e   5435     SUBFWB    0x35,0x0,0x0                                                                                    
001540   0eff     MOVLW     0xff                                                                                            
001542   5436     SUBFWB    0x36,0x0,0x0                                                                                    
001544   0e00     MOVLW     0x0                                                                                             
001546   5437     SUBFWB    0x37,0x0,0x0                                                                                    
                                           				||                                                                           O:\user\user.c
00154a   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    O:\user\user.c
00154c   ffe9                                                                                                               
00154e   cfda     MOVFF     0xfda,0xfea                                                                                     
001550   ffea                                                                                                               
001552   0e02     MOVLW     0x2                                                                                             
001554   90d8     BCF       0xd8,0x0,0x0                                                                                    
001556   50eb     MOVF      0xeb,0x0,0x0                                                                                    
001558   0a00     XORLW     0x0                                                                                             
00155a   e606     BN        0x1568                                                                                          
00155c   0e00     MOVLW     0x0                                                                                             
00155e   5cee     SUBWF     0xee,0x0,0x0                                                                                    
001560   0e00     MOVLW     0x0                                                                                             
001562   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001564   0e00     MOVLW     0x0                                                                                             
001566   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
001548   e310     BNC       0x156a         			)                                                                             O:\user\user.c
001568   e205     BC        0x1574                                                                                          
001520   e129     BNZ       0x1574         		)                                                                              O:\user\user.c
                                           	)                                                                               O:\user\user.c
                                           	{                                                                               O:\user\user.c
00156a   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT);                      O:\user\user.c
00156c   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    O:\user\user.c
00156e   6a1e     CLRF      0x1e,0x0                                                                                        
001570   6a1f     CLRF      0x1f,0x0                                                                                        
001572   d00f     BRA       0x1592                                                                                          
                                           	}                                                                               O:\user\user.c
                                                                                                                            O:\user\user.c
001574   cfdf     MOVFF     0xfdf,0x2a     	return(acc);	                                                                   O:\user\user.c
001576   f02a                                                                                                               
001578   0e01     MOVLW     0x1                                                                                             
00157a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00157c   f02b                                                                                                               
00157e   0e02     MOVLW     0x2                                                                                             
001580   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001582   f02c                                                                                                               
001584   c02a     MOVFF     0x2a,0x1d                                                                                       
001586   f01d                                                                                                               
001588   c02b     MOVFF     0x2b,0x1e                                                                                       
00158a   f01e                                                                                                               
00158c   c02c     MOVFF     0x2c,0x1f                                                                                       
00158e   f01f                                                                                                               
001590   d000     BRA       0x1592                                                                                          
001592   0e04     MOVLW     0x4            }                                                                                O:\user\user.c
001594   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001596   e202     BC        0x159c                                                                                          
001598   6ae1     CLRF      0xe1,0x0                                                                                        
00159a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00159c   6ee1     MOVWF     0xe1,0x0                                                                                        
00159e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015a0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0015a2   ffd9                                                                                                               
0015a4   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           // Loop 'digits' number of times, looking at the                                 O:\user\user.c
                                           // byte in input_buffer index *ptr, and if it is                                 O:\user\user.c
                                           // a digit, adding it to acc. Take care of                                       O:\user\user.c
                                           // powers of ten as well. If you hit a non-numerical                             O:\user\user.c
                                           // char, then return FALSE, otherwise return TRUE.                               O:\user\user.c
                                           // Store result as you go in *acc.                                               O:\user\user.c
0015a6   cfd9     MOVFF     0xfd9,0xfe6    signed char extract_digit(signed short long * acc,	unsigned char digits)         O:\user\user.c
0015a8   ffe6                                                                                                               
0015aa   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0015ac   ffd9                                                                                                               
0015ae   0e02     MOVLW     0x2                                                                                             
0015b0   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                O:\user\user.c
                                           	unsigned char val;                                                              O:\user\user.c
                                           	unsigned char digit_cnt;                                                        O:\user\user.c
                                           	                                                                                O:\user\user.c
0015b2   0efd     MOVLW     0xfd           	*acc = 0;                                                                       O:\user\user.c
0015b4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0015b6   ffe9                                                                                                               
0015b8   0efe     MOVLW     0xfe                                                                                            
0015ba   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0015bc   ffea                                                                                                               
0015be   6aee     CLRF      0xee,0x0                                                                                        
0015c0   6aee     CLRF      0xee,0x0                                                                                        
0015c2   6aee     CLRF      0xee,0x0                                                                                        
                                                                                                                            O:\user\user.c
0015c4   0e01     MOVLW     0x1            	for (digit_cnt = 0; digit_cnt < digits; digit_cnt++)                            O:\user\user.c
0015c6   6adb     CLRF      0xdb,0x0                                                                                        
0015c8   0efc     MOVLW     0xfc                                                                                            
0015ca   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015cc   6ef3     MOVWF     0xf3,0x0                                                                                        
0015ce   0e01     MOVLW     0x1                                                                                             
0015d0   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0015d2   fff4                                                                                                               
0015d4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0015d6   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0015d8   e255     BC        0x1684                                                                                          
00167e   0e01     MOVLW     0x1                                                                                             
001680   2adb     INCF      0xdb,0x1,0x0                                                                                    
001682   d7a2     BRA       0x15c8                                                                                          
                                           	{                                                                               O:\user\user.c
0015da   0101     MOVLB     0x1            		val = g_RX_buf[g_RX_buf_out];                                                  O:\user\user.c
0015dc   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0015de   6aea     CLRF      0xea,0x0                                                                                        
0015e0   0f40     ADDLW     0x40                                                                                            
0015e2   6ee9     MOVWF     0xe9,0x0                                                                                        
0015e4   0e02     MOVLW     0x2                                                                                             
0015e6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0015e8   cfef     MOVFF     0xfef,0xfdf                                                                                     
0015ea   ffdf                                                                                                               
0015ec   0e30     MOVLW     0x30           		if ((val >= 48) && (val <= 57))                                                O:\user\user.c
0015ee   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0015f0   e344     BNC       0x167a                                                                                          
0015f2   50df     MOVF      0xdf,0x0,0x0                                                                                    
0015f4   0839     SUBLW     0x39                                                                                            
0015f6   e341     BNC       0x167a                                                                                          
                                           		{                                                                              O:\user\user.c
0015f8   0efd     MOVLW     0xfd           			*acc = (*acc * 10) + (val - 48);                                              O:\user\user.c
0015fa   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0015fc   ffe9                                                                                                               
0015fe   0efe     MOVLW     0xfe                                                                                            
001600   cfdb     MOVFF     0xfdb,0xfea                                                                                     
001602   ffea                                                                                                               
001604   cfee     MOVFF     0xfee,0x2d                                                                                      
001606   f02d                                                                                                               
001608   cfee     MOVFF     0xfee,0x2e                                                                                      
00160a   f02e                                                                                                               
00160c   cfef     MOVFF     0xfef,0x2f                                                                                      
00160e   f02f                                                                                                               
001610   0e0a     MOVLW     0xa                                                                                             
001612   6e22     MOVWF     0x22,0x0                                                                                        
001614   6a23     CLRF      0x23,0x0                                                                                        
001616   6a24     CLRF      0x24,0x0                                                                                        
001618   c02d     MOVFF     0x2d,0x1d                                                                                       
00161a   f01d                                                                                                               
00161c   c02e     MOVFF     0x2e,0x1e                                                                                       
00161e   f01e                                                                                                               
001620   c02f     MOVFF     0x2f,0x1f                                                                                       
001622   f01f                                                                                                               
001624   ec65     CALL      0x30ca,0x0                                                                                      
001626   f018                                                                                                               
001628   c01a     MOVFF     0x1a,0x2d                                                                                       
00162a   f02d                                                                                                               
00162c   c01b     MOVFF     0x1b,0x2e                                                                                       
00162e   f02e                                                                                                               
001630   c01c     MOVFF     0x1c,0x2f                                                                                       
001632   f02f                                                                                                               
001634   0e30     MOVLW     0x30                                                                                            
001636   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001638   6e30     MOVWF     0x30,0x0                                                                                        
00163a   6a31     CLRF      0x31,0x0                                                                                        
00163c   6a32     CLRF      0x32,0x0                                                                                        
00163e   502d     MOVF      0x2d,0x0,0x0                                                                                    
001640   2430     ADDWF     0x30,0x0,0x0                                                                                    
001642   6e2a     MOVWF     0x2a,0x0                                                                                        
001644   502e     MOVF      0x2e,0x0,0x0                                                                                    
001646   2031     ADDWFC    0x31,0x0,0x0                                                                                    
001648   6e2b     MOVWF     0x2b,0x0                                                                                        
00164a   502f     MOVF      0x2f,0x0,0x0                                                                                    
00164c   2032     ADDWFC    0x32,0x0,0x0                                                                                    
00164e   6e2c     MOVWF     0x2c,0x0                                                                                        
001650   0efd     MOVLW     0xfd                                                                                            
001652   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001654   ffe9                                                                                                               
001656   0efe     MOVLW     0xfe                                                                                            
001658   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00165a   ffea                                                                                                               
00165c   c02a     MOVFF     0x2a,0xfee                                                                                      
00165e   ffee                                                                                                               
001660   c02b     MOVFF     0x2b,0xfee                                                                                      
001662   ffee                                                                                                               
001664   c02c     MOVFF     0x2c,0xfee                                                                                      
001666   ffee                                                                                                               
                                           			// Move to the next character                                                 O:\user\user.c
001668   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        O:\user\user.c
00166a   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00166c   0e40     MOVLW     0x40                                                                                            
00166e   0101     MOVLB     0x1                                                                                             
001670   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001672   e102     BNZ       0x1678                                                                                          
001674   0101     MOVLB     0x1                                                                                             
001676   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              O:\user\user.c
001678   d002     BRA       0x167e         		else                                                                           O:\user\user.c
                                           		{                                                                              O:\user\user.c
00167a   0e00     MOVLW     0x0            			return (FALSE);                                                               O:\user\user.c
00167c   d005     BRA       0x1688                                                                                          
                                           		}                                                                              O:\user\user.c
                                           	}                                                                               O:\user\user.c
001684   0e01     MOVLW     0x1            	return (TRUE);                                                                  O:\user\user.c
001686   d000     BRA       0x1688                                                                                          
001688   6e2a     MOVWF     0x2a,0x0       }                                                                                O:\user\user.c
00168a   0e02     MOVLW     0x2                                                                                             
00168c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00168e   e202     BC        0x1694                                                                                          
001690   6ae1     CLRF      0xe1,0x0                                                                                        
001692   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001694   6ee1     MOVWF     0xe1,0x0                                                                                        
001696   502a     MOVF      0x2a,0x0,0x0                                                                                    
001698   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00169a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00169c   ffd9                                                                                                               
00169e   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\user\user.c
                                           // For debugging, this command will spit out a bunch of values.                  O:\user\user.c
                                           void print_status(void)                                                          O:\user\user.c
                                           {                                                                                O:\user\user.c
                                           	printf(                                                                         O:\user\user.c
                                           		(rom char*)"Status=%i\r\n"                                                     O:\user\user.c
0016a0   5006     MOVF      0x6,0x0,0x0    		,ISR_D_FIFO_length                                                             O:\user\user.c
0016a6   0e84     MOVLW     0x84                                                                                            
0016a8   6e2a     MOVWF     0x2a,0x0                                                                                        
0016aa   0e2f     MOVLW     0x2f                                                                                            
0016ac   6e2b     MOVWF     0x2b,0x0                                                                                        
0016ae   6a2c     CLRF      0x2c,0x0                                                                                        
0016b0   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016b2   ffe6                                                                                                               
0016b4   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016b6   ffe6                                                                                                               
0016b8   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016ba   ffe6                                                                                                               
0016a2   6ee6     MOVWF     0xe6,0x0       	);                                                                              O:\user\user.c
0016a4   6ae6     CLRF      0xe6,0x0                                                                                        
0016bc   ec91     CALL      0x3322,0x0                                                                                      
0016be   f019                                                                                                               
0016c0   6e2d     MOVWF     0x2d,0x0                                                                                        
0016c2   0e05     MOVLW     0x5                                                                                             
0016c4   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0016c6   502d     MOVF      0x2d,0x0,0x0                                                                                    
0016c8   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /******************************************************************************  O:\user\user.c
                                            * Function:        void BlinkUSBStatus(void)                                    O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * PreCondition:    None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Input:           None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Output:          None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Side Effects:    None                                                         O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Overview:        BlinkUSBStatus turns on and off LEDs corresponding to        O:\user\user.c
                                            *                  the USB device state.                                        O:\user\user.c
                                            *                                                                               O:\user\user.c
                                            * Note:            mLED macros can be found in io_cfg.h                         O:\user\user.c
                                            *                  usb_device_state is declared in usbmmap.c and is modified    O:\user\user.c
                                            *                  in usbdrv.c, usbctrltrf.c, and usb9.c                        O:\user\user.c
                                            *****************************************************************************/  O:\user\user.c
                                           void BlinkUSBStatus(void)                                                        O:\user\user.c
                                           {                                                                                O:\user\user.c
                                           	static word LEDCount = 0;                                                       O:\user\user.c
                                           	static unsigned char LEDState = 0;                                              O:\user\user.c
                                                                                                                            O:\user\user.c
                                               	if (                                                                        O:\user\user.c
0016ca   0101     MOVLB     0x1            		usb_device_state == DETACHED_STATE                                             O:\user\user.c
0016cc   51fa     MOVF      0xfa,0x0,0x1                                                                                    
                                                  	||                                                                       O:\user\user.c
0016d0   0e01     MOVLW     0x1                   	1 == UCONbits.SUSPND                                                     O:\user\user.c
0016d2   6e2a     MOVWF     0x2a,0x0                                                                                        
0016d4   506d     MOVF      0x6d,0x0,0x0                                                                                    
0016d6   0b02     ANDLW     0x2                                                                                             
0016d8   e001     BZ        0x16dc                                                                                          
0016da   0e01     MOVLW     0x1                                                                                             
0016ce   e008     BZ        0x16e0             	)                                                                           O:\user\user.c
0016dc   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0016de   e102     BNZ       0x16e4                                                                                          
                                               	{                                                                           O:\user\user.c
0016e0   908b     BCF       0x8b,0x0,0x0   		mLED_1_Off();                                                                  O:\user\user.c
                                               	}                                                                           O:\user\user.c
0016e2   d05d     BRA       0x179e             	else if (                                                                   O:\user\user.c
                                           		usb_device_state == ATTACHED_STATE                                             O:\user\user.c
0016e4   0101     MOVLB     0x1            		||                                                                             O:\user\user.c
0016e6   05fa     DECF      0xfa,0x0,0x1                                                                                    
0016ea   0e02     MOVLW     0x2            		usb_device_state == POWERED_STATE		                                            O:\user\user.c
0016e8   e00c     BZ        0x1702         		||                                                                             O:\user\user.c
0016ec   0101     MOVLB     0x1                                                                                             
0016ee   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
0016f0   e008     BZ        0x1702                                                                                          
0016f2   0e03     MOVLW     0x3            		usb_device_state == DEFAULT_STATE                                              O:\user\user.c
0016f4   0101     MOVLB     0x1            		||                                                                             O:\user\user.c
0016f6   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
0016f8   e004     BZ        0x1702                                                                                          
0016fa   0e05     MOVLW     0x5            		usb_device_state == ADDRESS_STATE                                              O:\user\user.c
0016fc   0101     MOVLB     0x1            	)                                                                               O:\user\user.c
0016fe   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
001700   e102     BNZ       0x1706                                                                                          
                                           	{                                                                               O:\user\user.c
001702   808b     BSF       0x8b,0x0,0x0   		mLED_1_On();                                                                   O:\user\user.c
                                               	}                                                                           O:\user\user.c
001704   d04c     BRA       0x179e         	else if (usb_device_state == CONFIGURED_STATE)                                  O:\user\user.c
001706   0e06     MOVLW     0x6                                                                                             
001708   0101     MOVLB     0x1                                                                                             
00170a   5dfa     SUBWF     0xfa,0x0,0x1                                                                                    
00170c   e148     BNZ       0x179e                                                                                          
                                               	{                                                                           O:\user\user.c
00170e   0100     MOVLB     0x0            		LEDCount--;                                                                    O:\user\user.c
001710   0767     DECF      0x67,0x1,0x1                                                                                    
001712   0e00     MOVLW     0x0                                                                                             
001714   5b68     SUBWFB    0x68,0x1,0x1                                                                                    
001716   0100     MOVLB     0x0            		if (0 == LEDState)                                                             O:\user\user.c
001718   5169     MOVF      0x69,0x0,0x1                                                                                    
00171a   e10e     BNZ       0x1738                                                                                          
                                           		{                                                                              O:\user\user.c
00171c   0100     MOVLB     0x0            			if (0 == LEDCount)                                                            O:\user\user.c
00171e   5167     MOVF      0x67,0x0,0x1                                                                                    
001720   1168     IORWF     0x68,0x0,0x1                                                                                    
001722   e109     BNZ       0x1736                                                                                          
                                           			{                                                                             O:\user\user.c
001724   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 O:\user\user.c
001726   0100     MOVLB     0x0            				LEDCount = 10000U;				                                                       O:\user\user.c
001728   0e10     MOVLW     0x10                                                                                            
00172a   6f67     MOVWF     0x67,0x1                                                                                        
00172c   0e27     MOVLW     0x27                                                                                            
00172e   6f68     MOVWF     0x68,0x1                                                                                        
001730   0100     MOVLB     0x0            				LEDState = 1;                                                                O:\user\user.c
001732   0e01     MOVLW     0x1                                                                                             
001734   6f69     MOVWF     0x69,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
001736   d033     BRA       0x179e         		else if (1 == LEDState)                                                        O:\user\user.c
001738   0100     MOVLB     0x0                                                                                             
00173a   0569     DECF      0x69,0x0,0x1                                                                                    
00173c   e10e     BNZ       0x175a                                                                                          
                                           		{                                                                              O:\user\user.c
00173e   0100     MOVLB     0x0            			if (0 == LEDCount)                                                            O:\user\user.c
001740   5167     MOVF      0x67,0x0,0x1                                                                                    
001742   1168     IORWF     0x68,0x0,0x1                                                                                    
001744   e109     BNZ       0x1758                                                                                          
                                           			{                                                                             O:\user\user.c
001746   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                O:\user\user.c
001748   0100     MOVLB     0x0            				LEDCount = 10000U;				                                                       O:\user\user.c
00174a   0e10     MOVLW     0x10                                                                                            
00174c   6f67     MOVWF     0x67,0x1                                                                                        
00174e   0e27     MOVLW     0x27                                                                                            
001750   6f68     MOVWF     0x68,0x1                                                                                        
001752   0100     MOVLB     0x0            				LEDState = 2;                                                                O:\user\user.c
001754   0e02     MOVLW     0x2                                                                                             
001756   6f69     MOVWF     0x69,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
001758   d022     BRA       0x179e         		else if (2 == LEDState)                                                        O:\user\user.c
00175a   0e02     MOVLW     0x2                                                                                             
00175c   0100     MOVLB     0x0                                                                                             
00175e   5d69     SUBWF     0x69,0x0,0x1                                                                                    
001760   e10e     BNZ       0x177e                                                                                          
                                           		{                                                                              O:\user\user.c
001762   0100     MOVLB     0x0            			if (0 == LEDCount)                                                            O:\user\user.c
001764   5167     MOVF      0x67,0x0,0x1                                                                                    
001766   1168     IORWF     0x68,0x0,0x1                                                                                    
001768   e109     BNZ       0x177c                                                                                          
                                           			{                                                                             O:\user\user.c
00176a   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 O:\user\user.c
00176c   0100     MOVLB     0x0            				LEDCount = 100000U;				                                                      O:\user\user.c
00176e   0ea0     MOVLW     0xa0                                                                                            
001770   6f67     MOVWF     0x67,0x1                                                                                        
001772   0e86     MOVLW     0x86                                                                                            
001774   6f68     MOVWF     0x68,0x1                                                                                        
001776   0100     MOVLB     0x0            				LEDState = 3;                                                                O:\user\user.c
001778   0e03     MOVLW     0x3                                                                                             
00177a   6f69     MOVWF     0x69,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
00177c   d010     BRA       0x179e         		else if (LEDState >= 3)                                                        O:\user\user.c
00177e   0e03     MOVLW     0x3                                                                                             
001780   0100     MOVLB     0x0                                                                                             
001782   5d69     SUBWF     0x69,0x0,0x1                                                                                    
001784   e30c     BNC       0x179e                                                                                          
                                           		{                                                                              O:\user\user.c
001786   0100     MOVLB     0x0            			if (0 == LEDCount)                                                            O:\user\user.c
001788   5167     MOVF      0x67,0x0,0x1                                                                                    
00178a   1168     IORWF     0x68,0x0,0x1                                                                                    
00178c   e108     BNZ       0x179e                                                                                          
                                           			{                                                                             O:\user\user.c
00178e   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                O:\user\user.c
001790   0100     MOVLB     0x0            				LEDCount = 10000U;				                                                       O:\user\user.c
001792   0e10     MOVLW     0x10                                                                                            
001794   6f67     MOVWF     0x67,0x1                                                                                        
001796   0e27     MOVLW     0x27                                                                                            
001798   6f68     MOVWF     0x68,0x1                                                                                        
00179a   0100     MOVLB     0x0            				LEDState = 0;                                                                O:\user\user.c
00179c   6b69     CLRF      0x69,0x1                                                                                        
                                           			}                                                                             O:\user\user.c
                                           		}                                                                              O:\user\user.c
                                               	}                                                                           O:\user\user.c
00179e   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           BOOL SwitchIsPressed(void)                                                       O:\user\user.c
                                           {                                                                                O:\user\user.c
0017a0   b482     BTFSC     0x82,0x2,0x0   	if( 0 == UserSW)                   	// If pressed                               O:\user\user.c
0017a2   d003     BRA       0x17aa                                                                                          
                                           	{                                                                               O:\user\user.c
0017a4   0e01     MOVLW     0x1            	    return (TRUE);                	// Was pressed                               O:\user\user.c
0017a6   d003     BRA       0x17ae                                                                                          
                                           	}                                                                               O:\user\user.c
0017a8   d002     BRA       0x17ae         	else                                                                            O:\user\user.c
                                           	{                                                                               O:\user\user.c
0017aa   0e00     MOVLW     0x0            		return (FALSE);			// Was not pressed                                           O:\user\user.c
0017ac   d000     BRA       0x17ae                                                                                          
                                           	}                                                                               O:\user\user.c
0017ae   0012     RETURN    0x0            }                                                                                O:\user\user.c
                                                                                                                            O:\user\user.c
                                           /** EOF user.c ***************************************************************/  O:\user\user.c
                                           /*********************************************************************           O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            *             Microchip USB C18 Firmware -  CDC Version 1.0                     O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            *********************************************************************           O:\system\usb\class\cdc\cdc.c
                                            * FileName:        cdc.c                                                        O:\system\usb\class\cdc\cdc.c
                                            * Dependencies:    See INCLUDES section below                                   O:\system\usb\class\cdc\cdc.c
                                            * Processor:       PIC18                                                        O:\system\usb\class\cdc\cdc.c
                                            * Compiler:        C18 2.30.01+                                                 O:\system\usb\class\cdc\cdc.c
                                            * Company:         Microchip Technology, Inc.                                   O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Software License Agreement                                                    O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           O:\system\usb\class\cdc\cdc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             O:\system\usb\class\cdc\cdc.c
                                            * supplied to you, the Company’s customer, for use solely and                   O:\system\usb\class\cdc\cdc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               O:\system\usb\class\cdc\cdc.c
                                            * software is owned by the Company and/or its supplier, and is                  O:\system\usb\class\cdc\cdc.c
                                            * protected under applicable copyright laws. All rights are reserved.           O:\system\usb\class\cdc\cdc.c
                                            * Any use in violation of the foregoing restrictions may subject the            O:\system\usb\class\cdc\cdc.c
                                            * user to criminal sanctions under applicable laws, as well as to               O:\system\usb\class\cdc\cdc.c
                                            * civil liability for the breach of the terms and conditions of this            O:\system\usb\class\cdc\cdc.c
                                            * license.                                                                      O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             O:\system\usb\class\cdc\cdc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             O:\system\usb\class\cdc\cdc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   O:\system\usb\class\cdc\cdc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             O:\system\usb\class\cdc\cdc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    O:\system\usb\class\cdc\cdc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Author               Date        Comment                                      O:\system\usb\class\cdc\cdc.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           O:\system\usb\class\cdc\cdc.c
                                            * Rawin Rojvanit       11/19/04    Original. RS-232 Emulation Subset            O:\system\usb\class\cdc\cdc.c
                                            ********************************************************************/           O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** I N C L U D E S **********************************************************/  O:\system\usb\class\cdc\cdc.c
                                           #include <p18cxxx.h>                                                             O:\system\usb\class\cdc\cdc.c
                                           #include "system\typedefs.h"                                                     O:\system\usb\class\cdc\cdc.c
                                           #include "system\usb\usb.h"                                                      O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           #ifdef USB_USE_CDC                                                               O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** V A R I A B L E S ********************************************************/  O:\system\usb\class\cdc\cdc.c
                                           #pragma udata                                                                    O:\system\usb\class\cdc\cdc.c
                                           byte cdc_rx_len;            // total rx length                                   O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           byte cdc_trf_state;         // States are defined cdc.h                          O:\system\usb\class\cdc\cdc.c
                                           POINTER pCDCSrc;            // Dedicated source pointer                          O:\system\usb\class\cdc\cdc.c
                                           POINTER pCDCDst;            // Dedicated destination pointer                     O:\system\usb\class\cdc\cdc.c
                                           byte cdc_tx_len;            // total tx length                                   O:\system\usb\class\cdc\cdc.c
                                           byte cdc_mem_type;          // _ROM, _RAM                                        O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           LINE_CODING line_coding;    // Buffer to store line coding information           O:\system\usb\class\cdc\cdc.c
                                           CONTROL_SIGNAL_BITMAP control_signal_bitmap;                                     O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /*                                                                               O:\system\usb\class\cdc\cdc.c
                                            * SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE are required          O:\system\usb\class\cdc\cdc.c
                                            * requests according to the CDC specification.                                  O:\system\usb\class\cdc\cdc.c
                                            * However, it is not really being used here, therefore a dummy buffer is        O:\system\usb\class\cdc\cdc.c
                                            * used for conformance.                                                         O:\system\usb\class\cdc\cdc.c
                                            */                                                                              O:\system\usb\class\cdc\cdc.c
                                           #define dummy_length    0x08                                                     O:\system\usb\class\cdc\cdc.c
                                           byte dummy_encapsulated_cmd_response[dummy_length];                              O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** D E C L A R A T I O N S **************************************************/  O:\system\usb\class\cdc\cdc.c
                                           #pragma code                                                                     O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** C L A S S  S P E C I F I C  R E Q ****************************************/  O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        void USBCheckCDCRequest(void)                                O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        This routine checks the setup data packet to see if it       O:\system\usb\class\cdc\cdc.c
                                            *                  knows how to handle it                                       O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
                                           void USBCheckCDCRequest(void)                                                    O:\system\usb\class\cdc\cdc.c
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * If request recipient is not an interface then return                      O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0023d2   0104     MOVLB     0x4                if(SetupPkt.Recipient != RCPT_INTF) return;                                  O:\system\usb\class\cdc\cdc.c
0023d4   5120     MOVF      0x20,0x0,0x1                                                                                    
0023d6   0b1f     ANDLW     0x1f                                                                                            
0023d8   0801     SUBLW     0x1                                                                                             
0023da   e001     BZ        0x23de                                                                                          
0023dc   d060     BRA       0x249e                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * If request type is not class-specific then return                         O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0023de   0104     MOVLB     0x4                if(SetupPkt.RequestType != CLASS) return;                                    O:\system\usb\class\cdc\cdc.c
0023e0   5120     MOVF      0x20,0x0,0x1                                                                                    
0023e2   0b60     ANDLW     0x60                                                                                            
0023e4   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0023e6   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0023e8   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0023ea   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0023ec   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0023ee   0801     SUBLW     0x1                                                                                             
0023f0   e001     BZ        0x23f4                                                                                          
0023f2   d055     BRA       0x249e                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Interface ID must match interface numbers associated with                 O:\system\usb\class\cdc\cdc.c
                                                * CDC class, else return                                                    O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0023f4   0104     MOVLB     0x4                if((SetupPkt.bIntfID != CDC_COMM_INTF_ID)&&                                  O:\system\usb\class\cdc\cdc.c
0023f6   5124     MOVF      0x24,0x0,0x1                                                                                    
0023f8   e004     BZ        0x2402                (SetupPkt.bIntfID != CDC_DATA_INTF_ID)) return;                           O:\system\usb\class\cdc\cdc.c
0023fa   0104     MOVLB     0x4                                                                                             
0023fc   0524     DECF      0x24,0x0,0x1                                                                                    
0023fe   e001     BZ        0x2402                                                                                          
002400   d04e     BRA       0x249e                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
002402   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    O:\system\usb\class\cdc\cdc.c
002404   5121     MOVF      0x21,0x0,0x1                                                                                    
002406   0a23     XORLW     0x23                                                                                            
002408   e048     BZ        0x249a                                                                                          
00240a   0a01     XORLW     0x1                                                                                             
00240c   e040     BZ        0x248e                                                                                          
00240e   0a03     XORLW     0x3                                                                                             
002410   e030     BZ        0x2472                                                                                          
002412   0a01     XORLW     0x1                                                                                             
002414   e025     BZ        0x2460                                                                                          
002416   0a24     XORLW     0x24                                                                                            
002418   e022     BZ        0x245e                                                                                          
00241a   0a07     XORLW     0x7                                                                                             
00241c   e01f     BZ        0x245c                                                                                          
00241e   0a01     XORLW     0x1                                                                                             
002420   e01c     BZ        0x245a                                                                                          
002422   0a03     XORLW     0x3                                                                                             
002424   e011     BZ        0x2448                                                                                          
002426   0a01     XORLW     0x1                                                                                             
002428   e001     BZ        0x242c                                                                                          
00242a   d038     BRA       0x249c                                                                                          
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
                                                   case SEND_ENCAPSULATED_COMMAND:                                          O:\system\usb\class\cdc\cdc.c
00242c   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_CDC;                                   O:\system\usb\class\cdc\cdc.c
00242e   0e03     MOVLW     0x3                                                                                             
002430   6f6b     MOVWF     0x6b,0x1                                                                                        
002432   0100     MOVLB     0x0                        pSrc.bRam = (byte*)&dummy_encapsulated_cmd_response;                 O:\system\usb\class\cdc\cdc.c
002434   0ee8     MOVLW     0xe8                                                                                            
002436   6f6c     MOVWF     0x6c,0x1                                                                                        
002438   0e01     MOVLW     0x1                                                                                             
00243a   6f6d     MOVWF     0x6d,0x1                                                                                        
00243c   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;                                        O:\system\usb\class\cdc\cdc.c
00243e   93fb     BCF       0xfb,0x1,0x1                                                                                    
002440   0100     MOVLB     0x0                        LSB(wCount) = dummy_length;                                          O:\system\usb\class\cdc\cdc.c
002442   0e08     MOVLW     0x8                                                                                             
002444   6f70     MOVWF     0x70,0x1                                                                                        
002446   d02b     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case GET_ENCAPSULATED_RESPONSE:                                          O:\system\usb\class\cdc\cdc.c
002448   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_CDC;                                   O:\system\usb\class\cdc\cdc.c
00244a   0e03     MOVLW     0x3                                                                                             
00244c   6f6b     MOVWF     0x6b,0x1                                                                                        
                                                       // Populate dummy_encapsulated_cmd_response first.                   O:\system\usb\class\cdc\cdc.c
00244e   0100     MOVLB     0x0                        pDst.bRam = (byte*)&dummy_encapsulated_cmd_response;                 O:\system\usb\class\cdc\cdc.c
002450   0ee8     MOVLW     0xe8                                                                                            
002452   6f6e     MOVWF     0x6e,0x1                                                                                        
002454   0e01     MOVLW     0x1                                                                                             
002456   6f6f     MOVWF     0x6f,0x1                                                                                        
002458   d022     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case SET_COMM_FEATURE:                  // Optional                      O:\system\usb\class\cdc\cdc.c
00245a   d021     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case GET_COMM_FEATURE:                  // Optional                      O:\system\usb\class\cdc\cdc.c
00245c   d020     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case CLEAR_COMM_FEATURE:                // Optional                      O:\system\usb\class\cdc\cdc.c
00245e   d01f     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case SET_LINE_CODING:                                                    O:\system\usb\class\cdc\cdc.c
002460   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_CDC;                                   O:\system\usb\class\cdc\cdc.c
002462   0e03     MOVLW     0x3                                                                                             
002464   6f6b     MOVWF     0x6b,0x1                                                                                        
002466   0100     MOVLB     0x0                        pDst.bRam = (byte*)&line_coding;    // Set destination               O:\system\usb\class\cdc\cdc.c
002468   0ee0     MOVLW     0xe0                                                                                            
00246a   6f6e     MOVWF     0x6e,0x1                                                                                        
00246c   0e01     MOVLW     0x1                                                                                             
00246e   6f6f     MOVWF     0x6f,0x1                                                                                        
002470   d016     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case GET_LINE_CODING:                                                    O:\system\usb\class\cdc\cdc.c
002472   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_CDC;                                   O:\system\usb\class\cdc\cdc.c
002474   0e03     MOVLW     0x3                                                                                             
002476   6f6b     MOVWF     0x6b,0x1                                                                                        
002478   0100     MOVLB     0x0                        pSrc.bRam = (byte*)&line_coding;    // Set source                    O:\system\usb\class\cdc\cdc.c
00247a   0ee0     MOVLW     0xe0                                                                                            
00247c   6f6c     MOVWF     0x6c,0x1                                                                                        
00247e   0e01     MOVLW     0x1                                                                                             
002480   6f6d     MOVWF     0x6d,0x1                                                                                        
002482   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;       // Set memory type               O:\system\usb\class\cdc\cdc.c
002484   93fb     BCF       0xfb,0x1,0x1                                                                                    
002486   0100     MOVLB     0x0                        LSB(wCount) = LINE_CODING_LENGTH;   // Set data count                O:\system\usb\class\cdc\cdc.c
002488   0e07     MOVLW     0x7                                                                                             
00248a   6f70     MOVWF     0x70,0x1                                                                                        
00248c   d008     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case SET_CONTROL_LINE_STATE:                                             O:\system\usb\class\cdc\cdc.c
00248e   0100     MOVLB     0x0                        ctrl_trf_session_owner = MUID_CDC;                                   O:\system\usb\class\cdc\cdc.c
002490   0e03     MOVLW     0x3                                                                                             
002492   6f6b     MOVWF     0x6b,0x1                                                                                        
002494   c422     MOVFF     0x422,0x1e7                control_signal_bitmap._byte = LSB(SetupPkt.W_Value);                 O:\system\usb\class\cdc\cdc.c
002496   f1e7                                                                                                               
002498   d002     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   case SEND_BREAK:                        // Optional                      O:\system\usb\class\cdc\cdc.c
00249a   d001     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                                   default:                                                                 O:\system\usb\class\cdc\cdc.c
00249c   d000     BRA       0x249e                     break;                                                               O:\system\usb\class\cdc\cdc.c
                                               }//end switch(SetupPkt.bRequest)                                             O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
00249e   0012     RETURN    0x0            }//end USBCheckCDCRequest                                                        O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** U S E R  A P I ***********************************************************/  O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCInitEP(void)                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCInitEP initializes CDC endpoints, buffer descriptors,     O:\system\usb\class\cdc\cdc.c
                                            *                  internal state-machine, and variables.                       O:\system\usb\class\cdc\cdc.c
                                            *                  It should be called after the USB host has sent out a        O:\system\usb\class\cdc\cdc.c
                                            *                  SET_CONFIGURATION request.                                   O:\system\usb\class\cdc\cdc.c
                                            *                  See USBStdSetCfgHandler() in usb9.c for examples.            O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
                                           void CDCInitEP(void)                                                             O:\system\usb\class\cdc\cdc.c
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
                                               //Abstract line coding information                                           O:\system\usb\class\cdc\cdc.c
0024a0   0101     MOVLB     0x1                line_coding.dwDTERate._dword = 115200;      // baud rate                     O:\system\usb\class\cdc\cdc.c
0024a2   6be0     CLRF      0xe0,0x1                                                                                        
0024a4   0ec2     MOVLW     0xc2                                                                                            
0024a6   6fe1     MOVWF     0xe1,0x1                                                                                        
0024a8   0e01     MOVLW     0x1                                                                                             
0024aa   6fe2     MOVWF     0xe2,0x1                                                                                        
0024ac   6be3     CLRF      0xe3,0x1                                                                                        
0024ae   0101     MOVLB     0x1                line_coding.bCharFormat = 0x00;             // 1 stop bit                    O:\system\usb\class\cdc\cdc.c
0024b0   6be4     CLRF      0xe4,0x1                                                                                        
0024b2   0101     MOVLB     0x1                line_coding.bParityType = 0x00;             // None                          O:\system\usb\class\cdc\cdc.c
0024b4   6be5     CLRF      0xe5,0x1                                                                                        
0024b6   0101     MOVLB     0x1                line_coding.bDataBits = 0x08;               // 5,6,7,8, or 16                O:\system\usb\class\cdc\cdc.c
0024b8   0e08     MOVLW     0x8                                                                                             
0024ba   6fe6     MOVWF     0xe6,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0024bc   0101     MOVLB     0x1                cdc_trf_state = CDC_TX_READY;                                                O:\system\usb\class\cdc\cdc.c
0024be   6bd9     CLRF      0xd9,0x1                                                                                        
0024c0   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              O:\system\usb\class\cdc\cdc.c
0024c2   6bd8     CLRF      0xd8,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0024c4   0e1a     MOVLW     0x1a               CDC_COMM_UEP = EP_IN|HSHK_EN;               // Enable 1 Comm pipe            O:\system\usb\class\cdc\cdc.c
0024c6   6e72     MOVWF     0x72,0x0                                                                                        
0024c8   0e1e     MOVLW     0x1e               CDC_DATA_UEP = EP_OUT_IN|HSHK_EN;           // Enable 2 data pipes           O:\system\usb\class\cdc\cdc.c
0024ca   6e73     MOVWF     0x73,0x0                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Do not have to init Cnt of IN pipes here.                                 O:\system\usb\class\cdc\cdc.c
                                                * Reason:  Number of bytes to send to the host                              O:\system\usb\class\cdc\cdc.c
                                                *          varies from one transaction to                                   O:\system\usb\class\cdc\cdc.c
                                                *          another. Cnt should equal the exact                              O:\system\usb\class\cdc\cdc.c
                                                *          number of bytes to transmit for                                  O:\system\usb\class\cdc\cdc.c
                                                *          a given IN transaction.                                          O:\system\usb\class\cdc\cdc.c
                                                *          This number of bytes will only                                   O:\system\usb\class\cdc\cdc.c
                                                *          be known right before the data is                                O:\system\usb\class\cdc\cdc.c
                                                *          sent.                                                            O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0024cc   0104     MOVLB     0x4                CDC_INT_BD_IN.ADR = (byte*)&cdc_notice;     // Set buffer address            O:\system\usb\class\cdc\cdc.c
0024ce   0e00     MOVLW     0x0                                                                                             
0024d0   6f16     MOVWF     0x16,0x1                                                                                        
0024d2   0e05     MOVLW     0x5                                                                                             
0024d4   6f17     MOVWF     0x17,0x1                                                                                        
0024d6   0104     MOVLB     0x4                CDC_INT_BD_IN.Stat._byte = _UCPU|_DAT1;     // Set status                    O:\system\usb\class\cdc\cdc.c
0024d8   0e40     MOVLW     0x40                                                                                            
0024da   6f14     MOVWF     0x14,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0024dc   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);  // Set buffer size               O:\system\usb\class\cdc\cdc.c
0024de   0e40     MOVLW     0x40                                                                                            
0024e0   6f19     MOVWF     0x19,0x1                                                                                        
0024e2   0104     MOVLB     0x4                CDC_BULK_BD_OUT.ADR = (byte*)&cdc_data_rx;  // Set buffer address            O:\system\usb\class\cdc\cdc.c
0024e4   0e08     MOVLW     0x8                                                                                             
0024e6   6f1a     MOVWF     0x1a,0x1                                                                                        
0024e8   0e05     MOVLW     0x5                                                                                             
0024ea   6f1b     MOVWF     0x1b,0x1                                                                                        
0024ec   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Stat._byte = _USIE|_DAT0|_DTSEN;// Set status                O:\system\usb\class\cdc\cdc.c
0024ee   0e88     MOVLW     0x88                                                                                            
0024f0   6f18     MOVWF     0x18,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0024f2   0104     MOVLB     0x4                CDC_BULK_BD_IN.ADR = (byte*)&cdc_data_tx;   // Set buffer size               O:\system\usb\class\cdc\cdc.c
0024f4   0e48     MOVLW     0x48                                                                                            
0024f6   6f1e     MOVWF     0x1e,0x1                                                                                        
0024f8   0e05     MOVLW     0x5                                                                                             
0024fa   6f1f     MOVWF     0x1f,0x1                                                                                        
0024fc   0104     MOVLB     0x4                CDC_BULK_BD_IN.Stat._byte = _UCPU|_DAT1;    // Set buffer address            O:\system\usb\class\cdc\cdc.c
0024fe   0e40     MOVLW     0x40                                                                                            
002500   6f1c     MOVWF     0x1c,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
002502   0012     RETURN    0x0            }//end CDCInitEP                                                                 O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        byte getsUSBUSART(char *buffer,                              O:\system\usb\class\cdc\cdc.c
                                            *                                    byte len)                                  O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    Value of input argument 'len' should be smaller than the     O:\system\usb\class\cdc\cdc.c
                                            *                  maximum endpoint size responsible for receiving bulk         O:\system\usb\class\cdc\cdc.c
                                            *                  data from USB host for CDC class.                            O:\system\usb\class\cdc\cdc.c
                                            *                  Input argument 'buffer' should point to a buffer area that   O:\system\usb\class\cdc\cdc.c
                                            *                  is bigger or equal to the size specified by 'len'.           O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           buffer  : Pointer to where received bytes are to be stored   O:\system\usb\class\cdc\cdc.c
                                            *                  len     : The number of bytes expected.                      O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          The number of bytes copied to buffer.                        O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    Publicly accessible variable cdc_rx_len is updated with      O:\system\usb\class\cdc\cdc.c
                                            *                  the number of bytes copied to buffer.                        O:\system\usb\class\cdc\cdc.c
                                            *                  Once getsUSBUSART is called, subsequent retrieval of         O:\system\usb\class\cdc\cdc.c
                                            *                  cdc_rx_len can be done by calling macro mCDCGetRxLength().   O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        getsUSBUSART copies a string of bytes received through       O:\system\usb\class\cdc\cdc.c
                                            *                  USB CDC Bulk OUT endpoint to a user's specified location.    O:\system\usb\class\cdc\cdc.c
                                            *                  It is a non-blocking function. It does not wait              O:\system\usb\class\cdc\cdc.c
                                            *                  for data if there is no data available. Instead it returns   O:\system\usb\class\cdc\cdc.c
                                            *                  '0' to notify the caller that there is no data available.    O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            If the actual number of bytes received is larger than the    O:\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the expected number     O:\system\usb\class\cdc\cdc.c
                                            *                  of bytes specified will be copied to buffer.                 O:\system\usb\class\cdc\cdc.c
                                            *                  If the actual number of bytes received is smaller than the   O:\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the actual number       O:\system\usb\class\cdc\cdc.c
                                            *                  of bytes received will be copied to buffer.                  O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
002504   cfd9     MOVFF     0xfd9,0xfe6    byte getsUSBUSART(unsigned char *buffer, byte len)                               O:\system\usb\class\cdc\cdc.c
002506   ffe6                                                                                                               
002508   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00250a   ffd9                                                                                                               
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
00250c   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              O:\system\usb\class\cdc\cdc.c
00250e   6bd8     CLRF      0xd8,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
002510   0104     MOVLB     0x4                if(!mCDCUsartRxIsBusy())                                                     O:\system\usb\class\cdc\cdc.c
002512   bf18     BTFSC     0x18,0x7,0x1                                                                                    
002514   d039     BRA       0x2588                                                                                          
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Adjust the expected number of bytes to equal                          O:\system\usb\class\cdc\cdc.c
                                                    * the actual number of bytes received.                                  O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
002516   0efc     MOVLW     0xfc                   if(len > CDC_BULK_BD_OUT.Cnt)                                            O:\system\usb\class\cdc\cdc.c
002518   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00251a   f02a                                                                                                               
00251c   0104     MOVLB     0x4                                                                                             
00251e   5119     MOVF      0x19,0x0,0x1                                                                                    
002520   80d8     BSF       0xd8,0x0,0x0                                                                                    
002522   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
002524   e203     BC        0x252c                                                                                          
002526   0efc     MOVLW     0xfc                       len = CDC_BULK_BD_OUT.Cnt;                                           O:\system\usb\class\cdc\cdc.c
002528   c419     MOVFF     0x419,0xfdb                                                                                     
00252a   ffdb                                                                                                               
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Copy data from dual-ram buffer to user's buffer                       O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
00252c   0101     MOVLB     0x1                    for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)                      O:\system\usb\class\cdc\cdc.c
00252e   6bd8     CLRF      0xd8,0x1                                                                                        
002530   0efc     MOVLW     0xfc                                                                                            
002532   50db     MOVF      0xdb,0x0,0x0                                                                                    
002534   0101     MOVLB     0x1                                                                                             
002536   5dd8     SUBWF     0xd8,0x0,0x1                                                                                    
002538   e21c     BC        0x2572                                                                                          
00256c   0101     MOVLB     0x1                                                                                             
00256e   2bd8     INCF      0xd8,0x1,0x1                                                                                    
002570   d7df     BRA       0x2530                                                                                          
00253a   0101     MOVLB     0x1                        buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];                        O:\system\usb\class\cdc\cdc.c
00253c   51d8     MOVF      0xd8,0x0,0x1                                                                                    
00253e   6aea     CLRF      0xea,0x0                                                                                        
002540   0f08     ADDLW     0x8                                                                                             
002542   6ee9     MOVWF     0xe9,0x0                                                                                        
002544   0e05     MOVLW     0x5                                                                                             
002546   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002548   50ef     MOVF      0xef,0x0,0x0                                                                                    
00254a   6ee6     MOVWF     0xe6,0x0                                                                                        
00254c   0101     MOVLB     0x1                                                                                             
00254e   51d8     MOVF      0xd8,0x0,0x1                                                                                    
002550   6ee7     MOVWF     0xe7,0x0                                                                                        
002552   0efd     MOVLW     0xfd                                                                                            
002554   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002556   ffe9                                                                                                               
002558   0efe     MOVLW     0xfe                                                                                            
00255a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00255c   ffea                                                                                                               
00255e   50e7     MOVF      0xe7,0x0,0x0                                                                                    
002560   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
002562   0e00     MOVLW     0x0                                                                                             
002564   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002566   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002568   50e7     MOVF      0xe7,0x0,0x0                                                                                    
00256a   6eef     MOVWF     0xef,0x0                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Prepare dual-ram buffer for next OUT transaction                      O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
002572   0104     MOVLB     0x4                    CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                               O:\system\usb\class\cdc\cdc.c
002574   0e40     MOVLW     0x40                                                                                            
002576   6f19     MOVWF     0x19,0x1                                                                                        
002578   0e40     MOVLW     0x40                   mUSBBufferReady(CDC_BULK_BD_OUT);                                        O:\system\usb\class\cdc\cdc.c
00257a   0104     MOVLB     0x4                                                                                             
00257c   1718     ANDWF     0x18,0x1,0x1                                                                                    
00257e   0104     MOVLB     0x4                                                                                             
002580   7d18     BTG       0x18,0x6,0x1                                                                                    
002582   0e88     MOVLW     0x88                                                                                            
002584   0104     MOVLB     0x4                                                                                             
002586   1318     IORWF     0x18,0x1,0x1                                                                                    
                                               }//end if                                                                    O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
002588   0101     MOVLB     0x1                return cdc_rx_len;                                                           O:\system\usb\class\cdc\cdc.c
00258a   51d8     MOVF      0xd8,0x0,0x1                                                                                    
00258c   d000     BRA       0x258e                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
00258e   52e5     MOVF      0xe5,0x1,0x0   }//end getsUSBUSART                                                              O:\system\usb\class\cdc\cdc.c
002590   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002592   ffd9                                                                                                               
002594   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        void putsUSBUSART(char *data)                                O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     O:\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       O:\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        O:\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        putsUSBUSART writes a string of data to the USB including    O:\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'puts', to transfer    O:\system\usb\class\cdc\cdc.c
                                            *                  data located in data memory.                                 O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       O:\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             O:\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     O:\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         O:\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               O:\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
002596   cfd9     MOVFF     0xfd9,0xfe6    void putsUSBUSART(unsigned char *data)                                           O:\system\usb\class\cdc\cdc.c
002598   ffe6                                                                                                               
00259a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00259c   ffd9                                                                                                               
00259e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      O:\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             O:\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       O:\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     O:\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()==1           O:\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 O:\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  O:\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               O:\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           O:\system\usb\class\cdc\cdc.c
                                                * while(!mUSBUSARTIsTxTrfReady())                                           O:\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              O:\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      O:\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0025a0   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    O:\system\usb\class\cdc\cdc.c
0025a2   51d9     MOVF      0xd9,0x0,0x1                                                                                    
0025a4   e001     BZ        0x25a8                                                                                          
0025a6   d031     BRA       0x260a                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               O:\system\usb\class\cdc\cdc.c
                                                * null character.                                                           O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0025a8   6adf     CLRF      0xdf,0x0           len = 0;                                                                     O:\system\usb\class\cdc\cdc.c
                                               do                                                                           O:\system\usb\class\cdc\cdc.c
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
0025aa   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   O:\system\usb\class\cdc\cdc.c
0025ac   50df     MOVF      0xdf,0x0,0x0           if(len == 256) break;       // Break loop once max len is reached.       O:\system\usb\class\cdc\cdc.c
0025ae   6e2a     MOVWF     0x2a,0x0                                                                                        
0025b0   6a2b     CLRF      0x2b,0x0                                                                                        
0025b2   502a     MOVF      0x2a,0x0,0x0                                                                                    
0025b4   e102     BNZ       0x25ba                                                                                          
0025b6   0e01     MOVLW     0x1                                                                                             
0025b8   182b     XORWF     0x2b,0x0,0x0                                                                                    
0025ba   e101     BNZ       0x25be                                                                                          
0025bc   d00b     BRA       0x25d4                                                                                          
0025be   0efd     MOVLW     0xfd               }while(*data++);                                                             O:\system\usb\class\cdc\cdc.c
0025c0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0025c2   ffe9                                                                                                               
0025c4   2adb     INCF      0xdb,0x1,0x0                                                                                    
0025c6   0efe     MOVLW     0xfe                                                                                            
0025c8   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0025ca   ffea                                                                                                               
0025cc   e301     BNC       0x25d0                                                                                          
0025ce   2adb     INCF      0xdb,0x1,0x0                                                                                    
0025d0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0025d2   e1eb     BNZ       0x25aa                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0025d4   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   O:\system\usb\class\cdc\cdc.c
0025d6   6e2a     MOVWF     0x2a,0x0                                                                                        
0025d8   6a2b     CLRF      0x2b,0x0                                                                                        
0025da   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0025dc   0ffd     ADDLW     0xfd                                                                                            
0025de   6ee9     MOVWF     0xe9,0x0                                                                                        
0025e0   0eff     MOVLW     0xff                                                                                            
0025e2   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0025e4   6eea     MOVWF     0xea,0x0                                                                                        
0025e6   502a     MOVF      0x2a,0x0,0x0                                                                                    
0025e8   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0025ea   502b     MOVF      0x2b,0x0,0x0                                                                                    
0025ec   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           O:\system\usb\class\cdc\cdc.c
0025ee   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            O:\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRam to setup the transfer.                                O:\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            O:\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0025f0   0efd     MOVLW     0xfd               mUSBUSARTTxRam((byte*)data,len);     // See cdc.h                            O:\system\usb\class\cdc\cdc.c
0025f2   cfdb     MOVFF     0xfdb,0x1da                                                                                     
0025f4   f1da                                                                                                               
0025f6   0efe     MOVLW     0xfe                                                                                            
0025f8   cfdb     MOVFF     0xfdb,0x1db                                                                                     
0025fa   f1db                                                                                                               
0025fc   cfdf     MOVFF     0xfdf,0x1de                                                                                     
0025fe   f1de                                                                                                               
002600   0101     MOVLB     0x1                                                                                             
002602   6bdf     CLRF      0xdf,0x1                                                                                        
002604   0101     MOVLB     0x1                                                                                             
002606   0e01     MOVLW     0x1                                                                                             
002608   6fd9     MOVWF     0xd9,0x1                                                                                        
00260a   52e5     MOVF      0xe5,0x1,0x0   }//end putsUSBUSART                                                              O:\system\usb\class\cdc\cdc.c
00260c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00260e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002610   ffd9                                                                                                               
002612   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        void putrsUSBUSART(const rom char *data)                     O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     O:\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       O:\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        O:\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        putrsUSBUSART writes a string of data to the USB including   O:\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'putrs', to transfer   O:\system\usb\class\cdc\cdc.c
                                            *                  data literals and data located in program memory.            O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       O:\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             O:\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     O:\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         O:\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               O:\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
002614   cfd9     MOVFF     0xfd9,0xfe6    void putrsUSBUSART(const rom unsigned char *data)                                O:\system\usb\class\cdc\cdc.c
002616   ffe6                                                                                                               
002618   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00261a   ffd9                                                                                                               
00261c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      O:\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             O:\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       O:\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     O:\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()              O:\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 O:\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  O:\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               O:\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           O:\system\usb\class\cdc\cdc.c
                                                * while(cdc_trf_state != CDC_TX_READY)                                      O:\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              O:\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      O:\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
00261e   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    O:\system\usb\class\cdc\cdc.c
002620   51d9     MOVF      0xd9,0x0,0x1                                                                                    
002622   e001     BZ        0x2626                                                                                          
002624   d033     BRA       0x268c                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               O:\system\usb\class\cdc\cdc.c
                                                * null character.                                                           O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
002626   6adf     CLRF      0xdf,0x0           len = 0;                                                                     O:\system\usb\class\cdc\cdc.c
                                               do                                                                           O:\system\usb\class\cdc\cdc.c
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
002628   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   O:\system\usb\class\cdc\cdc.c
00262a   50df     MOVF      0xdf,0x0,0x0           if(len == 255) break;       // Break loop once max len is reached.       O:\system\usb\class\cdc\cdc.c
00262c   6e2a     MOVWF     0x2a,0x0                                                                                        
00262e   6a2b     CLRF      0x2b,0x0                                                                                        
002630   0eff     MOVLW     0xff                                                                                            
002632   182a     XORWF     0x2a,0x0,0x0                                                                                    
002634   e101     BNZ       0x2638                                                                                          
002636   502b     MOVF      0x2b,0x0,0x0                                                                                    
002638   e101     BNZ       0x263c                                                                                          
00263a   d00c     BRA       0x2654                                                                                          
00263c   0efd     MOVLW     0xfd               }while(*data++);                                                             O:\system\usb\class\cdc\cdc.c
00263e   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002640   fff6                                                                                                               
002642   2adb     INCF      0xdb,0x1,0x0                                                                                    
002644   0efe     MOVLW     0xfe                                                                                            
002646   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002648   fff7                                                                                                               
00264a   e301     BNC       0x264e                                                                                          
00264c   2adb     INCF      0xdb,0x1,0x0                                                                                    
00264e   0008     TBLRD                                                                                                     
002650   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002652   e1ea     BNZ       0x2628                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
002654   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   O:\system\usb\class\cdc\cdc.c
002656   6e2a     MOVWF     0x2a,0x0                                                                                        
002658   6a2b     CLRF      0x2b,0x0                                                                                        
00265a   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00265c   0ffd     ADDLW     0xfd                                                                                            
00265e   6ee9     MOVWF     0xe9,0x0                                                                                        
002660   0eff     MOVLW     0xff                                                                                            
002662   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002664   6eea     MOVWF     0xea,0x0                                                                                        
002666   502a     MOVF      0x2a,0x0,0x0                                                                                    
002668   5eee     SUBWF     0xee,0x1,0x0                                                                                    
00266a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00266c   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           O:\system\usb\class\cdc\cdc.c
00266e   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            O:\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRom to setup the transfer.                                O:\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            O:\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        O:\system\usb\class\cdc\cdc.c
                                                *                                                                           O:\system\usb\class\cdc\cdc.c
                                                * (BPS 5/16/2006) Don't add the zero byte at the end. Send len-1            O:\system\usb\class\cdc\cdc.c
                                                * bytes intead of len bytes.                                                O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
002670   0efd     MOVLW     0xfd               mUSBUSARTTxRom((rom byte*)data,len); // See cdc.h                            O:\system\usb\class\cdc\cdc.c
002672   cfdb     MOVFF     0xfdb,0x1da                                                                                     
002674   f1da                                                                                                               
002676   0efe     MOVLW     0xfe                                                                                            
002678   cfdb     MOVFF     0xfdb,0x1db                                                                                     
00267a   f1db                                                                                                               
00267c   cfdf     MOVFF     0xfdf,0x1de                                                                                     
00267e   f1de                                                                                                               
002680   0101     MOVLB     0x1                                                                                             
002682   0e01     MOVLW     0x1                                                                                             
002684   6fdf     MOVWF     0xdf,0x1                                                                                        
002686   0101     MOVLB     0x1                                                                                             
002688   0e01     MOVLW     0x1                                                                                             
00268a   6fd9     MOVWF     0xd9,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
00268c   52e5     MOVF      0xe5,0x1,0x0   }//end putrsUSBUSART                                                             O:\system\usb\class\cdc\cdc.c
00268e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002690   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002692   ffd9                                                                                                               
002694   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  O:\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCTxService(void)                                      O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCTxService handles device-to-host transaction(s).          O:\system\usb\class\cdc\cdc.c
                                            *                  This function should be called once per Main Program loop.   O:\system\usb\class\cdc\cdc.c
                                            *                                                                               O:\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         O:\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  O:\system\usb\class\cdc\cdc.c
002696   cfd9     MOVFF     0xfd9,0xfe6    void CDCTxService(void)                                                          O:\system\usb\class\cdc\cdc.c
002698   ffe6                                                                                                               
00269a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00269c   ffd9                                                                                                               
00269e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                O:\system\usb\class\cdc\cdc.c
                                               byte byte_to_send;                                                           O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0026a0   0104     MOVLB     0x4                if(mCDCUsartTxIsBusy()) return;                                              O:\system\usb\class\cdc\cdc.c
0026a2   bf1c     BTFSC     0x1c,0x7,0x1                                                                                    
0026a4   d07d     BRA       0x27a0                                                                                          
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Completing stage is necessary while [ mCDCUSartTxIsBusy()==1 ].           O:\system\usb\class\cdc\cdc.c
                                                * By having this stage, user can always check cdc_trf_state,                O:\system\usb\class\cdc\cdc.c
                                                * and not having to call mCDCUsartTxIsBusy() directly.                      O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0026a6   0e03     MOVLW     0x3                if(cdc_trf_state == CDC_TX_COMPLETING)                                       O:\system\usb\class\cdc\cdc.c
0026a8   0101     MOVLB     0x1                                                                                             
0026aa   5dd9     SUBWF     0xd9,0x0,0x1                                                                                    
0026ac   e102     BNZ       0x26b2                                                                                          
0026ae   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_READY;                                            O:\system\usb\class\cdc\cdc.c
0026b0   6bd9     CLRF      0xd9,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_READY state, nothing to do, just return.                        O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0026b2   0101     MOVLB     0x1                if(cdc_trf_state == CDC_TX_READY) return;                                    O:\system\usb\class\cdc\cdc.c
0026b4   51d9     MOVF      0xd9,0x0,0x1                                                                                    
0026b6   e101     BNZ       0x26ba                                                                                          
0026b8   d073     BRA       0x27a0                                                                                          
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_BUSY_ZLP state, send zero length packet                         O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
0026ba   0e02     MOVLW     0x2                if(cdc_trf_state == CDC_TX_BUSY_ZLP)                                         O:\system\usb\class\cdc\cdc.c
0026bc   0101     MOVLB     0x1                                                                                             
0026be   5dd9     SUBWF     0xd9,0x0,0x1                                                                                    
0026c0   e106     BNZ       0x26ce                                                                                          
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
0026c2   0104     MOVLB     0x4                    CDC_BULK_BD_IN.Cnt = 0;                                                  O:\system\usb\class\cdc\cdc.c
0026c4   6b1d     CLRF      0x1d,0x1                                                                                        
0026c6   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_COMPLETING;                                       O:\system\usb\class\cdc\cdc.c
0026c8   0e03     MOVLW     0x3                                                                                             
0026ca   6fd9     MOVWF     0xd9,0x1                                                                                        
                                               }                                                                            O:\system\usb\class\cdc\cdc.c
0026cc   d061     BRA       0x2790             else if(cdc_trf_state == CDC_TX_BUSY)                                        O:\system\usb\class\cdc\cdc.c
0026ce   0101     MOVLB     0x1                                                                                             
0026d0   05d9     DECF      0xd9,0x0,0x1                                                                                    
0026d2   e15e     BNZ       0x2790                                                                                          
                                               {                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * First, have to figure out how many byte of data to send.              O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
0026d4   0e40     MOVLW     0x40               	if(cdc_tx_len > sizeof(cdc_data_tx))                                        O:\system\usb\class\cdc\cdc.c
0026d6   6e2a     MOVWF     0x2a,0x0                                                                                        
0026d8   6a2b     CLRF      0x2b,0x0                                                                                        
0026da   0101     MOVLB     0x1                                                                                             
0026dc   51de     MOVF      0xde,0x0,0x1                                                                                    
0026de   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0026e0   0e00     MOVLW     0x0                                                                                             
0026e2   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0026e4   e203     BC        0x26ec                                                                                          
0026e6   0e40     MOVLW     0x40               	    byte_to_send = sizeof(cdc_data_tx);                                     O:\system\usb\class\cdc\cdc.c
0026e8   6edf     MOVWF     0xdf,0x0                                                                                        
0026ea   d002     BRA       0x26f0             	else                                                                        O:\system\usb\class\cdc\cdc.c
0026ec   c1de     MOVFF     0x1de,0xfdf        	    byte_to_send = cdc_tx_len;                                              O:\system\usb\class\cdc\cdc.c
0026ee   ffdf                                                                                                               
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Next, load the number of bytes to send to Cnt in buffer descriptor    O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
0026f0   cfdf     MOVFF     0xfdf,0x41d            CDC_BULK_BD_IN.Cnt = byte_to_send;                                       O:\system\usb\class\cdc\cdc.c
0026f2   f41d                                                                                                               
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Subtract the number of bytes just about to be sent from the total.    O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
0026f4   50df     MOVF      0xdf,0x0,0x0       	cdc_tx_len = cdc_tx_len - byte_to_send;                                     O:\system\usb\class\cdc\cdc.c
0026f6   0101     MOVLB     0x1                                                                                             
0026f8   5dde     SUBWF     0xde,0x0,0x1                                                                                    
0026fa   0101     MOVLB     0x1                                                                                             
0026fc   6fde     MOVWF     0xde,0x1                                                                                        
                                               	                                                                            O:\system\usb\class\cdc\cdc.c
0026fe   0101     MOVLB     0x1                    pCDCDst.bRam = (byte*)&cdc_data_tx; // Set destination pointer           O:\system\usb\class\cdc\cdc.c
002700   0e48     MOVLW     0x48                                                                                            
002702   6fdc     MOVWF     0xdc,0x1                                                                                        
002704   0e05     MOVLW     0x5                                                                                             
002706   6fdd     MOVWF     0xdd,0x1                                                                                        
                                                                                                                            O:\system\usb\class\cdc\cdc.c
002708   0101     MOVLB     0x1                    if(cdc_mem_type == _ROM)            // Determine type of memory source   O:\system\usb\class\cdc\cdc.c
00270a   05df     DECF      0xdf,0x0,0x1                                                                                    
00270c   e118     BNZ       0x273e                                                                                          
                                                   {                                                                        O:\system\usb\class\cdc\cdc.c
00270e   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  O:\system\usb\class\cdc\cdc.c
002710   e015     BZ        0x273c                                                                                          
00273a   d7e9     BRA       0x270e                                                                                          
                                                       {                                                                    O:\system\usb\class\cdc\cdc.c
002712   c1da     MOVFF     0x1da,0xff6                    *pCDCDst.bRam = *pCDCSrc.bRom;                                   O:\system\usb\class\cdc\cdc.c
002714   fff6                                                                                                               
002716   c1db     MOVFF     0x1db,0xff7                                                                                     
002718   fff7                                                                                                               
00271a   0008     TBLRD                                                                                                     
00271c   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00271e   c1dc     MOVFF     0x1dc,0xfe9                                                                                     
002720   ffe9                                                                                                               
002722   c1dd     MOVFF     0x1dd,0xfea                                                                                     
002724   ffea                                                                                                               
002726   6eef     MOVWF     0xef,0x0                                                                                        
002728   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  O:\system\usb\class\cdc\cdc.c
00272a   2bdc     INCF      0xdc,0x1,0x1                                                                                    
00272c   0e00     MOVLW     0x0                                                                                             
00272e   23dd     ADDWFC    0xdd,0x1,0x1                                                                                    
002730   0101     MOVLB     0x1                            pCDCSrc.bRom++;                                                  O:\system\usb\class\cdc\cdc.c
002732   2bda     INCF      0xda,0x1,0x1                                                                                    
002734   0e00     MOVLW     0x0                                                                                             
002736   23db     ADDWFC    0xdb,0x1,0x1                                                                                    
002738   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  O:\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send)                                           O:\system\usb\class\cdc\cdc.c
                                                   }                                                                        O:\system\usb\class\cdc\cdc.c
00273c   d016     BRA       0x276a                 else // _RAM                                                             O:\system\usb\class\cdc\cdc.c
                                                   {                                                                        O:\system\usb\class\cdc\cdc.c
00273e   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  O:\system\usb\class\cdc\cdc.c
002740   e014     BZ        0x276a                                                                                          
002768   d7ea     BRA       0x273e                                                                                          
                                                       {                                                                    O:\system\usb\class\cdc\cdc.c
002742   c1da     MOVFF     0x1da,0xfe9                    *pCDCDst.bRam = *pCDCSrc.bRam;                                   O:\system\usb\class\cdc\cdc.c
002744   ffe9                                                                                                               
002746   c1db     MOVFF     0x1db,0xfea                                                                                     
002748   ffea                                                                                                               
00274a   50ef     MOVF      0xef,0x0,0x0                                                                                    
00274c   c1dc     MOVFF     0x1dc,0xfe9                                                                                     
00274e   ffe9                                                                                                               
002750   c1dd     MOVFF     0x1dd,0xfea                                                                                     
002752   ffea                                                                                                               
002754   6eef     MOVWF     0xef,0x0                                                                                        
002756   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  O:\system\usb\class\cdc\cdc.c
002758   2bdc     INCF      0xdc,0x1,0x1                                                                                    
00275a   0e00     MOVLW     0x0                                                                                             
00275c   23dd     ADDWFC    0xdd,0x1,0x1                                                                                    
00275e   0101     MOVLB     0x1                            pCDCSrc.bRam++;                                                  O:\system\usb\class\cdc\cdc.c
002760   2bda     INCF      0xda,0x1,0x1                                                                                    
002762   0e00     MOVLW     0x0                                                                                             
002764   23db     ADDWFC    0xdb,0x1,0x1                                                                                    
002766   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  O:\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send._word)                                     O:\system\usb\class\cdc\cdc.c
                                                   }//end if(cdc_mem_type...)                                               O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                                   /*                                                                       O:\system\usb\class\cdc\cdc.c
                                                    * Lastly, determine if a zero length packet state is necessary.         O:\system\usb\class\cdc\cdc.c
                                                    * See explanation in USB Specification 2.0: Section 5.8.3               O:\system\usb\class\cdc\cdc.c
                                                    */                                                                      O:\system\usb\class\cdc\cdc.c
00276a   0101     MOVLB     0x1                    if(cdc_tx_len == 0)                                                      O:\system\usb\class\cdc\cdc.c
00276c   51de     MOVF      0xde,0x0,0x1                                                                                    
00276e   e110     BNZ       0x2790                                                                                          
                                                   {                                                                        O:\system\usb\class\cdc\cdc.c
002770   0104     MOVLB     0x4                        if(CDC_BULK_BD_IN.Cnt == sizeof(cdc_data_tx))                        O:\system\usb\class\cdc\cdc.c
002772   511d     MOVF      0x1d,0x0,0x1                                                                                    
002774   6e2a     MOVWF     0x2a,0x0                                                                                        
002776   6a2b     CLRF      0x2b,0x0                                                                                        
002778   0e40     MOVLW     0x40                                                                                            
00277a   182a     XORWF     0x2a,0x0,0x0                                                                                    
00277c   e101     BNZ       0x2780                                                                                          
00277e   502b     MOVF      0x2b,0x0,0x0                                                                                    
002780   e104     BNZ       0x278a                                                                                          
002782   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_BUSY_ZLP;                                 O:\system\usb\class\cdc\cdc.c
002784   0e02     MOVLW     0x2                                                                                             
002786   6fd9     MOVWF     0xd9,0x1                                                                                        
002788   d003     BRA       0x2790                     else                                                                 O:\system\usb\class\cdc\cdc.c
00278a   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_COMPLETING;                               O:\system\usb\class\cdc\cdc.c
00278c   0e03     MOVLW     0x3                                                                                             
00278e   6fd9     MOVWF     0xd9,0x1                                                                                        
                                                   }//end if(cdc_tx_len...)                                                 O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               }//end if(cdc_tx_sate == CDC_TX_BUSY)                                        O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                               /*                                                                           O:\system\usb\class\cdc\cdc.c
                                                * Both CDC_TX_BUSY and CDC_TX_BUSY_ZLP states use the following macro       O:\system\usb\class\cdc\cdc.c
                                                */                                                                          O:\system\usb\class\cdc\cdc.c
002790   0e40     MOVLW     0x40               mUSBBufferReady(CDC_BULK_BD_IN);                                             O:\system\usb\class\cdc\cdc.c
002792   0104     MOVLB     0x4                                                                                             
002794   171c     ANDWF     0x1c,0x1,0x1                                                                                    
002796   0104     MOVLB     0x4                                                                                             
002798   7d1c     BTG       0x1c,0x6,0x1                                                                                    
00279a   0e88     MOVLW     0x88                                                                                            
00279c   0104     MOVLB     0x4                                                                                             
00279e   131c     IORWF     0x1c,0x1,0x1                                                                                    
                                                                                                                            O:\system\usb\class\cdc\cdc.c
0027a0   52e5     MOVF      0xe5,0x1,0x0   }//end CDCTxService                                                              O:\system\usb\class\cdc\cdc.c
0027a2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0027a4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0027a6   ffd9                                                                                                               
0027a8   0012     RETURN    0x0                                                                                             
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           #endif //USB_USE_CDC                                                             O:\system\usb\class\cdc\cdc.c
                                                                                                                            O:\system\usb\class\cdc\cdc.c
                                           /** EOF cdc.c ****************************************************************/  O:\system\usb\class\cdc\cdc.c
                                                   LIST P=18F2455                                                           C:\MCC18\src\traditional\proc\p18f2455.asm
                                                   LIST                                                                     C:\MCC18\src\traditional\proc\p18f2455.asm
                                                   END                                                                      C:\MCC18\src\traditional\proc\p18f2455.asm
                                           /*** Unsigned Integer Division: 24-bit by 24-bit                                 C:\MCC18\src\traditional\math\fxd2424u.c
                                            ***                                                                             C:\MCC18\src\traditional\math\fxd2424u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\traditional\math\fxd2424u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\traditional\math\fxd2424u.c
                                            ***       for: Saved (for the worst case) at least 7*24 = 168 instruction cycles C:\MCC18\src\traditional\math\fxd2424u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\traditional\math\fxd2424u.c
                                            ***/                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                           void FXD2424U (void/* ushlong aarg, ushlong barg */)                             C:\MCC18\src\traditional\math\fxd2424u.c
                                           {                                                                                C:\MCC18\src\traditional\math\fxd2424u.c
                                               // use INDF1 for the counter...                                              C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                 _asm                                                                       C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   // Clear the remainder                                                   C:\MCC18\src\traditional\math\fxd2424u.c
0035e6   6a1b     CLRF      0x1b,0x0               clrf __REMB0, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
0035e8   6a1a     CLRF      0x1a,0x0               clrf __REMB1, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
0035ea   6a19     CLRF      0x19,0x0               clrf __REMB2, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   // Set the counter to 24                                                 C:\MCC18\src\traditional\math\fxd2424u.c
0035ec   0e18     MOVLW     0x18                   movlw 24                                                                 C:\MCC18\src\traditional\math\fxd2424u.c
0035ee   6ee7     MOVWF     0xe7,0x0               movwf INDF1, 0                                                           C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   // Clear the carry flag                                                  C:\MCC18\src\traditional\math\fxd2424u.c
0035f0   90d8     BCF       0xd8,0x0,0x0           bcf STATUS, 0, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                           loop:                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                           	    //AARG24 <<= 1; The carry is always clear at the top of the loop.           C:\MCC18\src\traditional\math\fxd2424u.c
0035f2   361d     RLCF      0x1d,0x1,0x0   	    rlcf __AARGB2, 1, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
0035f4   361e     RLCF      0x1e,0x1,0x0   	    rlcf __AARGB1, 1, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
0035f6   361f     RLCF      0x1f,0x1,0x0   	    rlcf __AARGB0, 1, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   // REM24 = (REM24 << 1) | (AARG24 >> 24)                                 C:\MCC18\src\traditional\math\fxd2424u.c
0035f8   3619     RLCF      0x19,0x1,0x0   	    rlcf __REMB2, 1, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
0035fa   361a     RLCF      0x1a,0x1,0x0   	    rlcf __REMB1, 1, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
0035fc   361b     RLCF      0x1b,0x1,0x0   	    rlcf __REMB0, 1, 0                                                          C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   //if (PROD >= BARG24)                                                    C:\MCC18\src\traditional\math\fxd2424u.c
0035fe   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
003600   5c19     SUBWF     0x19,0x0,0x0   	    subwf __REMB2, 0, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
003602   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
003604   581a     SUBWFB    0x1a,0x0,0x0   	    subwfb __REMB1, 0, 0                                                        C:\MCC18\src\traditional\math\fxd2424u.c
003606   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\traditional\math\fxd2424u.c
003608   581b     SUBWFB    0x1b,0x0,0x0   	    subwfb __REMB0, 0, 0                                                        C:\MCC18\src\traditional\math\fxd2424u.c
00360a   e307     BNC       0x361a         	    bnc _false                                                                  C:\MCC18\src\traditional\math\fxd2424u.c
                                                   //{                                                                      C:\MCC18\src\traditional\math\fxd2424u.c
                                           	        //REM24-= BARG24;                                                       C:\MCC18\src\traditional\math\fxd2424u.c
00360c   5022     MOVF      0x22,0x0,0x0   	        movf __BARGB2, 0, 0                                                     C:\MCC18\src\traditional\math\fxd2424u.c
00360e   5e19     SUBWF     0x19,0x1,0x0   	        subwf __REMB2, 1, 0                                                     C:\MCC18\src\traditional\math\fxd2424u.c
003610   5023     MOVF      0x23,0x0,0x0   	        movf __BARGB1, 0, 0                                                     C:\MCC18\src\traditional\math\fxd2424u.c
003612   5a1a     SUBWFB    0x1a,0x1,0x0   	        subwfb __REMB1, 1, 0                                                    C:\MCC18\src\traditional\math\fxd2424u.c
003614   5024     MOVF      0x24,0x0,0x0   	        movf __BARGB0, 0, 0                                                     C:\MCC18\src\traditional\math\fxd2424u.c
003616   5a1b     SUBWFB    0x1b,0x1,0x0   	        subwfb __REMB0, 1, 0                                                    C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                           			// AARG++; Note that since we shifted AARG above, we can add                  C:\MCC18\src\traditional\math\fxd2424u.c
                                           			//         one simply by setting the least significant bit!                   C:\MCC18\src\traditional\math\fxd2424u.c
                                                       //         Use the incf operation to do this so that the carry       C:\MCC18\src\traditional\math\fxd2424u.c
                                                       //         flag is cleared. Thus, the carry flag will always be      C:\MCC18\src\traditional\math\fxd2424u.c
                                                       //         zero at the top of the loop.                              C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
003618   2a1d     INCF      0x1d,0x1,0x0   			incf __AARGB2, 1, 0                                                           C:\MCC18\src\traditional\math\fxd2424u.c
                                                   //}                                                                      C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   _false:                                                                  C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
00361a   2ee7     DECFSZ    0xe7,0x1,0x0           decfsz INDF1, 1, 0  // if (--count != 0) then loop. Does not affect carry flag. C:\MCC18\src\traditional\math\fxd2424u.c
00361c   d7ea     BRA       0x35f2                 bra loop                                                                 C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                                   _endasm                                                                  C:\MCC18\src\traditional\math\fxd2424u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd2424u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\traditional\math\fxd2424u.c
00361e   0012     RETURN    0x0            }                                                                                C:\MCC18\src\traditional\math\fxd2424u.c
                                           ;	RCS Header $Id: fxm2424u.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\src\traditional\math\fxm2424u.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\CMATH18.INC
                                               LIST                                                                         C:\MCC18\src\traditional\math\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\src\traditional\math\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\AARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\AARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\src\traditional\math\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\src\traditional\math\AARG.INC
                                           	                                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\src\traditional\math\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       24x24 Bit Unsigned Fixed Point Multiply 24 x 24 -> 48                    C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Input:  24 bit unsigned fixed point multiplicand in AARGB0, AARGB1,      C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;               AARGB2                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;               24 bit unsigned fixed point multiplier in BARGB0, BARGB1,        C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;               BARGB2                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Use:    CALL    FXM2424U                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Output: 48 bit unsigned fixed point product in AARGB0, AARGB1,           C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;               AARGB2, AARGB3, AARGB4, AARGB5                                   C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Max Timing:     65 clks                                                  C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       Min Timing:     65 clks                                                  C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;       PM: 64              DM: 12                                               C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           PROG	CODE                                                                        C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           FXM2424U                                                                         C:\MCC18\src\traditional\math\fxm2424u.asm
                                           		GLOBAL	FXM2424U                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
0030ca   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0	                                                       C:\MCC18\src\traditional\math\fxm2424u.asm
0030cc   f029                                                                                                               
0030ce   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\src\traditional\math\fxm2424u.asm
0030d0   f028                                                                                                               
0030d2   c01d     MOVFF     0x1d,0x27      		MOVFF	__AARGB2,__TEMPB2	                                                       C:\MCC18\src\traditional\math\fxm2424u.asm
0030d4   f027                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
0030d6   501d     MOVF      0x1d,0x0,0x0   		MOVF	__AARGB2,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
0030d8   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
0030da   cff4     MOVFF     0xff4,0x1b     		MOVFF	PRODH,__AARGB4                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
0030dc   f01b                                                                                                               
0030de   cff3     MOVFF     0xff3,0x1a     		MOVFF	PRODL,__AARGB5                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
0030e0   f01a                                                                                                               
                                           		                                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
0030e2   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
0030e4   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
0030e6   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
0030e8   f01d                                                                                                               
0030ea   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\src\traditional\math\fxm2424u.asm
0030ec   f01c                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
0030ee   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
0030f0   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
0030f2   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
0030f4   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
0030f6   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
0030f8   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm2424u.asm
0030fa   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
0030fc   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
0030fe   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
003100   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003102   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003104   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003106   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
003108   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm2424u.asm
00310a   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                           	                                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
00310c   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
00310e   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
003110   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003112   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003114   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003116   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
003118   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
00311a   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
00311c   6a1e     CLRF      0x1e,0x0       		CLRF	__AARGB1                                                                  C:\MCC18\src\traditional\math\fxm2424u.asm
00311e   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm2424u.asm
003120   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
003122   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003124   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003126   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003128   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
00312a   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
00312c   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
00312e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003130   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003132   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003134   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
003136   6a1f     CLRF      0x1f,0x0       		CLRF	__AARGB0                                                                  C:\MCC18\src\traditional\math\fxm2424u.asm
003138   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm2424u.asm
00313a   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
00313c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
00313e   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
003140   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
003142   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003144   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003146   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003148   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
00314a   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm2424u.asm
00314c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
00314e   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\src\traditional\math\fxm2424u.asm
003150   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\src\traditional\math\fxm2424u.asm
003152   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003154   261e     ADDWF     0x1e,0x1,0x0   		ADDWF	__AARGB1,F                                                               C:\MCC18\src\traditional\math\fxm2424u.asm
003156   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm2424u.asm
003158   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
00315a   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\src\traditional\math\fxm2424u.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           		END                                                                            C:\MCC18\src\traditional\math\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.5 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\cmath18.asm
                                                                                                                            C:\MCC18\src\traditional\math\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\src\traditional\math\cmath18.asm
                                                                                                                            C:\MCC18\src\traditional\math\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\src\traditional\math\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\cmath18.asm
                                                                                                                            C:\MCC18\src\traditional\math\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\src\traditional\math\cmath18.asm
                                                                                                                            C:\MCC18\src\traditional\math\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\src\traditional\math\cmath18.asm
                                           __FPFLAGSbits                                                                    C:\MCC18\src\traditional\math\cmath18.asm
                                           __FPFLAGS		RES 1       ; floating point library exception flags                  C:\MCC18\src\traditional\math\cmath18.asm
                                                                                                                            C:\MCC18\src\traditional\math\cmath18.asm
                                                   GLOBAL  SIGN, __FPFLAGS, __FPFLAGSbits                                   C:\MCC18\src\traditional\math\cmath18.asm
                                           	                                                                                C:\MCC18\src\traditional\math\cmath18.asm
                                                   END                                                                      C:\MCC18\src\traditional\math\cmath18.asm
                                           ;	RCS Header $Id: aarg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\src\traditional\math\aarg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           __REMB3                                                                          C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB7		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __REMB2                                                                          C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB6		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __REMB1                                                                          C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB5		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __REMB0                                                                          C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB4		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB3		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB2		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB1		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           __AARGB0		RES 1                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           __AEXP		RES 1       ; 8 bit biased exponent for argument A                       C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                           	GLOBAL	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\src\traditional\math\aarg.asm
                                                   GLOBAL  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\src\traditional\math\aarg.asm
                                           	GLOBAL  __AEXP                                                                  C:\MCC18\src\traditional\math\aarg.asm
                                           	GLOBAL  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\src\traditional\math\aarg.asm
                                                                                                                            C:\MCC18\src\traditional\math\aarg.asm
                                                   END                                                                      C:\MCC18\src\traditional\math\aarg.asm
                                           ;	RCS Header $Id: barg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\src\traditional\math\barg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                           __BARGB3		RES 1                                                                  C:\MCC18\src\traditional\math\barg.asm
                                           __BARGB2		RES 1                                                                  C:\MCC18\src\traditional\math\barg.asm
                                           __BARGB1		RES 1                                                                  C:\MCC18\src\traditional\math\barg.asm
                                           __BARGB0		RES 1       ; most significant byte of argument B                      C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                           __BEXP		RES 1       ; 8 bit biased exponent for argument B                       C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                                   GLOBAL  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\src\traditional\math\barg.asm
                                                   GLOBAL  __BEXP                                                           C:\MCC18\src\traditional\math\barg.asm
                                                                                                                            C:\MCC18\src\traditional\math\barg.asm
                                                   END                                                                      C:\MCC18\src\traditional\math\barg.asm
                                           ;	RCS Header $Id: temparg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\temparg.asm
                                                                                                                            C:\MCC18\src\traditional\math\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\src\traditional\math\temparg.asm
                                                                                                                            C:\MCC18\src\traditional\math\temparg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\src\traditional\math\temparg.asm
                                           ;******************************************************************************* C:\MCC18\src\traditional\math\temparg.asm
                                                                                                                            C:\MCC18\src\traditional\math\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\src\traditional\math\temparg.asm
                                                                                                                            C:\MCC18\src\traditional\math\temparg.asm
                                           __TEMPB3		RES 1                                                                  C:\MCC18\src\traditional\math\temparg.asm
                                           __TEMPB2		RES 1                                                                  C:\MCC18\src\traditional\math\temparg.asm
                                           __TEMPB1		RES 1                                                                  C:\MCC18\src\traditional\math\temparg.asm
                                           __TEMP                                                                           C:\MCC18\src\traditional\math\temparg.asm
                                           __TEMPB0		RES 1       ; temporary storage                                        C:\MCC18\src\traditional\math\temparg.asm
                                                                                                                            C:\MCC18\src\traditional\math\temparg.asm
                                                   GLOBAL  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\src\traditional\math\temparg.asm
                                           	                                                                                C:\MCC18\src\traditional\math\temparg.asm
                                                   END                                                                      C:\MCC18\src\traditional\math\temparg.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\traditional\stdclib\printf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\MCC18\src\traditional\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\MCC18\src\traditional\stdclib\printf.c
                                              of characters output. */                                                      C:\MCC18\src\traditional\stdclib\printf.c
                                           int                                                                              C:\MCC18\src\traditional\stdclib\printf.c
003322   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\MCC18\src\traditional\stdclib\printf.c
003324   ffe6                                                                                                               
003326   cfda     MOVFF     0xfda,0xfe6                                                                                     
003328   ffe6                                                                                                               
00332a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00332c   ffd9                                                                                                               
00332e   cfe2     MOVFF     0xfe2,0xfda                                                                                     
003330   ffda                                                                                                               
003332   52e6     MOVF      0xe6,0x1,0x0                                                                                    
003334   52e6     MOVF      0xe6,0x1,0x0                                                                                    
003336   52e6     MOVF      0xe6,0x1,0x0                                                                                    
003338   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\MCC18\src\traditional\stdclib\printf.c
                                             va_list ap;                                                                    C:\MCC18\src\traditional\stdclib\printf.c
                                             int n;                                                                         C:\MCC18\src\traditional\stdclib\printf.c
00333a   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\MCC18\src\traditional\stdclib\printf.c
00333c   0ffb     ADDLW     0xfb                                                                                            
00333e   6e2a     MOVWF     0x2a,0x0                                                                                        
003340   0eff     MOVLW     0xff                                                                                            
003342   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003344   6e2b     MOVWF     0x2b,0x0                                                                                        
003346   c02a     MOVFF     0x2a,0xfde                                                                                      
003348   ffde                                                                                                               
00334a   6edd     MOVWF     0xdd,0x0                                                                                        
00334c   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\MCC18\src\traditional\stdclib\printf.c
00334e   ffe6                                                                                                               
003350   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
003352   ffe6                                                                                                               
003354   0efb     MOVLW     0xfb                                                                                            
003356   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003358   ffe6                                                                                                               
00335a   0efc     MOVLW     0xfc                                                                                            
00335c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00335e   ffe6                                                                                                               
003360   0efd     MOVLW     0xfd                                                                                            
003362   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003364   ffe6                                                                                                               
003366   c072     MOVFF     0x72,0xfe6                                                                                      
003368   ffe6                                                                                                               
00336a   c073     MOVFF     0x73,0xfe6                                                                                      
00336c   ffe6                                                                                                               
00336e   ecee     CALL      0x17dc,0x0                                                                                      
003370   f00b                                                                                                               
003372   6e2a     MOVWF     0x2a,0x0                                                                                        
003374   0e07     MOVLW     0x7                                                                                             
003376   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003378   e202     BC        0x337e                                                                                          
00337a   6ae1     CLRF      0xe1,0x0                                                                                        
00337c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00337e   6ee1     MOVWF     0xe1,0x0                                                                                        
003380   502a     MOVF      0x2a,0x0,0x0                                                                                    
003382   0e02     MOVLW     0x2                                                                                             
003384   cff3     MOVFF     0xff3,0xfdb                                                                                     
003386   ffdb                                                                                                               
003388   0e03     MOVLW     0x3                                                                                             
00338a   cff4     MOVFF     0xff4,0xfdb                                                                                     
00338c   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\MCC18\src\traditional\stdclib\printf.c
00338e   0e02     MOVLW     0x2              return n;                                                                      C:\MCC18\src\traditional\stdclib\printf.c
003390   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003392   f02a                                                                                                               
003394   0e03     MOVLW     0x3                                                                                             
003396   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003398   f02b                                                                                                               
00339a   c02a     MOVFF     0x2a,0xff3                                                                                      
00339c   fff3                                                                                                               
00339e   c02b     MOVFF     0x2b,0xff4                                                                                      
0033a0   fff4                                                                                                               
0033a2   0e04     MOVLW     0x4            }                                                                                C:\MCC18\src\traditional\stdclib\printf.c
0033a4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0033a6   e202     BC        0x33ac                                                                                          
0033a8   6ae1     CLRF      0xe1,0x0                                                                                        
0033aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033ac   6ee1     MOVWF     0xe1,0x0                                                                                        
0033ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033b0   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0033b2   ffda                                                                                                               
0033b4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0033b6   ffd9                                                                                                               
0033b8   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\MCC18\src\traditional\stdclib\stdout.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\MCC18\src\traditional\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\MCC18\src\traditional\stdclib\stdout.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\src\traditional\stdclib\toupper.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ; @name toupper                                                                  C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;The {\bf toupper} function converts a lower case character to the               C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;corresponding upper case character.                                             C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;@return If {\bf islower} is true for the value of {\bf c}, the corresponding    C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;upper case equivalent is returned, else the value of {\bf c} is returned        C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;unchanged.                                                                      C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ; int toupper (int c);                                                           C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                           CTYPE CODE                                                                       C:\MCC18\src\traditional\stdclib\toupper.asm
                                           toupper                                                                          C:\MCC18\src\traditional\stdclib\toupper.asm
                                             global toupper                                                                 C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\src\traditional\stdclib\toupper.asm
                                           ;         Return with result in PROD                                             C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c') after checking upper byte for 0       C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
003514   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\src\traditional\stdclib\toupper.asm
003516   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
003518   6ee9     MOVWF     0xe9,0x0                                                                                        
00351a   0eff     MOVLW     0xff                                                                                            
00351c   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
00351e   6eea     MOVWF     0xea,0x0                                                                                        
                                           	                                                                                C:\MCC18\src\traditional\stdclib\toupper.asm
                                             ; Copy 'c' into target location                                                C:\MCC18\src\traditional\stdclib\toupper.asm
003520   cfed     MOVFF     0xfed,0xff4    	  movff POSTDEC0, PRODH                                                         C:\MCC18\src\traditional\stdclib\toupper.asm
003522   fff4                                                                                                               
003524   cfef     MOVFF     0xfef,0xff3    	  movff INDF0, PRODL                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
003526   fff3                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
003528   66f4     TSTFSZ    0xf4,0x0                 tstfsz    PRODH,ACCESS                                                 C:\MCC18\src\traditional\stdclib\toupper.asm
00352a   d007     BRA       0x353a                   bra       jNoMatch            ; upper byte must be 0                   C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                             ; Test for lower case condition                                                C:\MCC18\src\traditional\stdclib\toupper.asm
00352c   0e60     MOVLW     0x60                     jmpFleL   PRODL,ACCESS,'a'-1,jNoMatch                                  C:\MCC18\src\traditional\stdclib\toupper.asm
00352e   64f3     CPFSGT    0xf3,0x0                                                                                        
003530   d004     BRA       0x353a                                                                                          
003532   0e7b     MOVLW     0x7b                     jmpFgeL   PRODL,ACCESS,'z'+1,jNoMatch                                  C:\MCC18\src\traditional\stdclib\toupper.asm
003534   60f3     CPFSLT    0xf3,0x0                                                                                        
003536   d001     BRA       0x353a                                                                                          
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                             ; Convert char from lower to upper by clearing bit 5                           C:\MCC18\src\traditional\stdclib\toupper.asm
003538   9af3     BCF       0xf3,0x5,0x0             bcf       PRODL,5,ACCESS                                               C:\MCC18\src\traditional\stdclib\toupper.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                           jNoMatch:                                                                        C:\MCC18\src\traditional\stdclib\toupper.asm
00353a   0012     RETURN    0x0                      return                                                                 C:\MCC18\src\traditional\stdclib\toupper.asm
                                             end                                                                            C:\MCC18\src\traditional\stdclib\toupper.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
0017b0   ec14     CALL      0x2228,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\MCC18\src\traditional\stdclib\vfprintf.c
0017b2   f011                                                                                                               
002228   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
00222a   ffe6                                                                                                               
00222c   cfda     MOVFF     0xfda,0xfe6                                                                                     
00222e   ffe6                                                                                                               
002230   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002232   ffd9                                                                                                               
002234   cfe2     MOVFF     0xfe2,0xfda                                                                                     
002236   ffda                                                                                                               
002238   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0017b4   0efb     MOVLW     0xfb             while (n--)                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
0017b6   cfdb     MOVFF     0xfdb,0xff3                                                                                     
0017b8   fff3                                                                                                               
0017ba   06db     DECF      0xdb,0x1,0x0                                                                                    
0017bc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0017be   0900     IORLW     0x0                                                                                             
0017c0   e00a     BZ        0x17d6                                                                                          
0017c2   ec62     CALL      0x22c4,0x0         if (putc (c, handle) == EOF)                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
0017c4   f011                                                                                                               
0017c6   0efa     MOVLW     0xfa                                                                                            
0017c8   eccd     CALL      0x239a,0x0                                                                                      
0017ca   f011                                                                                                               
0017cc   e1f3     BNZ       0x17b4                                                                                          
0017ce   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0017d0   e1f1     BNZ       0x17b4                                                                                          
0017d2   0e01     MOVLW     0x1                  return 1;                                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
0017d4   d001     BRA       0x17d8                                                                                          
0017d6   0e00     MOVLW     0x0              return 0;                                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
0017d8   ef43     GOTO      0x2286         }                                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0017da   f011                                                                                                               
002286   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002288   cfe5     MOVFF     0xfe5,0xfda                                                                                     
00228a   ffda                                                                                                               
00228c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00228e   ffd9                                                                                                               
002290   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                           int                                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
0017dc   ec14     CALL      0x2228,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\MCC18\src\traditional\stdclib\vfprintf.c
0017de   f011                                                                                                               
0017e0   0e3b     MOVLW     0x3b                                                                                            
0017e2   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0017e4   e302     BNC       0x17ea                                                                                          
0017e6   68e1     SETF      0xe1,0x0                                                                                        
0017e8   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0017ea   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
0017ec   0e01     MOVLW     0x1              int count = 0;                                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
0017ee   6adb     CLRF      0xdb,0x0                                                                                        
0017f0   0e02     MOVLW     0x2                                                                                             
0017f2   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
0017f4   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
0017f6   cfdb     MOVFF     0xfdb,0xff6                                                                                     
0017f8   fff6                                                                                                               
0017fa   0efa     MOVLW     0xfa                                                                                            
0017fc   cfdb     MOVFF     0xfdb,0xff7                                                                                     
0017fe   fff7                                                                                                               
001800   0efb     MOVLW     0xfb                                                                                            
001802   cfdb     MOVFF     0xfdb,0xff8                                                                                     
001804   fff8                                                                                                               
001806   0008     TBLRD                                                                                                     
001808   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00180a   6edf     MOVWF     0xdf,0x0                                                                                        
00180c   50df     MOVF      0xdf,0x0,0x0                                                                                    
00180e   e102     BNZ       0x1814                                                                                          
001810   ef67     GOTO      0x20ce                                                                                          
001812   f010                                                                                                               
0020c8   d979     RCALL     0x23bc                                                                                          
0020ca   ef03     GOTO      0x1806                                                                                          
0020cc   f00c                                                                                                               
0023bc   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0023be   0ff9     ADDLW     0xf9                                                                                            
0023c0   6ee9     MOVWF     0xe9,0x0                                                                                        
0023c2   0eff     MOVLW     0xff                                                                                            
0023c4   ef77     GOTO      0x22ee                                                                                          
0023c6   f011                                                                                                               
                                               {                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001814   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001816   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001818   e002     BZ        0x181e                                                                                          
00181a   ef5a     GOTO      0x20b4                                                                                          
00181c   f010                                                                                                               
                                                   {                                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
00181e   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001820   6adb     CLRF      0xdb,0x0                                                                                        
001822   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001824   6adb     CLRF      0xdb,0x0                                                                                        
001826   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001828   6adb     CLRF      0xdb,0x0                                                                                        
00182a   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
00182c   6adb     CLRF      0xdb,0x0                                                                                        
00182e   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001830   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     int n;                                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\MCC18\src\traditional\stdclib\vfprintf.c
001832   ec7c     CALL      0x20f8,0x0               c = *++f;                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001834   f010                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          specified.)                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001836   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001838   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00183a   e00c     BZ        0x1854                                                                                          
00183c   0e2b     MOVLW     0x2b                                                                                            
00183e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001840   e009     BZ        0x1854                                                                                          
001842   0e20     MOVLW     0x20                                                                                            
001844   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001846   e006     BZ        0x1854                                                                                          
001848   0e23     MOVLW     0x23                                                                                            
001886   d7d5     BRA       0x1832                                                                                          
00184a   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00184c   e003     BZ        0x1854                                                                                          
00184e   0e30     MOVLW     0x30                                                                                            
001850   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001852   e11a     BNZ       0x1888                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001854   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001856   0a30     XORLW     0x30                                                                                            
001858   e014     BZ        0x1882                                                                                          
00185a   0a13     XORLW     0x13                                                                                            
00185c   e00f     BZ        0x187c                                                                                          
00185e   0a03     XORLW     0x3                                                                                             
001860   e00a     BZ        0x1876                                                                                          
001862   0a0b     XORLW     0xb                                                                                             
001864   e005     BZ        0x1870                                                                                          
001866   0a06     XORLW     0x6                                                                                             
001868   e1e4     BNZ       0x1832                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case '-':                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
00186a   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
00186c   80db     BSF       0xdb,0x0,0x0                                                                                    
00186e   d7e1     BRA       0x1832                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case '+':                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001870   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001872   82db     BSF       0xdb,0x1,0x0                                                                                    
001874   d7de     BRA       0x1832                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001876   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001878   84db     BSF       0xdb,0x2,0x0                                                                                    
00187a   d7db     BRA       0x1832                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case '#':                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
00187c   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
00187e   86db     BSF       0xdb,0x3,0x0                                                                                    
001880   d7d8     BRA       0x1832                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case '0':                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001882   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001884   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001888   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
00188a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00188c   e11b     BNZ       0x18c4                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00188e   ec78     CALL      0x20f0,0x0                   n = va_arg (ap, int);                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001890   f010                                                                                                               
001892   ecc6     CALL      0x218c,0x0                                                                                      
001894   f010                                                                                                               
00218c   0e13     MOVLW     0x13                                                                                            
00218e   cfee     MOVFF     0xfee,0xfdb                                                                                     
002190   ffdb                                                                                                               
002192   0e14     MOVLW     0x14                                                                                            
002194   cfed     MOVFF     0xfed,0xfdb                                                                                     
002196   ffdb                                                                                                               
001896   e010     BZ        0x18b8                       if (n < 0)                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
002198   0e13     MOVLW     0x13                                                                                            
00219a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00219c   f02a                                                                                                               
00219e   0e14     MOVLW     0x14                                                                                            
0021a0   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0021a2   f02b                                                                                                               
0021a4   0100     MOVLB     0x0                                                                                             
0021a6   0e80     MOVLW     0x80                                                                                            
0021a8   142b     ANDWF     0x2b,0x0,0x0                                                                                    
0021aa   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001898   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
00189a   80db     BSF       0xdb,0x0,0x0                                                                                    
00189c   681e     SETF      0x1e,0x0                         width = -n;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00189e   681f     SETF      0x1f,0x0                                                                                        
0018a0   0e13     MOVLW     0x13                                                                                            
0018a2   cfdb     MOVFF     0xfdb,0x23                                                                                      
0018a4   f023                                                                                                               
0018a6   0e14     MOVLW     0x14                                                                                            
0018a8   cfdb     MOVFF     0xfdb,0x24                                                                                      
0018aa   f024                                                                                                               
0018ac   ecae     CALL      0x315c,0x0                                                                                      
0018ae   f018                                                                                                               
0018b0   0e04     MOVLW     0x4                                                                                             
0018b2   c01c     MOVFF     0x1c,0xfdb                                                                                      
0018b4   ffdb                                                                                                               
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0018b6   d003     BRA       0x18be                       else                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
0018b8   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
0018ba   ecaf     CALL      0x215e,0x0                                                                                      
0018bc   f010                                                                                                               
0018be   ec7c     CALL      0x20f8,0x0                   c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0018c0   f010                                                                                                               
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
0018c2   d00b     BRA       0x18da                   else                                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
0018c4   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0018c6   6adb     CLRF      0xdb,0x0                                                                                        
0018c8   ec1d     CALL      0x223a,0x0                   while ((unsigned char) isdigit (c))                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0018ca   f011                                                                                                               
0018cc   e003     BZ        0x18d4                                                                                          
0018d2   d7fa     BRA       0x18c8                                                                                          
00223a   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
00223c   ffe6                                                                                                               
00223e   6ae6     CLRF      0xe6,0x0                                                                                        
002240   ec9e     CALL      0x353c,0x0                                                                                      
002242   f01a                                                                                                               
002244   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002246   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002248   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00224a   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0018ce   ec91     CALL      0x2322,0x0                       cval = cval * 10 + c - '0';                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
0018d0   f011                                                                                                               
002322   0e09     MOVLW     0x9                                                                                             
002324   50db     MOVF      0xdb,0x0,0x0                                                                                    
002326   0d0a     MULLW     0xa                                                                                             
002328   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00232a   24df     ADDWF     0xdf,0x0,0x0                                                                                    
00232c   0fd0     ADDLW     0xd0                                                                                            
00232e   6ee7     MOVWF     0xe7,0x0                                                                                        
002330   0e09     MOVLW     0x9                                                                                             
002332   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002334   ffdb                                                                                                               
002336   ef7c     GOTO      0x20f8                           c = *++f;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
002338   f010                                                                                                               
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0018d4   0e09     MOVLW     0x9                          width = cval;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
0018d6   ecaf     CALL      0x215e,0x0                                                                                      
0018d8   f010                                                                                                               
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\MCC18\src\traditional\stdclib\vfprintf.c
0018da   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
0018dc   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
0018de   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\MCC18\src\traditional\stdclib\vfprintf.c
0018e0   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0018e2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0018e4   e11b     BNZ       0x191c                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
0018e6   ec7c     CALL      0x20f8,0x0                   c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0018e8   f010                                                                                                               
0018ea   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
0018ec   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0018ee   e10b     BNZ       0x1906                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0018f0   ec78     CALL      0x20f0,0x0                       n = va_arg (ap, int);                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0018f2   f010                                                                                                               
0018f4   ecc6     CALL      0x218c,0x0                                                                                      
0018f6   f010                                                                                                               
0020f0   d929     RCALL     0x2344                                                                                          
0020f2   0e02     MOVLW     0x2                                                                                             
0020f4   ef69     GOTO      0x22d2                                                                                          
0020f6   f011                                                                                                               
0022d2   5e2a     SUBWF     0x2a,0x1,0x0                                                                                    
0022d4   0e00     MOVLW     0x0                                                                                             
0022d6   5a2b     SUBWFB    0x2b,0x1,0x0                                                                                    
0022d8   0ef7     MOVLW     0xf7                                                                                            
0022da   c02a     MOVFF     0x2a,0xfdb                                                                                      
0022dc   ffdb                                                                                                               
0022de   0ef8     MOVLW     0xf8                                                                                            
0022e0   c02b     MOVFF     0x2b,0xfdb                                                                                      
0022e2   ffdb                                                                                                               
0022e4   c02a     MOVFF     0x2a,0xfe9                                                                                      
0022e6   ffe9                                                                                                               
0022e8   c02b     MOVFF     0x2b,0xfea                                                                                      
0022ea   ffea                                                                                                               
0022ec   0012     RETURN    0x0                                                                                             
002344   0ef7     MOVLW     0xf7                                                                                            
002346   cfdb     MOVFF     0xfdb,0x2a                                                                                      
002348   f02a                                                                                                               
00234a   0ef8     MOVLW     0xf8                                                                                            
00234c   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00234e   f02b                                                                                                               
002350   0012     RETURN    0x0                                                                                             
0018f8   e103     BNZ       0x1900                           if (n >= 0)                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               {                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
0018fa   0e13     MOVLW     0x13                                 precision = n;                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
0018fc   ec01     CALL      0x2202,0x0                                                                                      
0018fe   f011                                                                                                               
002202   50db     MOVF      0xdb,0x0,0x0                                                                                    
002204   d8ce     RCALL     0x23a2                                                                                          
0023a2   6ee7     MOVWF     0xe7,0x0                                                                                        
0023a4   0e05     MOVLW     0x5                                                                                             
0023a6   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0023a8   ffdb                                                                                                               
0023aa   0012     RETURN    0x0                                                                                             
002206   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
002208   6ef3     MOVWF     0xf3,0x0                                                                                        
00220a   0e06     MOVLW     0x6                                                                                             
00220c   cff3     MOVFF     0xff3,0xfdb                                                                                     
00220e   ffdb                                                                                                               
002210   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001900   ec7c     CALL      0x20f8,0x0                       c = *++f;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001902   f010                                                                                                               
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001904   d00b     BRA       0x191c                       else                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001906   0e09     MOVLW     0x9                              cval = 0;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001908   6adb     CLRF      0xdb,0x0                                                                                        
00190a   ec1d     CALL      0x223a,0x0                       while ((unsigned char) isdigit (c))                            C:\MCC18\src\traditional\stdclib\vfprintf.c
00190c   f011                                                                                                               
00190e   e003     BZ        0x1916                                                                                          
001914   d7fa     BRA       0x190a                                                                                          
                                                               {                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001910   ec91     CALL      0x2322,0x0                           cval = cval * 10 + c - '0';                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001912   f011                                                                                                               
                                                                 c = *++f;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               }                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001916   0e09     MOVLW     0x9                              precision = cval;                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001918   ec01     CALL      0x2202,0x0                                                                                      
00191a   f011                                                                                                               
                                                             have_precision = 1;                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\MCC18\src\traditional\stdclib\vfprintf.c
00191c   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
00191e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001920   e107     BNZ       0x1930                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001922   ec7c     CALL      0x20f8,0x0                   c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001924   f010                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001926   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001928   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00192a   e11d     BNZ       0x1966                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
00192c   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\MCC18\src\traditional\stdclib\vfprintf.c
00192e   d018     BRA       0x1960                   else if (c == 't' || c == 'z')                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001930   0e74     MOVLW     0x74                                                                                            
001932   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001934   e017     BZ        0x1964                                                                                          
001936   0e7a     MOVLW     0x7a                                                                                            
001938   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00193a   e014     BZ        0x1964                                                                                          
                                                       c = *++f;                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\MCC18\src\traditional\stdclib\vfprintf.c
00193c   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\MCC18\src\traditional\stdclib\vfprintf.c
00193e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001940   e006     BZ        0x194e                                                                                          
001942   0e54     MOVLW     0x54                                                                                            
001944   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001946   e003     BZ        0x194e                                                                                          
001948   0e5a     MOVLW     0x5a                                                                                            
00194a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00194c   e102     BNZ       0x1952                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00194e   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001950   d007     BRA       0x1960                   else if (c == 'l' || c == 'j')                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001952   0e6c     MOVLW     0x6c                                                                                            
001954   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001956   e003     BZ        0x195e                                                                                          
001958   0e6a     MOVLW     0x6a                                                                                            
00195a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00195c   e104     BNZ       0x1966                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00195e   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001960   ec54     CALL      0x22a8,0x0                                                                                      
001962   f011                                                                                                               
001964   dbc9     RCALL     0x20f8                       c = *++f;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0020f8   d961     RCALL     0x23bc                                                                                          
0020fa   0008     TBLRD                                                                                                     
0020fc   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0020fe   6edf     MOVWF     0xdf,0x0                                                                                        
002100   0012     RETURN    0x0                                                                                             
0022ee   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0022f0   6eea     MOVWF     0xea,0x0                                                                                        
0022f2   2aef     INCF      0xef,0x1,0x0                                                                                    
0022f4   cfee     MOVFF     0xfee,0xff6                                                                                     
0022f6   fff6                                                                                                               
0022f8   0e00     MOVLW     0x0                                                                                             
0022fa   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0022fc   cfee     MOVFF     0xfee,0xff7                                                                                     
0022fe   fff7                                                                                                               
002300   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
002302   cfee     MOVFF     0xfee,0xff8                                                                                     
002304   fff8                                                                                                               
002306   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001966   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001968   0a6e     XORLW     0x6e                                                                                            
00196a   e101     BNZ       0x196e                                                                                          
00196c   d37f     BRA       0x206c                                                                                          
00196e   0a1e     XORLW     0x1e                                                                                            
001970   e101     BNZ       0x1974                                                                                          
001972   d192     BRA       0x1c98                                                                                          
001974   0a20     XORLW     0x20                                                                                            
001976   e101     BNZ       0x197a                                                                                          
001978   d18f     BRA       0x1c98                                                                                          
00197a   0a3f     XORLW     0x3f                                                                                            
00197c   e101     BNZ       0x1980                                                                                          
00197e   d149     BRA       0x1c12                                                                                          
001980   0a1a     XORLW     0x1a                                                                                            
001982   e101     BNZ       0x1986                                                                                          
001984   d146     BRA       0x1c12                                                                                          
001986   0a0d     XORLW     0xd                                                                                             
001988   e101     BNZ       0x198c                                                                                          
00198a   d143     BRA       0x1c12                                                                                          
00198c   0a20     XORLW     0x20                                                                                            
00198e   e101     BNZ       0x1992                                                                                          
001990   d140     BRA       0x1c12                                                                                          
001992   0a3a     XORLW     0x3a                                                                                            
001994   e101     BNZ       0x1998                                                                                          
001996   d13d     BRA       0x1c12                                                                                          
001998   0a20     XORLW     0x20                                                                                            
00199a   e101     BNZ       0x199e                                                                                          
00199c   d13a     BRA       0x1c12                                                                                          
00199e   0a26     XORLW     0x26                                                                                            
0019a0   e101     BNZ       0x19a4                                                                                          
0019a2   d135     BRA       0x1c0e                                                                                          
0019a4   0a0d     XORLW     0xd                                                                                             
0019a6   e101     BNZ       0x19aa                                                                                          
0019a8   d132     BRA       0x1c0e                                                                                          
0019aa   0a1a     XORLW     0x1a                                                                                            
0019ac   e101     BNZ       0x19b0                                                                                          
0019ae   d0d9     BRA       0x1b62                                                                                          
0019b0   0a20     XORLW     0x20                                                                                            
0019b2   e04a     BZ        0x1a48                                                                                          
0019b4   0a30     XORLW     0x30                                                                                            
0019b6   e01f     BZ        0x19f6                                                                                          
0019b8   0a46     XORLW     0x46                                                                                            
0019ba   e00e     BZ        0x19d8                                                                                          
0019bc   0a25     XORLW     0x25                                                                                            
0019be   e001     BZ        0x19c2                                                                                          
0019c0   d383     BRA       0x20c8                                                                                          
                                                       {                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            character. */                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
0019c2   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
0019c4   0ff9     ADDLW     0xf9                                                                                            
0019c6   6ee9     MOVWF     0xe9,0x0                                                                                        
0019c8   0eff     MOVLW     0xff                                                                                            
0019ca   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0019cc   6eea     MOVWF     0xea,0x0                                                                                        
0019ce   0e01     MOVLW     0x1                                                                                             
0019d0   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0019d2   0e00     MOVLW     0x0                                                                                             
0019d4   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
0019d6   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case '%':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
0019d8   ec62     CALL      0x22c4,0x0                   if (putc ('%', handle) == EOF)                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
0019da   f011                                                                                                               
0019dc   0e25     MOVLW     0x25                                                                                            
0019de   6ee6     MOVWF     0xe6,0x0                                                                                        
0019e0   db95     RCALL     0x210c                                                                                          
0019e2   e103     BNZ       0x19ea                                                                                          
0019e4   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0019e6   e101     BNZ       0x19ea                                                                                          
0019e8   d369     BRA       0x20bc                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
0019ea   ec5e     CALL      0x22bc,0x0                   ++count;                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
0019ec   f011                                                                                                               
0019ee   e201     BC        0x19f2                                                                                          
0019f0   d36b     BRA       0x20c8                                                                                          
0019f2   2adb     INCF      0xdb,0x1,0x0                                                                                    
0019f4   d369     BRA       0x20c8                       break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
0019f6   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
0019f8   6adb     CLRF      0xdb,0x0                                                                                        
0019fa   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
0019fc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019fe   0801     SUBLW     0x1                                                                                             
001a00   e206     BC        0x1a0e                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001a02   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001a04   04db     DECF      0xdb,0x0,0x0                                                                                    
001a06   ec26     CALL      0x224c,0x0                                                                                      
001a08   f011                                                                                                               
001a0a   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001a0c   db8b     RCALL     0x2124                                                                                          
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001a0e   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001a10   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a12   e009     BZ        0x1a26                                                                                          
001a14   0e03     MOVLW     0x3                                                                                             
001a16   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a18   0b01     ANDLW     0x1                                                                                             
001a1a   e105     BNZ       0x1a26                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001a1c   db72     RCALL     0x2102                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001a1e   e001     BZ        0x1a22                                                                                          
001a20   d34d     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001a22   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001a24   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001a26   db64     RCALL     0x20f0                       c = va_arg (ap, int);                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001a28   cfef     MOVFF     0xfef,0xfdf                                                                                     
001a2a   ffdf                                                                                                               
001a2c   ecd6     CALL      0x23ac,0x0                   if (putc (c, handle) == EOF)                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001a2e   f011                                                                                                               
001a30   e103     BNZ       0x1a38                                                                                          
001a32   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001a34   e101     BNZ       0x1a38                                                                                          
001a36   d342     BRA       0x20bc                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001a38   ec5e     CALL      0x22bc,0x0                   ++count;                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001a3a   f011                                                                                                               
001a3c   e301     BNC       0x1a40                                                                                          
001a3e   2adb     INCF      0xdb,0x1,0x0                                                                                    
001a40   db60     RCALL     0x2102                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001a42   e101     BNZ       0x1a46                                                                                          
001a44   d341     BRA       0x20c8                                                                                          
001a46   d33a     BRA       0x20bc                         return EOF;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001a48   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001a4a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a4c   0802     SUBLW     0x2                                                                                             
001a4e   e10f     BNZ       0x1a6e                                                                                          
001a50   eca2     CALL      0x2344,0x0                     romstring = va_arg (ap, rom far char *);                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001a52   f011                                                                                                               
001a54   0e03     MOVLW     0x3                                                                                             
001a56   ec69     CALL      0x22d2,0x0                                                                                      
001a58   f011                                                                                                               
001a5a   0e0e     MOVLW     0xe                                                                                             
001a5c   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a5e   ffdb                                                                                                               
001a60   0e0f     MOVLW     0xf                                                                                             
001a62   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a64   ffdb                                                                                                               
001a66   0e10     MOVLW     0x10                                                                                            
001a68   cfee     MOVFF     0xfee,0xfdb                                                                                     
001a6a   ffdb                                                                                                               
001a6c   d020     BRA       0x1aae                       else                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001a6e   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\MCC18\src\traditional\stdclib\vfprintf.c
001a70   cfdb     MOVFF     0xfdb,0x2d                                                                                      
001a72   f02d                                                                                                               
001a74   0ef8     MOVLW     0xf8                                                                                            
001a76   cfdb     MOVFF     0xfdb,0x2e                                                                                      
001a78   f02e                                                                                                               
001a7a   0e02     MOVLW     0x2                                                                                             
001a7c   5e2d     SUBWF     0x2d,0x1,0x0                                                                                    
001a7e   0e00     MOVLW     0x0                                                                                             
001a80   5a2e     SUBWFB    0x2e,0x1,0x0                                                                                    
001a82   0ef7     MOVLW     0xf7                                                                                            
001a84   c02d     MOVFF     0x2d,0xfdb                                                                                      
001a86   ffdb                                                                                                               
001a88   0ef8     MOVLW     0xf8                                                                                            
001a8a   c02e     MOVFF     0x2e,0xfdb                                                                                      
001a8c   ffdb                                                                                                               
001a8e   c02d     MOVFF     0x2d,0xfe9                                                                                      
001a90   ffe9                                                                                                               
001a92   c02e     MOVFF     0x2e,0xfea                                                                                      
001a94   ffea                                                                                                               
001a96   ec59     CALL      0x22b2,0x0                                                                                      
001a98   f011                                                                                                               
001a9a   6a2c     CLRF      0x2c,0x0                                                                                        
001a9c   0e0e     MOVLW     0xe                                                                                             
001a9e   c02a     MOVFF     0x2a,0xfdb                                                                                      
001aa0   ffdb                                                                                                               
001aa2   0e0f     MOVLW     0xf                                                                                             
001aa4   c02b     MOVFF     0x2b,0xfdb                                                                                      
001aa6   ffdb                                                                                                               
001aa8   0e10     MOVLW     0x10                                                                                            
001aaa   c02c     MOVFF     0x2c,0xfdb                                                                                      
001aac   ffdb                                                                                                               
001aae   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001ab0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ab2   ffe6                                                                                                               
001ab4   0e0f     MOVLW     0xf                                                                                             
001ab6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ab8   ffe6                                                                                                               
001aba   0e10     MOVLW     0x10                                                                                            
001abc   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001abe   ffe6                                                                                                               
001ac0   ec65     CALL      0x34ca,0x0                                                                                      
001ac2   f01a                                                                                                               
001ac4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ac6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ac8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001aca   0e13     MOVLW     0x13                                                                                            
001acc   c01d     MOVFF     0x1d,0xfdb                                                                                      
001ace   ffdb                                                                                                               
001ad0   0e14     MOVLW     0x14                                                                                            
001ad2   c01e     MOVFF     0x1e,0xfdb                                                                                      
001ad4   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001ad6   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\traditional\stdclib\vfprintf.c
001ad8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ada   e005     BZ        0x1ae6                                                                                          
001adc   0e13     MOVLW     0x13                                                                                            
001ade   ec9d     CALL      0x233a,0x0                                                                                      
001ae0   f011                                                                                                               
001ae2   e201     BC        0x1ae6                                                                                          
001ae4   db6a     RCALL     0x21ba                         n = precision;                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
0021ba   0e05     MOVLW     0x5                                                                                             
0021bc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021be   6ee6     MOVWF     0xe6,0x0                                                                                        
0021c0   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0021c2   0f13     ADDLW     0x13                                                                                            
0021c4   d901     RCALL     0x23c8                                                                                          
0021c6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021c8   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0021ca   6eee     MOVWF     0xee,0x0                                                                                        
0021cc   6aed     CLRF      0xed,0x0                                                                                        
0021ce   0012     RETURN    0x0                                                                                             
001ae6   ecc1     CALL      0x2382,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001ae8   f011                                                                                                               
001aea   e202     BC        0x1af0                                                                                          
002382   0e13     MOVLW     0x13                                                                                            
002384   50db     MOVF      0xdb,0x0,0x0                                                                                    
002386   6ef3     MOVWF     0xf3,0x0                                                                                        
002388   0e04     MOVLW     0x4                                                                                             
00238a   efaa     GOTO      0x2154                                                                                          
00238c   f010                                                                                                               
001aec   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001aee   db37     RCALL     0x215e                                                                                          
001af0   ec84     CALL      0x2308,0x0                   space_cnt = width - (unsigned char) n;                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001af2   f011                                                                                                               
002308   0e04     MOVLW     0x4                                                                                             
00230a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00230c   ffe6                                                                                                               
00230e   0e13     MOVLW     0x13                                                                                            
002310   50db     MOVF      0xdb,0x0,0x0                                                                                    
002312   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002314   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
002316   df9a     RCALL     0x224c                                                                                          
002318   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
00231a   df04     RCALL     0x2124                                                                                          
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001af4   e006     BZ        0x1b02                       if (have_precision && precision < width)                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001af6   0e04     MOVLW     0x4                                                                                             
001af8   ec9d     CALL      0x233a,0x0                                                                                      
001afa   f011                                                                                                               
001afc   e202     BC        0x1b02                                                                                          
00231c   0e06     MOVLW     0x6                                                                                             
00231e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002320   0012     RETURN    0x0                                                                                             
001afe   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001b00   db2e     RCALL     0x215e                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001b02   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001b04   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
001b06   d005     BRA       0x1b12                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001b08   dafc     RCALL     0x2102                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001b0a   e001     BZ        0x1b0e                                                                                          
001b0c   d2d7     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001b0e   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001b10   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001b12   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001b14   6adb     CLRF      0xdb,0x0                                                                                        
001b16   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\MCC18\src\traditional\stdclib\vfprintf.c
001b18   cfdb     MOVFF     0xfdb,0xff6                                                                                     
001b1a   fff6                                                                                                               
001b1c   0e0f     MOVLW     0xf                                                                                             
001b1e   cfdb     MOVFF     0xfdb,0xff7                                                                                     
001b20   fff7                                                                                                               
001b22   0e10     MOVLW     0x10                                                                                            
001b24   cfdb     MOVFF     0xfdb,0xff8                                                                                     
001b26   fff8                                                                                                               
001b28   0008     TBLRD                                                                                                     
001b2a   50f5     MOVF      0xf5,0x0,0x0                                                                                    
001b2c   6edf     MOVWF     0xdf,0x0                                                                                        
001b2e   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b30   e014     BZ        0x1b5a                                                                                          
001b32   ecc7     CALL      0x238e,0x0                                                                                      
001b34   f011                                                                                                               
001b36   e211     BC        0x1b5a                                                                                          
001b4e   50d9     MOVF      0xd9,0x0,0x0                                                                                    
001b50   0f0e     ADDLW     0xe                                                                                             
001b52   6ee9     MOVWF     0xe9,0x0                                                                                        
001b54   0e00     MOVLW     0x0                                                                                             
001b56   dbcb     RCALL     0x22ee                                                                                          
001b58   d7e7     BRA       0x1b28                                                                                          
00238e   0e04     MOVLW     0x4                                                                                             
002390   50db     MOVF      0xdb,0x0,0x0                                                                                    
002392   6ef3     MOVWF     0xf3,0x0                                                                                        
002394   0e09     MOVLW     0x9                                                                                             
002396   efaa     GOTO      0x2154                                                                                          
002398   f010                                                                                                               
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001b38   ecd6     CALL      0x23ac,0x0                       if (putc (c, handle) == EOF)                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001b3a   f011                                                                                                               
001b3c   e103     BNZ       0x1b44                                                                                          
001b3e   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001b40   e101     BNZ       0x1b44                                                                                          
001b42   d2bc     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001b44   dbbb     RCALL     0x22bc                           ++count;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001b46   e301     BNC       0x1b4a                                                                                          
001b48   2adb     INCF      0xdb,0x1,0x0                                                                                    
001b4a   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001b4c   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001b5a   dad3     RCALL     0x2102                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001b5c   e101     BNZ       0x1b60                                                                                          
001b5e   d2b4     BRA       0x20c8                                                                                          
001b60   d2ad     BRA       0x20bc                         return EOF;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 's':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001b62   dac6     RCALL     0x20f0                       ramstring = va_arg (ap, char *);                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001b64   0e11     MOVLW     0x11                                                                                            
001b66   cfee     MOVFF     0xfee,0xfdb                                                                                     
001b68   ffdb                                                                                                               
001b6a   0e12     MOVLW     0x12                                                                                            
001b6c   cfed     MOVFF     0xfed,0xfdb                                                                                     
001b6e   ffdb                                                                                                               
001b70   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001b72   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001b74   ffe6                                                                                                               
001b76   0e12     MOVLW     0x12                                                                                            
001b78   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001b7a   ffe6                                                                                                               
001b7c   ec57     CALL      0x34ae,0x0                                                                                      
001b7e   f01a                                                                                                               
001b80   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b82   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b84   0e13     MOVLW     0x13                                                                                            
001b86   cff3     MOVFF     0xff3,0xfdb                                                                                     
001b88   ffdb                                                                                                               
001b8a   0e14     MOVLW     0x14                                                                                            
001b8c   cff4     MOVFF     0xff4,0xfdb                                                                                     
001b8e   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001b90   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\traditional\stdclib\vfprintf.c
001b92   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b94   e004     BZ        0x1b9e                                                                                          
001b96   0e13     MOVLW     0x13                                                                                            
001b98   dbd0     RCALL     0x233a                                                                                          
001b9a   e201     BC        0x1b9e                                                                                          
001b9c   db0e     RCALL     0x21ba                         n = precision;                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001b9e   ecc1     CALL      0x2382,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001ba0   f011                                                                                                               
001ba2   e202     BC        0x1ba8                                                                                          
001ba4   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001ba6   dadb     RCALL     0x215e                                                                                          
001ba8   dbaf     RCALL     0x2308                       space_cnt = width - (unsigned char) n;                             C:\MCC18\src\traditional\stdclib\vfprintf.c
00224c   6ee7     MOVWF     0xe7,0x0                                                                                        
00224e   0e08     MOVLW     0x8                                                                                             
002250   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002252   ffdb                                                                                                               
002254   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001baa   e005     BZ        0x1bb6                       if (have_precision && precision < width)                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001bac   0e04     MOVLW     0x4                                                                                             
001bae   dbc5     RCALL     0x233a                                                                                          
001bb0   e202     BC        0x1bb6                                                                                          
00233a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00233c   6ef3     MOVWF     0xf3,0x0                                                                                        
00233e   0e05     MOVLW     0x5                                                                                             
002340   efaa     GOTO      0x2154                                                                                          
002342   f010                                                                                                               
001bb2   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001bb4   dad4     RCALL     0x215e                                                                                          
00215e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002160   6ee7     MOVWF     0xe7,0x0                                                                                        
002162   0e04     MOVLW     0x4                                                                                             
002164   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002166   ffdb                                                                                                               
002168   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001bb6   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001bb8   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
001bba   d005     BRA       0x1bc6                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001bbc   daa2     RCALL     0x2102                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001bbe   e001     BZ        0x1bc2                                                                                          
001bc0   d27d     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001bc2   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001bc4   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001bc6   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001bc8   6adb     CLRF      0xdb,0x0                                                                                        
001bca   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\MCC18\src\traditional\stdclib\vfprintf.c
001bcc   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001bce   ffe9                                                                                                               
001bd0   0e12     MOVLW     0x12                                                                                            
001bd2   cfdb     MOVFF     0xfdb,0xfea                                                                                     
001bd4   ffea                                                                                                               
001bd6   cfef     MOVFF     0xfef,0xfdf                                                                                     
001bd8   ffdf                                                                                                               
001bda   50df     MOVF      0xdf,0x0,0x0                                                                                    
001bdc   e014     BZ        0x1c06                                                                                          
001bde   dbd7     RCALL     0x238e                                                                                          
001be0   e212     BC        0x1c06                                                                                          
001bf6   0e11     MOVLW     0x11                                                                                            
001bf8   2adb     INCF      0xdb,0x1,0x0                                                                                    
001bfa   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001bfc   ffe9                                                                                                               
001bfe   0e12     MOVLW     0x12                                                                                            
001c00   e3e8     BNC       0x1bd2                                                                                          
001c02   2adb     INCF      0xdb,0x1,0x0                                                                                    
001c04   d7e6     BRA       0x1bd2                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001be2   dbe4     RCALL     0x23ac                           if (putc (c, handle) == EOF)                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001be4   e103     BNZ       0x1bec                                                                                          
001be6   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001be8   e101     BNZ       0x1bec                                                                                          
001bea   d268     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001bec   db67     RCALL     0x22bc                           ++count;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001bee   e301     BNC       0x1bf2                                                                                          
001bf0   2adb     INCF      0xdb,0x1,0x0                                                                                    
001bf2   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001bf4   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001c06   da7d     RCALL     0x2102                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001c08   e101     BNZ       0x1c0c                                                                                          
001c0a   d25e     BRA       0x20c8                                                                                          
001c0c   d257     BRA       0x20bc                         return EOF;                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001c0e   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001c10   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001c12   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001c14   04db     DECF      0xdb,0x0,0x0                                                                                    
001c16   e110     BNZ       0x1c38                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001c18   db95     RCALL     0x2344                           larg = va_arg (ap, long int);                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001c1a   0e04     MOVLW     0x4                                                                                             
001c1c   db5a     RCALL     0x22d2                                                                                          
001c1e   0e0a     MOVLW     0xa                                                                                             
001c20   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c22   ffdb                                                                                                               
001c24   0e0b     MOVLW     0xb                                                                                             
001c26   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c28   ffdb                                                                                                               
001c2a   0e0c     MOVLW     0xc                                                                                             
001c2c   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c2e   ffdb                                                                                                               
001c30   0e0d     MOVLW     0xd                                                                                             
001c32   cfee     MOVFF     0xfee,0xfdb                                                                                     
001c34   ffdb                                                                                                               
001c36   d06c     BRA       0x1d10                           goto _do_integer_conversion;                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001c38   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001c3a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c3c   0803     SUBLW     0x3                                                                                             
001c3e   e12c     BNZ       0x1c98                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001c40   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001c42   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001c44   d00d     BRA       0x1c60                                                                                          
001c46   dab2     RCALL     0x21ac                             larg = (signed char) va_arg (ap, int);                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001c48   0e02     MOVLW     0x2                                                                                             
001c4a   da76     RCALL     0x2138                                                                                          
001c4c   cfef     MOVFF     0xfef,0x2a                                                                                      
001c4e   f02a                                                                                                               
001c50   6a2b     CLRF      0x2b,0x0                                                                                        
001c52   6a2c     CLRF      0x2c,0x0                                                                                        
001c54   6a2d     CLRF      0x2d,0x0                                                                                        
001c56   ae2a     BTFSS     0x2a,0x7,0x0                                                                                    
001c58   d039     BRA       0x1ccc                                                                                          
001c5a   682b     SETF      0x2b,0x0                                                                                        
001c5c   682c     SETF      0x2c,0x0                                                                                        
001c5e   d035     BRA       0x1cca                           else                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001c60   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\MCC18\src\traditional\stdclib\vfprintf.c
001c62   cfdb     MOVFF     0xfdb,0x2b                                                                                      
001c64   f02b                                                                                                               
001c66   0ef8     MOVLW     0xf8                                                                                            
001c68   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001c6a   f02c                                                                                                               
001c6c   0e02     MOVLW     0x2                                                                                             
001c6e   5e2b     SUBWF     0x2b,0x1,0x0                                                                                    
001c70   0e00     MOVLW     0x0                                                                                             
001c72   5a2c     SUBWFB    0x2c,0x1,0x0                                                                                    
001c74   0ef7     MOVLW     0xf7                                                                                            
001c76   c02b     MOVFF     0x2b,0xfdb                                                                                      
001c78   ffdb                                                                                                               
001c7a   0ef8     MOVLW     0xf8                                                                                            
001c7c   c02c     MOVFF     0x2c,0xfdb                                                                                      
001c7e   ffdb                                                                                                               
001c80   c02b     MOVFF     0x2b,0xfe9                                                                                      
001c82   ffe9                                                                                                               
001c84   c02c     MOVFF     0x2c,0xfea                                                                                      
001c86   ffea                                                                                                               
001c88   cfef     MOVFF     0xfef,0x2a                                                                                      
001c8a   f02a                                                                                                               
001c8c   0e0a     MOVLW     0xa                                                                                             
001c8e   c02a     MOVFF     0x2a,0xfdb                                                                                      
001c90   ffdb                                                                                                               
001c92   0e0b     MOVLW     0xb                                                                                             
001c94   6adb     CLRF      0xdb,0x0                                                                                        
001c96   d038     BRA       0x1d08                           goto _do_integer_conversion;                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001c98   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001c9a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c9c   0802     SUBLW     0x2                                                                                             
001c9e   e109     BNZ       0x1cb2                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001ca0   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001ca2   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001ca4   d004     BRA       0x1cae                                                                                          
001ca6   db59     RCALL     0x235a                             larg = va_arg (ap, short long int);                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001ca8   ae2c     BTFSS     0x2c,0x7,0x0                                                                                    
001caa   d010     BRA       0x1ccc                                                                                          
002256   cfee     MOVFF     0xfee,0x2a                                                                                      
002258   f02a                                                                                                               
00225a   cfee     MOVFF     0xfee,0x2b                                                                                      
00225c   f02b                                                                                                               
00225e   cfef     MOVFF     0xfef,0x2c                                                                                      
002260   f02c                                                                                                               
002262   6a2d     CLRF      0x2d,0x0                                                                                        
002264   0012     RETURN    0x0                                                                                             
00235a   df28     RCALL     0x21ac                                                                                          
00235c   0e03     MOVLW     0x3                                                                                             
00235e   deec     RCALL     0x2138                                                                                          
002360   ef2b     GOTO      0x2256                                                                                          
002362   f011                                                                                                               
001cac   d00e     BRA       0x1cca                           else                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001cae   db55     RCALL     0x235a                             larg = va_arg (ap, unsigned short long int);                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001cb0   d00d     BRA       0x1ccc                       else if (flags & _FLAG_SIGNED)                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001cb2   0e03     MOVLW     0x3                                                                                             
001cb4   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
001cb6   d012     BRA       0x1cdc                                                                                          
001cb8   da79     RCALL     0x21ac                         larg = va_arg (ap, int);                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001cba   0e02     MOVLW     0x2                                                                                             
001cbc   da3d     RCALL     0x2138                                                                                          
001cbe   daf9     RCALL     0x22b2                                                                                          
001cc0   6a2c     CLRF      0x2c,0x0                                                                                        
001cc2   6a2d     CLRF      0x2d,0x0                                                                                        
001cc4   ae2b     BTFSS     0x2b,0x7,0x0                                                                                    
001cc6   d002     BRA       0x1ccc                                                                                          
001cc8   682c     SETF      0x2c,0x0                                                                                        
001cca   682d     SETF      0x2d,0x0                                                                                        
001ccc   dae2     RCALL     0x2292                                                                                          
001cce   0e0c     MOVLW     0xc                                                                                             
001cd0   c02c     MOVFF     0x2c,0xfdb                                                                                      
001cd2   ffdb                                                                                                               
001cd4   0e0d     MOVLW     0xd                                                                                             
001cd6   c02d     MOVFF     0x2d,0xfdb                                                                                      
001cd8   ffdb                                                                                                               
002138   5e2e     SUBWF     0x2e,0x1,0x0                                                                                    
00213a   0e00     MOVLW     0x0                                                                                             
00213c   5a2f     SUBWFB    0x2f,0x1,0x0                                                                                    
00213e   0ef7     MOVLW     0xf7                                                                                            
002140   c02e     MOVFF     0x2e,0xfdb                                                                                      
002142   ffdb                                                                                                               
002144   0ef8     MOVLW     0xf8                                                                                            
002146   c02f     MOVFF     0x2f,0xfdb                                                                                      
002148   ffdb                                                                                                               
00214a   c02e     MOVFF     0x2e,0xfe9                                                                                      
00214c   ffe9                                                                                                               
00214e   c02f     MOVFF     0x2f,0xfea                                                                                      
002150   ffea                                                                                                               
002152   0012     RETURN    0x0                                                                                             
0021ac   0ef7     MOVLW     0xf7                                                                                            
0021ae   cfdb     MOVFF     0xfdb,0x2e                                                                                      
0021b0   f02e                                                                                                               
0021b2   0ef8     MOVLW     0xf8                                                                                            
0021b4   cfdb     MOVFF     0xfdb,0x2f                                                                                      
0021b6   f02f                                                                                                               
0021b8   0012     RETURN    0x0                                                                                             
002292   0e0a     MOVLW     0xa                                                                                             
002294   c02a     MOVFF     0x2a,0xfdb                                                                                      
002296   ffdb                                                                                                               
002298   0e0b     MOVLW     0xb                                                                                             
00229a   c02b     MOVFF     0x2b,0xfdb                                                                                      
00229c   ffdb                                                                                                               
00229e   0012     RETURN    0x0                                                                                             
0022b2   cfee     MOVFF     0xfee,0x2a                                                                                      
0022b4   f02a                                                                                                               
0022b6   cfef     MOVFF     0xfef,0x2b                                                                                      
0022b8   f02b                                                                                                               
0022ba   0012     RETURN    0x0                                                                                             
001cda   d01a     BRA       0x1d10                       else                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001cdc   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001cde   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001ce0   f02c                                                                                                               
001ce2   0ef8     MOVLW     0xf8                                                                                            
001ce4   cfdb     MOVFF     0xfdb,0x2d                                                                                      
001ce6   f02d                                                                                                               
001ce8   0e02     MOVLW     0x2                                                                                             
001cea   5e2c     SUBWF     0x2c,0x1,0x0                                                                                    
001cec   0e00     MOVLW     0x0                                                                                             
001cee   5a2d     SUBWFB    0x2d,0x1,0x0                                                                                    
001cf0   0ef7     MOVLW     0xf7                                                                                            
001cf2   c02c     MOVFF     0x2c,0xfdb                                                                                      
001cf4   ffdb                                                                                                               
001cf6   0ef8     MOVLW     0xf8                                                                                            
001cf8   c02d     MOVFF     0x2d,0xfdb                                                                                      
001cfa   ffdb                                                                                                               
001cfc   c02c     MOVFF     0x2c,0xfe9                                                                                      
001cfe   ffe9                                                                                                               
001d00   c02d     MOVFF     0x2d,0xfea                                                                                      
001d02   ffea                                                                                                               
001d04   dad6     RCALL     0x22b2                                                                                          
001d06   dac5     RCALL     0x2292                                                                                          
001d08   0e0c     MOVLW     0xc                                                                                             
001d0a   6adb     CLRF      0xdb,0x0                                                                                        
001d0c   0e0d     MOVLW     0xd                                                                                             
001d0e   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001d10   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001d12   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d14   e105     BNZ       0x1d20                                                                                          
001d16   0e01     MOVLW     0x1                            precision = 1;                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001d18   6ef3     MOVWF     0xf3,0x0                                                                                        
001d1a   0e05     MOVLW     0x5                                                                                             
001d1c   cff3     MOVFF     0xff3,0xfdb                                                                                     
001d1e   ffdb                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         {                                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001d20   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001d22   6adb     CLRF      0xdb,0x0                                                                                        
001d24   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001d26   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\MCC18\src\traditional\stdclib\vfprintf.c
001d28   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001d2a   0f37     ADDLW     0x37                                                                                            
001d2c   6e2a     MOVWF     0x2a,0x0                                                                                        
001d2e   0e00     MOVLW     0x0                                                                                             
001d30   20da     ADDWFC    0xda,0x0,0x0                                                                                    
001d32   6e2b     MOVWF     0x2b,0x0                                                                                        
001d34   0e39     MOVLW     0x39                                                                                            
001d36   c02a     MOVFF     0x2a,0xfdb                                                                                      
001d38   ffdb                                                                                                               
001d3a   0e3a     MOVLW     0x3a                                                                                            
001d3c   c02b     MOVFF     0x2b,0xfdb                                                                                      
001d3e   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001d40   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001d42   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001d44   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001d46   6adb     CLRF      0xdb,0x0                                                                                        
001d48   0e0a     MOVLW     0xa                            size = 10;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001d4a   daae     RCALL     0x22a8                                                                                          
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001d4c   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001d4e   0a78     XORLW     0x78                                                                                            
001d50   e012     BZ        0x1d76                                                                                          
001d52   0a20     XORLW     0x20                                                                                            
001d54   e010     BZ        0x1d76                                                                                          
001d56   0a28     XORLW     0x28                                                                                            
001d58   e00c     BZ        0x1d72                                                                                          
001d5a   0a20     XORLW     0x20                                                                                            
001d5c   e00a     BZ        0x1d72                                                                                          
001d5e   0a3f     XORLW     0x3f                                                                                            
001d60   e006     BZ        0x1d6e                                                                                          
001d62   0a0d     XORLW     0xd                                                                                             
001d64   e002     BZ        0x1d6a                                                                                          
001d66   0a20     XORLW     0x20                                                                                            
001d68   e108     BNZ       0x1d7a                                                                                          
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001d6a   0e02     MOVLW     0x2                                size = 2;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001d6c   d005     BRA       0x1d78                             break;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001d6e   0e08     MOVLW     0x8                                size = 8;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001d70   d003     BRA       0x1d78                             break;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001d72   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001d74   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001d76   0e10     MOVLW     0x10                               size = 16;                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001d78   da97     RCALL     0x22a8                                                                                          
0022a8   6ef3     MOVWF     0xf3,0x0                                                                                        
0022aa   0e07     MOVLW     0x7                                                                                             
0022ac   cff3     MOVFF     0xff3,0xfdb                                                                                     
0022ae   ffdb                                                                                                               
0022b0   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001d7a   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001d7c   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
001d7e   d002     BRA       0x1d84                                                                                          
001d80   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001d82   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001d84   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001d86   0b80     ANDLW     0x80                                                                                            
001d88   e024     BZ        0x1dd2                                                                                          
001d8a   da8a     RCALL     0x22a0                                                                                          
001d8c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001d8e   0e03     MOVLW     0x3                                                                                             
001d90   50eb     MOVF      0xeb,0x0,0x0                                                                                    
001d92   0a00     XORLW     0x0                                                                                             
001d94   e608     BN        0x1da6                                                                                          
001d96   0e00     MOVLW     0x0                                                                                             
001d98   5cee     SUBWF     0xee,0x0,0x0                                                                                    
001d9a   0e00     MOVLW     0x0                                                                                             
001d9c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001d9e   0e00     MOVLW     0x0                                                                                             
001da0   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001da2   0e00     MOVLW     0x0                                                                                             
001da4   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
001da6   e215     BC        0x1dd2                                                                                          
0022a0   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0022a2   0f0a     ADDLW     0xa                                                                                             
0022a4   efe4     GOTO      0x23c8                                                                                          
0022a6   f011                                                                                                               
0023c8   6ee9     MOVWF     0xe9,0x0                                                                                        
0023ca   0e00     MOVLW     0x0                                                                                             
0023cc   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0023ce   6eea     MOVWF     0xea,0x0                                                                                        
0023d0   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001da8   da13     RCALL     0x21d0                             larg = -(long) larg;                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001daa   6821     SETF      0x21,0x0                                                                                        
001dac   6822     SETF      0x22,0x0                                                                                        
001dae   6823     SETF      0x23,0x0                                                                                        
001db0   6824     SETF      0x24,0x0                                                                                        
001db2   ec1f     CALL      0x343e,0x0                                                                                      
001db4   f01a                                                                                                               
001db6   0e0a     MOVLW     0xa                                                                                             
001db8   c018     MOVFF     0x18,0xfdb                                                                                      
001dba   ffdb                                                                                                               
001dbc   0e0b     MOVLW     0xb                                                                                             
001dbe   c019     MOVFF     0x19,0xfdb                                                                                      
001dc0   ffdb                                                                                                               
001dc2   0e0c     MOVLW     0xc                                                                                             
001dc4   c01a     MOVFF     0x1a,0xfdb                                                                                      
001dc6   ffdb                                                                                                               
001dc8   0e0d     MOVLW     0xd                                                                                             
001dca   c01b     MOVFF     0x1b,0xfdb                                                                                      
001dcc   ffdb                                                                                                               
0021d0   0e0a     MOVLW     0xa                                                                                             
0021d2   cfdb     MOVFF     0xfdb,0x1c                                                                                      
0021d4   f01c                                                                                                               
0021d6   0e0b     MOVLW     0xb                                                                                             
0021d8   cfdb     MOVFF     0xfdb,0x1d                                                                                      
0021da   f01d                                                                                                               
0021dc   0e0c     MOVLW     0xc                                                                                             
0021de   cfdb     MOVFF     0xfdb,0x1e                                                                                      
0021e0   f01e                                                                                                               
0021e2   0e0d     MOVLW     0xd                                                                                             
0021e4   cfdb     MOVFF     0xfdb,0x1f                                                                                      
0021e6   f01f                                                                                                               
0021e8   0012     RETURN    0x0                                                                                             
001dce   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001dd0   d008     BRA       0x1de2                         else if (flags & _FLAG_PLUS)                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001dd2   0e03     MOVLW     0x3                                                                                             
001dd4   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
001dd6   d002     BRA       0x1ddc                                                                                          
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001dd8   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001dda   d003     BRA       0x1de2                         else if (flags & _FLAG_SPACE)                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001ddc   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
001dde   d008     BRA       0x1df0                                                                                          
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001de0   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001de2   6ef3     MOVWF     0xf3,0x0                                                                                        
001de4   0e17     MOVLW     0x17                                                                                            
001de6   cff3     MOVFF     0xff3,0xfdb                                                                                     
001de8   ffdb                                                                                                               
001dea   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001dec   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001dee   d002     BRA       0x1df4                         else                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001df0   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001df2   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001df4   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001df6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001df8   e103     BNZ       0x1e00                                                                                          
001dfa   d9b7     RCALL     0x216a                                                                                          
001dfc   e101     BNZ       0x1e00                                                                                          
001dfe   d089     BRA       0x1f12                                                                                          
00216a   0e0a     MOVLW     0xa                                                                                             
00216c   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00216e   f02a                                                                                                               
002170   0e0b     MOVLW     0xb                                                                                             
002172   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002174   f02b                                                                                                               
002176   0e0c     MOVLW     0xc                                                                                             
002178   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00217a   f02c                                                                                                               
00217c   0e0d     MOVLW     0xd                                                                                             
00217e   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002180   f02d                                                                                                               
002182   502a     MOVF      0x2a,0x0,0x0                                                                                    
002184   102b     IORWF     0x2b,0x0,0x0                                                                                    
002186   102c     IORWF     0x2c,0x0,0x0                                                                                    
002188   102d     IORWF     0x2d,0x0,0x0                                                                                    
00218a   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                               do                                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                 {                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001e00   0e8c     MOVLW     0x8c                                   cval = s_digits[larg % size];                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001e02   6e2a     MOVWF     0x2a,0x0                                                                                        
001e04   0e36     MOVLW     0x36                                                                                            
001e06   6e2b     MOVWF     0x2b,0x0                                                                                        
001e08   0e00     MOVLW     0x0                                                                                             
001e0a   6e2c     MOVWF     0x2c,0x0                                                                                        
001e0c   0e07     MOVLW     0x7                                                                                             
001e0e   cfdb     MOVFF     0xfdb,0x2d                                                                                      
001e10   f02d                                                                                                               
001e12   6a2e     CLRF      0x2e,0x0                                                                                        
001e14   6a2f     CLRF      0x2f,0x0                                                                                        
001e16   6a30     CLRF      0x30,0x0                                                                                        
001e18   c02d     MOVFF     0x2d,0x21                                                                                       
001e1a   f021                                                                                                               
001e1c   c02e     MOVFF     0x2e,0x22                                                                                       
001e1e   f022                                                                                                               
001e20   c02f     MOVFF     0x2f,0x23                                                                                       
001e22   f023                                                                                                               
001e24   c030     MOVFF     0x30,0x24                                                                                       
001e26   f024                                                                                                               
001e28   d9d3     RCALL     0x21d0                                                                                          
001e2a   ecb0     CALL      0x3560,0x0                                                                                      
001e2c   f01a                                                                                                               
001e2e   502a     MOVF      0x2a,0x0,0x0                                                                                    
001e30   2418     ADDWF     0x18,0x0,0x0                                                                                    
001e32   6ef3     MOVWF     0xf3,0x0                                                                                        
001e34   502b     MOVF      0x2b,0x0,0x0                                                                                    
001e36   2019     ADDWFC    0x19,0x0,0x0                                                                                    
001e38   6ef4     MOVWF     0xf4,0x0                                                                                        
001e3a   502c     MOVF      0x2c,0x0,0x0                                                                                    
001e3c   201a     ADDWFC    0x1a,0x0,0x0                                                                                    
001e3e   6ef8     MOVWF     0xf8,0x0                                                                                        
001e40   cff4     MOVFF     0xff4,0xff7                                                                                     
001e42   fff7                                                                                                               
001e44   cff3     MOVFF     0xff3,0xff6                                                                                     
001e46   fff6                                                                                                               
001e48   0008     TBLRD                                                                                                     
001e4a   0e09     MOVLW     0x9                                                                                             
001e4c   cff5     MOVFF     0xff5,0xfdb                                                                                     
001e4e   ffdb                                                                                                               
001e50   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001e52   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001e54   e10f     BNZ       0x1e74                                                                                          
001e56   0e61     MOVLW     0x61                                                                                            
001e58   6ef3     MOVWF     0xf3,0x0                                                                                        
001e5a   0e09     MOVLW     0x9                                                                                             
001e5c   d97b     RCALL     0x2154                                                                                          
001e5e   e30a     BNC       0x1e74                                                                                          
002154   cfdb     MOVFF     0xfdb,0xff4                                                                                     
002156   fff4                                                                                                               
002158   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00215a   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
00215c   0012     RETURN    0x0                                                                                             
001e60   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\MCC18\src\traditional\stdclib\vfprintf.c
001e62   6e2a     MOVWF     0x2a,0x0                                                                                        
001e64   0e09     MOVLW     0x9                                                                                             
001e66   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001e68   ffe7                                                                                                               
001e6a   502a     MOVF      0x2a,0x0,0x0                                                                                    
001e6c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001e6e   0e09     MOVLW     0x9                                                                                             
001e70   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e72   ffdb                                                                                                               
001e74   0e07     MOVLW     0x7                                    larg /= size;                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001e76   cfdb     MOVFF     0xfdb,0x2a                                                                                      
001e78   f02a                                                                                                               
001e7a   6a2b     CLRF      0x2b,0x0                                                                                        
001e7c   6a2c     CLRF      0x2c,0x0                                                                                        
001e7e   6a2d     CLRF      0x2d,0x0                                                                                        
001e80   da0f     RCALL     0x22a0                                                                                          
001e82   c02a     MOVFF     0x2a,0x21                                                                                       
001e84   f021                                                                                                               
001e86   c02b     MOVFF     0x2b,0x22                                                                                       
001e88   f022                                                                                                               
001e8a   c02c     MOVFF     0x2c,0x23                                                                                       
001e8c   f023                                                                                                               
001e8e   c02d     MOVFF     0x2d,0x24                                                                                       
001e90   f024                                                                                                               
001e92   cfee     MOVFF     0xfee,0x1c                                                                                      
001e94   f01c                                                                                                               
001e96   cfee     MOVFF     0xfee,0x1d                                                                                      
001e98   f01d                                                                                                               
001e9a   cfee     MOVFF     0xfee,0x1e                                                                                      
001e9c   f01e                                                                                                               
001e9e   cfef     MOVFF     0xfef,0x1f                                                                                      
001ea0   f01f                                                                                                               
001ea2   ecb0     CALL      0x3560,0x0                                                                                      
001ea4   f01a                                                                                                               
001ea6   c01f     MOVFF     0x1f,0xfed                                                                                      
001ea8   ffed                                                                                                               
001eaa   c01e     MOVFF     0x1e,0xfed                                                                                      
001eac   ffed                                                                                                               
001eae   c01d     MOVFF     0x1d,0xfed                                                                                      
001eb0   ffed                                                                                                               
001eb2   c01c     MOVFF     0x1c,0xfef                                                                                      
001eb4   ffef                                                                                                               
001eb6   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001eb8   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
001eba   ffe9                                                                                                               
001ebc   06db     DECF      0xdb,0x1,0x0                                                                                    
001ebe   0e3a     MOVLW     0x3a                                                                                            
001ec0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
001ec2   ffea                                                                                                               
001ec4   e201     BC        0x1ec8                                                                                          
001ec6   06db     DECF      0xdb,0x1,0x0                                                                                    
001ec8   0e09     MOVLW     0x9                                                                                             
001eca   cfdb     MOVFF     0xfdb,0xfef                                                                                     
001ecc   ffef                                                                                                               
001ece   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001ed0   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001ed2   d94b     RCALL     0x216a                             while (larg);                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001ed4   e195     BNZ       0x1e00                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001ed6   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001ed8   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
001eda   d01d     BRA       0x1f16                                                                                          
                                                                 {                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001edc   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001ede   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001ee0   e106     BNZ       0x1eee                                                                                          
                                                                     {                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\MCC18\src\traditional\stdclib\vfprintf.c
001ee2   d9c1     RCALL     0x2266                                     if (precision <= digit_cnt)                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001ee4   e318     BNC       0x1f16                                                                                          
002266   0e05     MOVLW     0x5                                                                                             
002268   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00226a   f02a                                                                                                               
00226c   0e15     MOVLW     0x15                                                                                            
00226e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002270   80d8     BSF       0xd8,0x0,0x0                                                                                    
002272   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
002274   0012     RETURN    0x0                                                                                             
001ee6   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001ee8   28db     INCF      0xdb,0x0,0x0                                                                                    
001eea   da5b     RCALL     0x23a2                                                                                          
                                                                     }                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001eec   d014     BRA       0x1f16                                 else if (c == 'x'                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001eee   0e78     MOVLW     0x78                                                                                            
001ef0   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\MCC18\src\traditional\stdclib\vfprintf.c
001ef2   e009     BZ        0x1f06                                                                                          
001ef4   0e58     MOVLW     0x58                                                                                            
001ef6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001ef8   e006     BZ        0x1f06                                                                                          
001efa   0e62     MOVLW     0x62                                                                                            
001efc   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001efe   e003     BZ        0x1f06                                                                                          
001f00   0e42     MOVLW     0x42                                                                                            
001f02   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001f04   e108     BNZ       0x1f16                                                                                          
001f06   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001f08   6ef3     MOVWF     0xf3,0x0                                                                                        
001f0a   0e16     MOVLW     0x16                                                                                            
001f0c   cff3     MOVFF     0xff3,0xfdb                                                                                     
001f0e   ffdb                                                                                                               
                                                                 }                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001f10   d002     BRA       0x1f16                         else                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001f12   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001f14   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              however. */                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001f16   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001f18   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f1a   0b10     ANDLW     0x10                                                                                            
001f1e   0e04     MOVLW     0x4                                                                                             
001f20   cfdb     MOVFF     0xfdb,0x2a                                                                                      
001f22   f02a                                                                                                               
001f24   0e05     MOVLW     0x5                                                                                             
001f26   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f28   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f2a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
001f1c   e00e     BZ        0x1f3a                             && !have_precision)                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001f2c   e206     BC        0x1f3a                                                                                          
001f2e   0e06     MOVLW     0x6                                                                                             
001f30   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f32   e103     BNZ       0x1f3a                                                                                          
001f34   0e04     MOVLW     0x4                              precision = width;                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001f36   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f38   da34     RCALL     0x23a2                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001f3a   d995     RCALL     0x2266                         if (precision > digit_cnt)                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001f3c   e20a     BC        0x1f52                                                                                          
001f3e   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
001f40   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f42   ffe7                                                                                                               
001f44   0e15     MOVLW     0x15                                                                                            
001f46   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f48   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f4a   0e05     MOVLW     0x5                                                                                             
001f4c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f4e   ffdb                                                                                                               
001f50   d002     BRA       0x1f56                         else                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
001f52   0e05     MOVLW     0x5                              precision = 0;                                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001f54   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              zero. */                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001f56   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001f58   cfdb     MOVFF     0xfdb,0x2a                                                                                      
001f5a   f02a                                                                                                               
001f5c   0e16     MOVLW     0x16                                                                                            
001f5e   d945     RCALL     0x21ea                                                                                          
001f60   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f62   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
001f64   e214     BC        0x1f8e                                                                                          
0021ea   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0021ec   ffe6                                                                                                               
0021ee   0e15     MOVLW     0x15                                                                                            
0021f0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0021f2   ffe6                                                                                                               
0021f4   0e05     MOVLW     0x5                                                                                             
0021f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021fa   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0021fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021fe   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
002200   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
001f66   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001f68   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001f6a   ffe6                                                                                                               
001f6c   0e15     MOVLW     0x15                                                                                            
001f6e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001f70   ffe6                                                                                                               
001f72   0e04     MOVLW     0x4                                                                                             
001f74   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001f76   ffe6                                                                                                               
001f78   0e05     MOVLW     0x5                                                                                             
001f7a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f7e   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
001f80   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f82   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f84   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
001f86   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f88   80d8     BSF       0xd8,0x0,0x0                                                                                    
001f8a   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
001f8c   d95f     RCALL     0x224c                                                                                          
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001f8e   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\MCC18\src\traditional\stdclib\vfprintf.c
001f90   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f92   0b01     ANDLW     0x1                                                                                             
001f94   e10b     BNZ       0x1fac                                                                                          
001f96   0e08     MOVLW     0x8                                                                                             
001f98   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f9a   e008     BZ        0x1fac                                                                                          
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001f9c   d8b2     RCALL     0x2102                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001f9e   e001     BZ        0x1fa2                                                                                          
001fa0   d08d     BRA       0x20bc                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001fa2   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
001fa4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fa6   d8be     RCALL     0x2124                                                                                          
001fa8   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001faa   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              next */                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
001fac   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\MCC18\src\traditional\stdclib\vfprintf.c
001fae   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fb0   e007     BZ        0x1fc0                                                                                          
001fb2   d988     RCALL     0x22c4                           if (putc (sign_char, handle) == EOF)                           C:\MCC18\src\traditional\stdclib\vfprintf.c
001fb4   0e17     MOVLW     0x17                                                                                            
001fb6   d9f1     RCALL     0x239a                                                                                          
001fb8   e103     BNZ       0x1fc0                                                                                          
001fba   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001fbc   e101     BNZ       0x1fc0                                                                                          
001fbe   d07e     BRA       0x20bc                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\MCC18\src\traditional\stdclib\vfprintf.c
001fc0   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
001fc2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fc4   e016     BZ        0x1ff2                                                                                          
                                                             {                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
001fc6   d97e     RCALL     0x22c4                             if (putc ('0', handle) == EOF)                               C:\MCC18\src\traditional\stdclib\vfprintf.c
001fc8   0e30     MOVLW     0x30                                                                                            
001fca   6ee6     MOVWF     0xe6,0x0                                                                                        
001fcc   d89f     RCALL     0x210c                                                                                          
001fce   e102     BNZ       0x1fd4                                                                                          
001fd0   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001fd2   e074     BZ        0x20bc                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
001fd4   d977     RCALL     0x22c4                             if (putc (c, handle) == EOF)                                 C:\MCC18\src\traditional\stdclib\vfprintf.c
001fd6   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
001fd8   ffe6                                                                                                               
001fda   ecdd     CALL      0x33ba,0x0                                                                                      
001fdc   f019                                                                                                               
001fde   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001fe0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001fe2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001fe4   cff4     MOVFF     0xff4,0x2b                                                                                      
001fe6   f02b                                                                                                               
001fe8   0100     MOVLB     0x0                                                                                             
001fea   1cf3     COMF      0xf3,0x0,0x0                                                                                    
001fec   e102     BNZ       0x1ff2                                                                                          
001fee   1c2b     COMF      0x2b,0x0,0x0                                                                                    
001ff0   e065     BZ        0x20bc                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\MCC18\src\traditional\stdclib\vfprintf.c
001ff2   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
001ff4   cfdb     MOVFF     0xfdb,0x2a                                                                                      
001ff6   f02a                                                                                                               
001ff8   0e16     MOVLW     0x16                                                                                            
001ffa   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ffc   80d8     BSF       0xd8,0x0,0x0                                                                                    
001ffe   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
002000   e209     BC        0x2014                                                                                          
002002   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
002004   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
002006   ffe7                                                                                                               
002008   0e16     MOVLW     0x16                                                                                            
00200a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00200c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00200e   0e05     MOVLW     0x5                                                                                             
002010   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002012   ffdb                                                                                                               
002014   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\MCC18\src\traditional\stdclib\vfprintf.c
002016   6ee6     MOVWF     0xe6,0x0                                                                                        
002018   0e05     MOVLW     0x5                                                                                             
00201a   d9cb     RCALL     0x23b2                                                                                          
00201c   e14f     BNZ       0x20bc                                                                                          
002364   ecd8     CALL      0x17b0,0x0                                                                                      
002366   f00b                                                                                                               
002368   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00236a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00236c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00236e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002370   0900     IORLW     0x0                                                                                             
002372   0012     RETURN    0x0                                                                                             
0023b2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0023b4   ffe6                                                                                                               
0023b6   df86     RCALL     0x22c4                                                                                          
0023b8   efb2     GOTO      0x2364                                                                                          
0023ba   f011                                                                                                               
                                                             return EOF;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
00201e   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\MCC18\src\traditional\stdclib\vfprintf.c
002020   2adb     INCF      0xdb,0x1,0x0                                                                                    
002022   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002024   ffe9                                                                                                               
002026   0e3a     MOVLW     0x3a                                                                                            
002028   e301     BNC       0x202c                                                                                          
00202a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00202c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00202e   ffea                                                                                                               
002030   0e09     MOVLW     0x9                                                                                             
002032   cfef     MOVFF     0xfef,0xfdb                                                                                     
002034   ffdb                                                                                                               
002036   50db     MOVF      0xdb,0x0,0x0                                                                                    
002038   e00e     BZ        0x2056                                                                                          
002046   0e39     MOVLW     0x39                                                                                            
002048   2adb     INCF      0xdb,0x1,0x0                                                                                    
00204a   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00204c   ffe9                                                                                                               
00204e   0e3a     MOVLW     0x3a                                                                                            
002050   e3ed     BNC       0x202c                                                                                          
002052   2adb     INCF      0xdb,0x1,0x0                                                                                    
002054   d7eb     BRA       0x202c                                                                                          
00203a   d944     RCALL     0x22c4                           if (putc (cval, handle) == EOF)                                C:\MCC18\src\traditional\stdclib\vfprintf.c
00203c   0e09     MOVLW     0x9                                                                                             
00203e   d9ad     RCALL     0x239a                                                                                          
002040   e102     BNZ       0x2046                                                                                          
002042   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002044   e03b     BZ        0x20bc                                                                                          
00239a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00239c   ffe6                                                                                                               
00239e   ef86     GOTO      0x210c                                                                                          
0023a0   f010                                                                                                               
                                                               return EOF;                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                              the field */                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
002056   d855     RCALL     0x2102                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\MCC18\src\traditional\stdclib\vfprintf.c
002058   e131     BNZ       0x20bc                                                                                          
002102   0e20     MOVLW     0x20                                                                                            
002104   6ee6     MOVWF     0xe6,0x0                                                                                        
002106   0e08     MOVLW     0x8                                                                                             
002108   efd9     GOTO      0x23b2                                                                                          
00210a   f011                                                                                                               
0022c4   0efc     MOVLW     0xfc                                                                                            
0022c6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0022c8   ffe6                                                                                                               
0022ca   0efd     MOVLW     0xfd                                                                                            
0022cc   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0022ce   ffe6                                                                                                               
0022d0   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
00205a   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\MCC18\src\traditional\stdclib\vfprintf.c
00205c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00205e   ffe6                                                                                                               
002060   0e08     MOVLW     0x8                                                                                             
002062   d8c3     RCALL     0x21ea                                                                                          
002064   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002066   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
002068   d85d     RCALL     0x2124                                                                                          
002124   6e2a     MOVWF     0x2a,0x0                                                                                        
002126   6a2b     CLRF      0x2b,0x0                                                                                        
002128   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00212a   0f01     ADDLW     0x1                                                                                             
00212c   d94d     RCALL     0x23c8                                                                                          
00212e   502a     MOVF      0x2a,0x0,0x0                                                                                    
002130   26ee     ADDWF     0xee,0x1,0x0                                                                                    
002132   502b     MOVF      0x2b,0x0,0x0                                                                                    
002134   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
002136   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
00206a   d02e     BRA       0x20c8                       break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
00206c   0e07     MOVLW     0x7                          switch (size)                                                      C:\MCC18\src\traditional\stdclib\vfprintf.c
00206e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002070   0a03     XORLW     0x3                                                                                             
002072   e01c     BZ        0x20ac                                                                                          
002074   0a01     XORLW     0x1                                                                                             
002076   e014     BZ        0x20a0                                                                                          
002078   0a03     XORLW     0x3                                                                                             
00207a   e007     BZ        0x208a                                                                                          
                                                           {                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
00208a   d8f5     RCALL     0x2276                           *(long *) va_arg (ap, long *) = count;                         C:\MCC18\src\traditional\stdclib\vfprintf.c
00208c   6a2f     CLRF      0x2f,0x0                                                                                        
00208e   ae2d     BTFSS     0x2d,0x7,0x0                                                                                    
002090   d002     BRA       0x2096                                                                                          
002092   682e     SETF      0x2e,0x0                                                                                        
002094   682f     SETF      0x2f,0x0                                                                                        
002096   d82c     RCALL     0x20f0                                                                                          
002098   d8bc     RCALL     0x2212                                                                                          
00209a   c02f     MOVFF     0x2f,0xfee                                                                                      
00209c   ffee                                                                                                               
002212   50ee     MOVF      0xee,0x0,0x0                                                                                    
002214   cfef     MOVFF     0xfef,0xfea                                                                                     
002216   ffea                                                                                                               
002218   6ee9     MOVWF     0xe9,0x0                                                                                        
00221a   c02c     MOVFF     0x2c,0xfee                                                                                      
00221c   ffee                                                                                                               
00221e   c02d     MOVFF     0x2d,0xfee                                                                                      
002220   ffee                                                                                                               
002222   c02e     MOVFF     0x2e,0xfee                                                                                      
002224   ffee                                                                                                               
002226   0012     RETURN    0x0                                                                                             
002276   0e01     MOVLW     0x1                                                                                             
002278   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00227a   f02c                                                                                                               
00227c   0e02     MOVLW     0x2                                                                                             
00227e   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002280   f02d                                                                                                               
002282   6a2e     CLRF      0x2e,0x0                                                                                        
002284   0012     RETURN    0x0                                                                                             
00209e   d014     BRA       0x20c8                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0020a0   d8ea     RCALL     0x2276                           *(short long *) va_arg (ap, short long *) = count;             C:\MCC18\src\traditional\stdclib\vfprintf.c
0020a2   be2d     BTFSC     0x2d,0x7,0x0                                                                                    
0020a4   682e     SETF      0x2e,0x0                                                                                        
0020a6   d824     RCALL     0x20f0                                                                                          
0020a8   d8b4     RCALL     0x2212                                                                                          
0020aa   d00e     BRA       0x20c8                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
0020ac   d963     RCALL     0x2374                           *(signed char *) va_arg (ap, signed char *) = count;           C:\MCC18\src\traditional\stdclib\vfprintf.c
0020ae   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0020b0   ffef                                                                                                               
0020b2   d00a     BRA       0x20c8                           break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           default:                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
00207c   d97b     RCALL     0x2374                           *(int *) va_arg (ap, int *) = count;                           C:\MCC18\src\traditional\stdclib\vfprintf.c
00207e   cfdb     MOVFF     0xfdb,0xfee                                                                                     
002080   ffee                                                                                                               
002082   0e02     MOVLW     0x2                                                                                             
002084   cfdb     MOVFF     0xfdb,0xfed                                                                                     
002086   ffed                                                                                                               
002374   debd     RCALL     0x20f0                                                                                          
002376   50ee     MOVF      0xee,0x0,0x0                                                                                    
002378   cfef     MOVFF     0xfef,0xfea                                                                                     
00237a   ffea                                                                                                               
00237c   6ee9     MOVWF     0xe9,0x0                                                                                        
00237e   0e01     MOVLW     0x1                                                                                             
002380   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
002088   d01f     BRA       0x20c8                       break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       default:                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                   }                                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                 else                                                                       C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                   {                                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
0020b4   d97b     RCALL     0x23ac                   if (putc (c, handle) == EOF)                                           C:\MCC18\src\traditional\stdclib\vfprintf.c
0020b6   e105     BNZ       0x20c2                                                                                          
0020b8   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0020ba   e103     BNZ       0x20c2                                                                                          
00210c   ecdd     CALL      0x33ba,0x0                                                                                      
00210e   f019                                                                                                               
002110   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002112   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002114   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002116   cff3     MOVFF     0xff3,0x2a                                                                                      
002118   f02a                                                                                                               
00211a   cff4     MOVFF     0xff4,0x2b                                                                                      
00211c   f02b                                                                                                               
00211e   0100     MOVLB     0x0                                                                                             
002120   1cf3     COMF      0xf3,0x0,0x0                                                                                    
002122   0012     RETURN    0x0                                                                                             
002352   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
002354   ffe6                                                                                                               
002356   ef86     GOTO      0x210c                                                                                          
002358   f010                                                                                                               
0023ac   df8b     RCALL     0x22c4                                                                                          
0023ae   efa9     GOTO      0x2352                                                                                          
0023b0   f011                                                                                                               
0020bc   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\MCC18\src\traditional\stdclib\vfprintf.c
0020be   68f4     SETF      0xf4,0x0                                                                                        
0020c0   d010     BRA       0x20e2                                                                                          
0020c2   d8fc     RCALL     0x22bc                   ++count;                                                               C:\MCC18\src\traditional\stdclib\vfprintf.c
0020c4   e301     BNC       0x20c8                                                                                          
0020c6   2adb     INCF      0xdb,0x1,0x0                                                                                    
0022bc   0e01     MOVLW     0x1                                                                                             
0022be   2adb     INCF      0xdb,0x1,0x0                                                                                    
0022c0   0e02     MOVLW     0x2                                                                                             
0022c2   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\MCC18\src\traditional\stdclib\vfprintf.c
                                               }                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\vfprintf.c
0020ce   0e01     MOVLW     0x1              return count;                                                                  C:\MCC18\src\traditional\stdclib\vfprintf.c
0020d0   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0020d2   f02a                                                                                                               
0020d4   0e02     MOVLW     0x2                                                                                             
0020d6   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0020d8   f02b                                                                                                               
0020da   c02a     MOVFF     0x2a,0xff3                                                                                      
0020dc   fff3                                                                                                               
0020de   c02b     MOVFF     0x2b,0xff4                                                                                      
0020e0   fff4                                                                                                               
0020e2   0e3b     MOVLW     0x3b           }                                                                                C:\MCC18\src\traditional\stdclib\vfprintf.c
0020e4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0020e6   e202     BC        0x20ec                                                                                          
0020e8   6ae1     CLRF      0xe1,0x0                                                                                        
0020ea   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0020ec   6ee1     MOVWF     0xe1,0x0                                                                                        
0020ee   d0cb     BRA       0x2286                                                                                          
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\MCC18\src\traditional\math\fxd3232u.c
                                            ***                                                                             C:\MCC18\src\traditional\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\traditional\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\traditional\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\MCC18\src\traditional\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\traditional\math\fxd3232u.c
                                            ***/                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\MCC18\src\traditional\math\fxd3232u.c
                                           {                                                                                C:\MCC18\src\traditional\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                               _asm                                                                         C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                               // REM = 0                                                                   C:\MCC18\src\traditional\math\fxd3232u.c
003560   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
003562   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
003564   6a19     CLRF      0x19,0x0           clrf __REMB2, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
003566   6a18     CLRF      0x18,0x0           clrf __REMB3, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\MCC18\src\traditional\math\fxd3232u.c
003568   0e20     MOVLW     0x20               movlw 32                                                                     C:\MCC18\src\traditional\math\fxd3232u.c
00356a   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                               // Clear the carry                                                           C:\MCC18\src\traditional\math\fxd3232u.c
00356c   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                           loop:                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\MCC18\src\traditional\math\fxd3232u.c
00356e   361c     RLCF      0x1c,0x1,0x0   	rlcf __AARGB3, 1, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003570   361d     RLCF      0x1d,0x1,0x0   	rlcf __AARGB2, 1, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003572   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003574   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\MCC18\src\traditional\math\fxd3232u.c
003576   3618     RLCF      0x18,0x1,0x0   	rlcf __REMB3, 1, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
003578   3619     RLCF      0x19,0x1,0x0   	rlcf __REMB2, 1, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
00357a   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
00357c   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\traditional\math\fxd3232u.c
                                           	                                                                                C:\MCC18\src\traditional\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\MCC18\src\traditional\math\fxd3232u.c
00357e   5021     MOVF      0x21,0x0,0x0   	movf __BARGB3, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003580   5c18     SUBWF     0x18,0x0,0x0   	subwf __REMB3, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003582   5022     MOVF      0x22,0x0,0x0   	movf __BARGB2, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003584   5819     SUBWFB    0x19,0x0,0x0   	subwfb __REMB2, 0, 0                                                            C:\MCC18\src\traditional\math\fxd3232u.c
003586   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
003588   581a     SUBWFB    0x1a,0x0,0x0   	subwfb __REMB1, 0, 0                                                            C:\MCC18\src\traditional\math\fxd3232u.c
00358a   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\traditional\math\fxd3232u.c
00358c   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\traditional\math\fxd3232u.c
00358e   e309     BNC       0x35a2         	bnc _false                                                                      C:\MCC18\src\traditional\math\fxd3232u.c
                                               //{                                                                          C:\MCC18\src\traditional\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\MCC18\src\traditional\math\fxd3232u.c
003590   5021     MOVF      0x21,0x0,0x0   	    movf __BARGB3, 0, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
003592   5e18     SUBWF     0x18,0x1,0x0   	    subwf __REMB3, 1, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
003594   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
003596   5a19     SUBWFB    0x19,0x1,0x0   	    subwfb __REMB2, 1, 0                                                        C:\MCC18\src\traditional\math\fxd3232u.c
003598   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
00359a   5a1a     SUBWFB    0x1a,0x1,0x0   	    subwfb __REMB1, 1, 0                                                        C:\MCC18\src\traditional\math\fxd3232u.c
00359c   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
00359e   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\MCC18\src\traditional\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\MCC18\src\traditional\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\MCC18\src\traditional\math\fxd3232u.c
0035a0   2a1c     INCF      0x1c,0x1,0x0   	    incf __AARGB3, 1, 0                                                         C:\MCC18\src\traditional\math\fxd3232u.c
                                               //}                                                                          C:\MCC18\src\traditional\math\fxd3232u.c
                                           _false:                                                                          C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
0035a2   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\traditional\math\fxd3232u.c
0035a4   d7e4     BRA       0x356e             bra loop                                                                     C:\MCC18\src\traditional\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\traditional\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\traditional\math\fxd3232u.c
                                             _endasm                                                                        C:\MCC18\src\traditional\math\fxd3232u.c
0035a6   0012     RETURN    0x0            }                                                                                C:\MCC18\src\traditional\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\src\traditional\math\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\CMATH18.INC
                                               LIST                                                                         C:\MCC18\src\traditional\math\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\src\traditional\math\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\math\CMATH18.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\AARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\AARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\src\traditional\math\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\src\traditional\math\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\src\traditional\math\AARG.INC
                                           	                                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\src\traditional\math\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\src\traditional\math\BARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\src\traditional\math\TEMPARG.INC
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\src\traditional\math\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
00315c   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0                                                        C:\MCC18\src\traditional\math\fxm1616s.asm
00315e   f029                                                                                                               
003160   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\src\traditional\math\fxm1616s.asm
003162   f028                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
003164   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
003166   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\src\traditional\math\fxm1616s.asm
003168   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\src\traditional\math\fxm1616s.asm
00316a   f01d                                                                                                               
00316c   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\src\traditional\math\fxm1616s.asm
00316e   f01c                                                                                                               
                                           		                                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
003170   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
003172   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\src\traditional\math\fxm1616s.asm
003174   cff4     MOVFF     0xff4,0x1f     		MOVFF	PRODH,__AARGB0                                                           C:\MCC18\src\traditional\math\fxm1616s.asm
003176   f01f                                                                                                               
003178   cff3     MOVFF     0xff3,0x1e     		MOVFF	PRODL,__AARGB1                                                           C:\MCC18\src\traditional\math\fxm1616s.asm
00317a   f01e                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
00317c   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\src\traditional\math\fxm1616s.asm
00317e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm1616s.asm
003180   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
003182   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm1616s.asm
003184   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
003186   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm1616s.asm
003188   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
00318a   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
00318c   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\src\traditional\math\fxm1616s.asm
00318e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\src\traditional\math\fxm1616s.asm
003190   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
003192   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\src\traditional\math\fxm1616s.asm
003194   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
003196   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\src\traditional\math\fxm1616s.asm
003198   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
00319a   ae24     BTFSS     0x24,0x7,0x0   		BTFSS	__BARGB0,MSB                                                             C:\MCC18\src\traditional\math\fxm1616s.asm
00319c   efd4     GOTO      0x31a8         		GOTO	TSIGN1616A                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
00319e   f018                                                                                                               
0031a0   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
0031a2   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
0031a4   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
0031a6   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\src\traditional\math\fxm1616s.asm
0031a8   ae29     BTFSS     0x29,0x7,0x0   		BTFSS	__TEMPB0,MSB                                                             C:\MCC18\src\traditional\math\fxm1616s.asm
0031aa   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\src\traditional\math\fxm1616s.asm
0031ac   5023     MOVF      0x23,0x0,0x0   		MOVF	__BARGB1,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
0031ae   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
0031b0   5024     MOVF      0x24,0x0,0x0   		MOVF	__BARGB0,W                                                                C:\MCC18\src\traditional\math\fxm1616s.asm
0031b2   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\src\traditional\math\fxm1616s.asm
                                           		                                                                               C:\MCC18\src\traditional\math\fxm1616s.asm
0031b4   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\src\traditional\math\fxm1616s.asm
                                                                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           		END                                                                            C:\MCC18\src\traditional\math\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\MCC18\src\traditional\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\MCC18\src\traditional\math\fxm3232.c
                                            * don't.                                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                            */                                                                              C:\MCC18\src\traditional\math\fxm3232.c
                                                                                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                                                                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                           extern near unsigned char __AARGB3, __BARGB3;                                    C:\MCC18\src\traditional\math\fxm3232.c
                                           extern near unsigned char __AARGB7;                                              C:\MCC18\src\traditional\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\MCC18\src\traditional\math\fxm3232.c
                                           {                                                                                C:\MCC18\src\traditional\math\fxm3232.c
                                             _asm                                                                           C:\MCC18\src\traditional\math\fxm3232.c
00343e   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\traditional\math\fxm3232.c
003440   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\MCC18\src\traditional\math\fxm3232.c
                                               // result bytes                                                              C:\MCC18\src\traditional\math\fxm3232.c
003442   cff3     MOVFF     0xff3,0x18         movff PRODL, __AARGB7                                                        C:\MCC18\src\traditional\math\fxm3232.c
003444   f018                                                                                                               
003446   cff4     MOVFF     0xff4,0x19         movff PRODH, __AARGB7 + 1                                                    C:\MCC18\src\traditional\math\fxm3232.c
003448   f019                                                                                                               
                                               // W still contains AARGB3                                                   C:\MCC18\src\traditional\math\fxm3232.c
00344a   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\traditional\math\fxm3232.c
00344c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
00344e   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
003450   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\traditional\math\fxm3232.c
003452   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\traditional\math\fxm3232.c
003454   6e1a     MOVWF     0x1a,0x0           movwf __AARGB7 + 2, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\traditional\math\fxm3232.c
003456   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\traditional\math\fxm3232.c
003458   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\MCC18\src\traditional\math\fxm3232.c
00345a   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
00345c   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
00345e   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\traditional\math\fxm3232.c
003460   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\traditional\math\fxm3232.c
003462   6e1b     MOVWF     0x1b,0x0           movwf __AARGB7 + 3, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\traditional\math\fxm3232.c
003464   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\traditional\math\fxm3232.c
003466   0224     MULWF     0x24,0x0           mulwf __BARGB3 + 3, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\MCC18\src\traditional\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\traditional\math\fxm3232.c
003468   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
00346a   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\MCC18\src\traditional\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\MCC18\src\traditional\math\fxm3232.c
00346c   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
00346e   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\traditional\math\fxm3232.c
003470   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
003472   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
003474   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
003476   221a     ADDWFC    0x1a,0x1,0x0       addwfc __AARGB7 + 2, 1, 0                                                    C:\MCC18\src\traditional\math\fxm3232.c
003478   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\traditional\math\fxm3232.c
00347a   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\traditional\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\traditional\math\fxm3232.c
00347c   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
00347e   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\MCC18\src\traditional\math\fxm3232.c
003480   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
003482   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
003484   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
003486   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\traditional\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\traditional\math\fxm3232.c
003488   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
00348a   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\MCC18\src\traditional\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\traditional\math\fxm3232.c
00348c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
00348e   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\MCC18\src\traditional\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\traditional\math\fxm3232.c
                                               // that term.                                                                C:\MCC18\src\traditional\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\MCC18\src\traditional\math\fxm3232.c
003490   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
003492   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\MCC18\src\traditional\math\fxm3232.c
003494   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
003496   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
003498   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
00349a   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\traditional\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\MCC18\src\traditional\math\fxm3232.c
00349c   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
00349e   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\MCC18\src\traditional\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\traditional\math\fxm3232.c
0034a0   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
0034a2   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\MCC18\src\traditional\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\traditional\math\fxm3232.c
                                               // those terms.                                                              C:\MCC18\src\traditional\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\MCC18\src\traditional\math\fxm3232.c
0034a4   501f     MOVF      0x1f,0x0,0x0       movf __AARGB3 + 3, 0, 0                                                      C:\MCC18\src\traditional\math\fxm3232.c
0034a6   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\MCC18\src\traditional\math\fxm3232.c
0034a8   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\traditional\math\fxm3232.c
0034aa   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\traditional\math\fxm3232.c
                                                                                                                            C:\MCC18\src\traditional\math\fxm3232.c
                                               _endasm;                                                                     C:\MCC18\src\traditional\math\fxm3232.c
0034ac   0012     RETURN    0x0            }                                                                                C:\MCC18\src\traditional\math\fxm3232.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           isdigit                                                                          C:\MCC18\src\traditional\stdclib\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\src\traditional\stdclib\isdigit.asm
00353c   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\src\traditional\stdclib\isdigit.asm
00353e   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           	                                                                                C:\MCC18\src\traditional\stdclib\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\src\traditional\stdclib\isdigit.asm
003540   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\src\traditional\stdclib\isdigit.asm
003542   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
003544   6ee9     MOVWF     0xe9,0x0                                                                                        
003546   0eff     MOVLW     0xff                                                                                            
003548   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
00354a   6eea     MOVWF     0xea,0x0                                                                                        
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
00354c   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\src\traditional\stdclib\isdigit.asm
00354e   d007     BRA       0x355e                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
003550   0e2f     MOVLW     0x2f                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\src\traditional\stdclib\isdigit.asm
003552   64ef     CPFSGT    0xef,0x0                                                                                        
003554   d004     BRA       0x355e                                                                                          
003556   0e3a     MOVLW     0x3a                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\src\traditional\stdclib\isdigit.asm
003558   60ef     CPFSLT    0xef,0x0                                                                                        
00355a   d001     BRA       0x355e                                                                                          
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\src\traditional\stdclib\isdigit.asm
00355c   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\src\traditional\stdclib\isdigit.asm
00355e   0012     RETURN    0x0                      return                                                                 C:\MCC18\src\traditional\stdclib\isdigit.asm
                                             end                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\isdigit.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\traditional\stdclib\putc.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\MCC18\src\traditional\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\MCC18\src\traditional\stdclib\putc.c
                                                                                                                            C:\MCC18\src\traditional\stdclib\putc.c
                                           int                                                                              C:\MCC18\src\traditional\stdclib\putc.c
0033ba   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\MCC18\src\traditional\stdclib\putc.c
0033bc   ffe6                                                                                                               
0033be   cfda     MOVFF     0xfda,0xfe6                                                                                     
0033c0   ffe6                                                                                                               
0033c2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0033c4   ffd9                                                                                                               
0033c6   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0033c8   ffda                                                                                                               
                                           {                                                                                C:\MCC18\src\traditional\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\MCC18\src\traditional\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\MCC18\src\traditional\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\MCC18\src\traditional\stdclib\putc.c
0033ca   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\MCC18\src\traditional\stdclib\putc.c
0033cc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0033ce   f02a                                                                                                               
0033d0   0efc     MOVLW     0xfc                                                                                            
0033d2   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0033d4   f02b                                                                                                               
0033d6   0100     MOVLB     0x0                                                                                             
0033d8   0e80     MOVLW     0x80                                                                                            
0033da   142b     ANDWF     0x2b,0x0,0x0                                                                                    
0033dc   e11a     BNZ       0x3412                                                                                          
0033de   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\MCC18\src\traditional\stdclib\putc.c
0033e0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0033e2   ffe9                                                                                                               
0033e4   0efc     MOVLW     0xfc                                                                                            
0033e6   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0033e8   ffea                                                                                                               
0033ea   cfee     MOVFF     0xfee,0xff3                                                                                     
0033ec   fff3                                                                                                               
0033ee   cfed     MOVFF     0xfed,0xff4                                                                                     
0033f0   fff4                                                                                                               
0033f2   2aee     INCF      0xee,0x1,0x0                                                                                    
0033f4   0e00     MOVLW     0x0                                                                                             
0033f6   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0033f8   cff3     MOVFF     0xff3,0xfe9                                                                                     
0033fa   ffe9                                                                                                               
0033fc   cff4     MOVFF     0xff4,0xfea                                                                                     
0033fe   ffea                                                                                                               
003400   0efd     MOVLW     0xfd                                                                                            
003402   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003404   ffef                                                                                                               
003406   50ef     MOVF      0xef,0x0,0x0                                                                                    
003408   6a2b     CLRF      0x2b,0x0                                                                                        
00340a   6ef3     MOVWF     0xf3,0x0                                                                                        
00340c   c02b     MOVFF     0x2b,0xff4                                                                                      
00340e   fff4                                                                                                               
003410   d010     BRA       0x3432                                                                                          
                                                                                                                            C:\MCC18\src\traditional\stdclib\putc.c
003412   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\MCC18\src\traditional\stdclib\putc.c
003414   50db     MOVF      0xdb,0x0,0x0                                                                                    
003416   08fe     SUBLW     0xfe                                                                                            
003418   e106     BNZ       0x3426                                                                                          
                                               {                                                                            C:\MCC18\src\traditional\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\MCC18\src\traditional\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\MCC18\src\traditional\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\MCC18\src\traditional\stdclib\putc.c
00341a   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\MCC18\src\traditional\stdclib\putc.c
00341c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00341e   ffe6                                                                                                               
003420   ec2c     CALL      0x3658,0x0                                                                                      
003422   f01b                                                                                                               
003424   d005     BRA       0x3430                                                                                          
                                               }                                                                            C:\MCC18\src\traditional\stdclib\putc.c
                                             else                                                                           C:\MCC18\src\traditional\stdclib\putc.c
                                               {                                                                            C:\MCC18\src\traditional\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\MCC18\src\traditional\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\MCC18\src\traditional\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\MCC18\src\traditional\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\MCC18\src\traditional\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\MCC18\src\traditional\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\MCC18\src\traditional\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\MCC18\src\traditional\stdclib\putc.c
                                                    function pointer. */                                                    C:\MCC18\src\traditional\stdclib\putc.c
003426   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\MCC18\src\traditional\stdclib\putc.c
003428   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00342a   ffe6                                                                                                               
00342c   ec54     CALL      0xea8,0x0                                                                                       
00342e   f007                                                                                                               
003430   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\MCC18\src\traditional\stdclib\putc.c
003432   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\MCC18\src\traditional\stdclib\putc.c
003434   cfe5     MOVFF     0xfe5,0xfda                                                                                     
003436   ffda                                                                                                               
003438   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00343a   ffd9                                                                                                               
00343c   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1230                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1231                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1330                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __18F1331                                                                 C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\src\pmc_common\USART\_usartpc.asm
003658   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\src\pmc_common\USART\_usartpc.asm
00365a   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\src\pmc_common\USART\_usartpc.asm
00365c   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
00365e   d004     BRA       0x3668                       BRA       loop                                                     C:\MCC18\src\pmc_common\USART\_usartpc.asm
003660   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\src\pmc_common\USART\_usartpc.asm
003662   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
003664   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
003666   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\src\pmc_common\USART\_usartpc.asm
003668   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\src\pmc_common\USART\_usartpc.asm
00366a   d7fe     BRA       0x3668                       BRA       loop                                                     C:\MCC18\src\pmc_common\USART\_usartpc.asm
00366c   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\src\pmc_common\USART\_usartpc.asm
00366e   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\src\pmc_common\USART\_usartpc.asm
003670   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
003672   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                                                                                                            C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\src\pmc_common\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\src\traditional\stdclib\strlen.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\src\traditional\stdclib\strlen.asm
                                           strlen                                                                           C:\MCC18\src\traditional\stdclib\strlen.asm
                                             global strlen                                                                  C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
0034ae   0efe     MOVLW     0xfe                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\src\traditional\stdclib\strlen.asm
0034b0   cfe3     MOVFF     0xfe3,0xfe9                                                                                     
0034b2   ffe9                                                                                                               
0034b4   0eff     MOVLW     0xff                                                                                            
0034b6   cfe3     MOVFF     0xfe3,0xfea                                                                                     
0034b8   ffea                                                                                                               
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\src\traditional\stdclib\strlen.asm
0034ba   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\src\traditional\stdclib\strlen.asm
0034bc   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\src\traditional\stdclib\strlen.asm
                                           jLoop:                                                                           C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\src\traditional\stdclib\strlen.asm
0034be   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\src\traditional\stdclib\strlen.asm
0034c0   e003     BZ        0x34c8                   bz        jEnd                                                         C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                             ; Count it                                                                     C:\MCC18\src\traditional\stdclib\strlen.asm
0034c2   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\src\traditional\stdclib\strlen.asm
0034c4   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
0034c6   d7fb     BRA       0x34be                   bra       jLoop                                                        C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           jEnd                                                                             C:\MCC18\src\traditional\stdclib\strlen.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
0034c8   0012     RETURN    0x0                      return                                                                 C:\MCC18\src\traditional\stdclib\strlen.asm
                                             end                                                                            C:\MCC18\src\traditional\stdclib\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.4 2006/02/04 00:06:53 nairnj Exp $                        C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\mpasm\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\mpasm\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\mpasm\P18C452.INC
                                                   LIST                                                                     C:\MCC18\mpasm\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8393                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8393.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8493                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8493.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L13K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L13K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                             IFDEF __18L14K50                                                               C:\MCC18\mpasm\P18CXXX.INC
                                                INCLUDE <p18L14K50.INC>                                                     C:\MCC18\mpasm\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\mpasm\P18CXXX.INC
                                                                                                                            C:\MCC18\mpasm\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                            endm                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\P18MACRO.INC
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ;                                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             extern __AARGB2                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                     return                                                                 C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #else                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034ca   0eff     MOVLW     0xff                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034cc   cfe3     MOVFF     0xfe3,0xff8                                                                                     
0034ce   fff8                                                                                                               
0034d0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034d2   0eff     MOVLW     0xff                                                                                            
0034d4   cfe3     MOVFF     0xfe3,0xff7                                                                                     
0034d6   fff7                                                                                                               
0034d8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034da   0eff     MOVLW     0xff                                                                                            
0034dc   cfe3     MOVFF     0xfe3,0xff6                                                                                     
0034de   fff6                                                                                                               
0034e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034e2   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034e4   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034e6   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034e8   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034ea   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034ec   e009     BZ        0x3500                   bz        jEnd                                                         C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034ee   0efd     MOVLW     0xfd                     Stk3Inc   -3                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
0034f0   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0034f2   e105     BNZ       0x34fe                                                                                          
0034f4   0efe     MOVLW     0xfe                                                                                            
0034f6   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0034f8   e102     BNZ       0x34fe                                                                                          
0034fa   0eff     MOVLW     0xff                                                                                            
0034fc   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0034fe   d7f4     BRA       0x34e8                   bra       jLoop                                                        C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
003500   0efd     MOVLW     0xfd                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\src\traditional\stdclib\slenpgm.asm
003502   cfe3     MOVFF     0xfe3,0x1d                                                                                      
003504   f01d                                                                                                               
003506   0efe     MOVLW     0xfe                                                                                            
003508   cfe3     MOVFF     0xfe3,0x1e                                                                                      
00350a   f01e                                                                                                               
00350c   0eff     MOVLW     0xff                                                                                            
00350e   cfe3     MOVFF     0xfe3,0x1f                                                                                      
003510   f01f                                                                                                               
003512   0012     RETURN    0x0                      return                                                                 C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #else                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #endif                                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                           #endif                                                                           C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                             end                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
                                                                                                                            C:\MCC18\src\traditional\stdclib\slenpgm.asm
